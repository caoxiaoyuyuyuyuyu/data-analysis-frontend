import {
  DefaultPropsProvider_default,
  GlobalStyles_default,
  alpha,
  capitalize,
  composeClasses,
  css,
  defaultTheme_default,
  exactProp,
  extendSxProp,
  generateUtilityClass,
  generateUtilityClasses,
  identifier_default,
  keyframes,
  require_jsx_runtime,
  resolveProps,
  styled_default,
  unstable_memoTheme,
  useDefaultProps,
  useEnhancedEffect_default,
  useRtl,
  useTheme,
  useThemeProps
} from "./chunk-ZAXRWAST.js";
import {
  Symbol as Symbol2,
  TransitionGroup_default,
  appearance_default,
  arc_default,
  area_default,
  ascending_default,
  band,
  bumpX,
  bumpY,
  catmullRom_default,
  date_default,
  descending_default,
  diverging_default,
  expand_default,
  insideOut_default,
  line_default,
  linear,
  linear_default,
  log,
  monotoneX,
  monotoneY,
  natural_default,
  none_default,
  none_default2,
  number_default,
  ordinal,
  pie_default,
  point,
  pow,
  reverse_default,
  sequential,
  silhouette_default,
  sqrt,
  stack_default,
  stepAfter,
  stepBefore,
  step_default,
  string_default,
  symbolsFill,
  threshold,
  time,
  utcTime,
  wiggle_default
} from "./chunk-2IMY7DCA.js";
import {
  require_prop_types
} from "./chunk-KMVGN64O.js";
import "./chunk-5BAKG32Q.js";
import "./chunk-KC6G6ICL.js";
import {
  require_react_dom
} from "./chunk-ISY3SE76.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-SHCVVRCJ.js";
import {
  _extends
} from "./chunk-CDGJA232.js";
import {
  require_react
} from "./chunk-2RGQL2JM.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js
var require_use_sync_external_store_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js"(exports) {
    "use strict";
    (function() {
      function is2(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React144 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore = React144.useSyncExternalStore, useRef19 = React144.useRef, useEffect24 = React144.useEffect, useMemo21 = React144.useMemo, useDebugValue = React144.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        var instRef = useRef19(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else
          inst = instRef.current;
        instRef = useMemo21(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot))
                return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual]
        );
        var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
        useEffect24(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue(value);
        return value;
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_with_selector_development();
    }
  }
});

// node_modules/bezier-easing/src/index.js
var require_src = __commonJS({
  "node_modules/bezier-easing/src/index.js"(exports, module) {
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 1e-3;
    var SUBDIVISION_PRECISION = 1e-7;
    var SUBDIVISION_MAX_ITERATIONS = 10;
    var kSplineTableSize = 11;
    var kSampleStepSize = 1 / (kSplineTableSize - 1);
    var float32ArraySupported = typeof Float32Array === "function";
    function A(aA1, aA2) {
      return 1 - 3 * aA2 + 3 * aA1;
    }
    function B2(aA1, aA2) {
      return 3 * aA2 - 6 * aA1;
    }
    function C(aA1) {
      return 3 * aA1;
    }
    function calcBezier(aT, aA1, aA2) {
      return ((A(aA1, aA2) * aT + B2(aA1, aA2)) * aT + C(aA1)) * aT;
    }
    function getSlope(aT, aA1, aA2) {
      return 3 * A(aA1, aA2) * aT * aT + 2 * B2(aA1, aA2) * aT + C(aA1);
    }
    function binarySubdivide(aX, aA, aB, mX1, mX2) {
      var currentX, currentT, i = 0;
      do {
        currentT = aA + (aB - aA) / 2;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
      return currentT;
    }
    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
      for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0) {
          return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }
      return aGuessT;
    }
    function LinearEasing(x) {
      return x;
    }
    module.exports = function bezier(mX1, mY1, mX2, mY2) {
      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error("bezier x values must be in [0, 1] range");
      }
      if (mX1 === mY1 && mX2 === mY2) {
        return LinearEasing;
      }
      var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
      function getTForX(aX) {
        var intervalStart = 0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;
        var dist2 = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist2 * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      }
      return function BezierEasing2(x) {
        if (x === 0) {
          return 0;
        }
        if (x === 1) {
          return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
      };
    };
  }
});

// node_modules/@mui/x-charts/esm/constants/index.js
var DEFAULT_X_AXIS_KEY = "DEFAULT_X_AXIS_KEY";
var DEFAULT_Y_AXIS_KEY = "DEFAULT_Y_AXIS_KEY";
var DEFAULT_ROTATION_AXIS_KEY = "DEFAULT_ROTATION_AXIS_KEY";
var DEFAULT_RADIUS_AXIS_KEY = "DEFAULT_RADIUS_AXIS_KEY";
var DEFAULT_MARGINS = {
  top: 20,
  bottom: 20,
  left: 20,
  right: 20
};
var DEFAULT_AXIS_SIZE_WIDTH = 45;
var DEFAULT_AXIS_SIZE_HEIGHT = 25;
var AXIS_LABEL_DEFAULT_HEIGHT = 20;

// node_modules/@mui/x-charts/esm/context/useChartApiContext.js
var React14 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartProvider.js
var React12 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/store/useCharts.js
var React6 = __toESM(require_react(), 1);

// node_modules/@mui/utils/esm/useId/useId.js
var React = __toESM(require_react(), 1);
var globalId = 0;
function useGlobalId(idOverride) {
  const [defaultId, setDefaultId] = React.useState(idOverride);
  const id = idOverride || defaultId;
  React.useEffect(() => {
    if (defaultId == null) {
      globalId += 1;
      setDefaultId(`mui-${globalId}`);
    }
  }, [defaultId]);
  return id;
}
var safeReact = {
  ...React
};
var maybeReactUseId = safeReact.useId;
function useId(idOverride) {
  if (maybeReactUseId !== void 0) {
    const reactId = maybeReactUseId();
    return idOverride ?? reactId;
  }
  return useGlobalId(idOverride);
}

// node_modules/@mui/x-charts/esm/internals/plugins/utils/ChartStore.js
var ChartStore = class {
  constructor(value) {
    this.value = void 0;
    this.listeners = void 0;
    this.subscribe = (fn2) => {
      this.listeners.add(fn2);
      return () => {
        this.listeners.delete(fn2);
      };
    };
    this.getSnapshot = () => {
      return this.value;
    };
    this.update = (updater) => {
      const newState = updater(this.value);
      if (newState !== this.value) {
        this.value = newState;
        this.listeners.forEach((l) => l(newState));
      }
    };
    this.value = value;
    this.listeners = /* @__PURE__ */ new Set();
  }
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.js
var React2 = __toESM(require_react(), 1);
var useChartAnimation = ({
  params,
  store
}) => {
  React2.useEffect(() => {
    store.update((prevState) => {
      return _extends({}, prevState, {
        animation: _extends({}, prevState.animation, {
          skip: params.skipAnimation
        })
      });
    });
  }, [store, params.skipAnimation]);
  const disableAnimation = React2.useCallback(() => {
    let disableCalled = false;
    store.update((prevState) => _extends({}, prevState, {
      animation: _extends({}, prevState.animation, {
        skipAnimationRequests: prevState.animation.skipAnimationRequests + 1
      })
    }));
    return () => {
      if (disableCalled) {
        return;
      }
      disableCalled = true;
      store.update((prevState) => _extends({}, prevState, {
        animation: _extends({}, prevState.animation, {
          skipAnimationRequests: prevState.animation.skipAnimationRequests - 1
        })
      }));
    };
  }, [store]);
  useEnhancedEffect_default(() => {
    const isAnimationDisabledEnvironment = typeof window === "undefined" || !(window == null ? void 0 : window.matchMedia);
    if (isAnimationDisabledEnvironment) {
      return void 0;
    }
    let disableAnimationCleanup;
    const handleMediaChange = (event) => {
      if (event.matches) {
        disableAnimationCleanup = disableAnimation();
      } else {
        disableAnimationCleanup == null ? void 0 : disableAnimationCleanup();
      }
    };
    const mql = window.matchMedia("(prefers-reduced-motion)");
    handleMediaChange(mql);
    mql.addEventListener("change", handleMediaChange);
    return () => {
      mql.removeEventListener("change", handleMediaChange);
    };
  }, [disableAnimation, store]);
  return {
    instance: {
      disableAnimation
    }
  };
};
useChartAnimation.params = {
  skipAnimation: true
};
useChartAnimation.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  skipAnimation: params.skipAnimation ?? false
});
useChartAnimation.getInitialState = ({
  skipAnimation
}) => {
  const isAnimationDisabledEnvironment = typeof window === "undefined" || !(window == null ? void 0 : window.matchMedia);
  const disableAnimations = false ? isAnimationDisabledEnvironment : false;
  return {
    animation: {
      skip: skipAnimation,
      // By initializing the skipAnimationRequests to 1, we ensure that the animation is always skipped
      skipAnimationRequests: disableAnimations ? 1 : 0
    }
  };
};

// node_modules/@mui/x-charts/node_modules/reselect/dist/reselect.mjs
var runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {
  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {
    let isInputSameAsOutput = false;
    try {
      const emptyObject = {};
      if (resultFunc(emptyObject) === emptyObject)
        isInputSameAsOutput = true;
    } catch {
    }
    if (isInputSameAsOutput) {
      let stack = void 0;
      try {
        throw new Error();
      } catch (e) {
        ;
        ({ stack } = e);
      }
      console.warn(
        "The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.",
        { stack }
      );
    }
  }
};
var runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {
  const { memoize, memoizeOptions } = options;
  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;
  const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);
  if (!areInputSelectorResultsEqual) {
    let stack = void 0;
    try {
      throw new Error();
    } catch (e) {
      ;
      ({ stack } = e);
    }
    console.warn(
      "An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`",
      {
        arguments: inputSelectorArgs,
        firstInputs: inputSelectorResults,
        secondInputs: inputSelectorResultsCopy,
        stack
      }
    );
  }
};
var globalDevModeChecks = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
var NOT_FOUND = Symbol("NOT_FOUND");
function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
  if (typeof func !== "function") {
    throw new TypeError(errorMessage);
  }
}
function assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {
  if (typeof object !== "object") {
    throw new TypeError(errorMessage);
  }
}
function assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {
  if (!array.every((item) => typeof item === "function")) {
    const itemTypes = array.map(
      (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
    ).join(", ");
    throw new TypeError(`${errorMessage}[${itemTypes}]`);
  }
}
var ensureIsArray = (item) => {
  return Array.isArray(item) ? item : [item];
};
function getDependencies(createSelectorArgs) {
  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
  assertIsArrayOfFunctions(
    dependencies,
    `createSelector expects all input-selectors to be functions, but received the following types: `
  );
  return dependencies;
}
function collectInputSelectorResults(dependencies, inputSelectorArgs) {
  const inputSelectorResults = [];
  const { length } = dependencies;
  for (let i = 0; i < length; i++) {
    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
  }
  return inputSelectorResults;
}
var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
  const { identityFunctionCheck, inputStabilityCheck } = {
    ...globalDevModeChecks,
    ...devModeChecks
  };
  return {
    identityFunctionCheck: {
      shouldRun: identityFunctionCheck === "always" || identityFunctionCheck === "once" && firstRun,
      run: runIdentityFunctionCheck
    },
    inputStabilityCheck: {
      shouldRun: inputStabilityCheck === "always" || inputStabilityCheck === "once" && firstRun,
      run: runInputStabilityCheck
    }
  };
};
var REDUX_PROXY_LABEL = Symbol();
var proto = Object.getPrototypeOf({});
function createSingletonCache(equals) {
  let entry;
  return {
    get(key) {
      if (entry && equals(entry.key, key)) {
        return entry.value;
      }
      return NOT_FOUND;
    },
    put(key, value) {
      entry = { key, value };
    },
    getEntries() {
      return entry ? [entry] : [];
    },
    clear() {
      entry = void 0;
    }
  };
}
function createLruCache(maxSize, equals) {
  let entries = [];
  function get(key) {
    const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));
    if (cacheIndex > -1) {
      const entry = entries[cacheIndex];
      if (cacheIndex > 0) {
        entries.splice(cacheIndex, 1);
        entries.unshift(entry);
      }
      return entry.value;
    }
    return NOT_FOUND;
  }
  function put(key, value) {
    if (get(key) === NOT_FOUND) {
      entries.unshift({ key, value });
      if (entries.length > maxSize) {
        entries.pop();
      }
    }
  }
  function getEntries() {
    return entries;
  }
  function clear() {
    entries = [];
  }
  return { get, put, getEntries, clear };
}
var referenceEqualityCheck = (a, b) => a === b;
function createCacheKeyComparator(equalityCheck) {
  return function areArgumentsShallowlyEqual(prev, next) {
    if (prev === null || next === null || prev.length !== next.length) {
      return false;
    }
    const { length } = prev;
    for (let i = 0; i < length; i++) {
      if (!equalityCheck(prev[i], next[i])) {
        return false;
      }
    }
    return true;
  };
}
function lruMemoize(func, equalityCheckOrOptions) {
  const providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : { equalityCheck: equalityCheckOrOptions };
  const {
    equalityCheck = referenceEqualityCheck,
    maxSize = 1,
    resultEqualityCheck
  } = providedOptions;
  const comparator = createCacheKeyComparator(equalityCheck);
  let resultsCount = 0;
  const cache2 = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
  function memoized() {
    let value = cache2.get(arguments);
    if (value === NOT_FOUND) {
      value = func.apply(null, arguments);
      resultsCount++;
      if (resultEqualityCheck) {
        const entries = cache2.getEntries();
        const matchingEntry = entries.find(
          (entry) => resultEqualityCheck(entry.value, value)
        );
        if (matchingEntry) {
          value = matchingEntry.value;
          resultsCount !== 0 && resultsCount--;
        }
      }
      cache2.put(arguments, value);
    }
    return value;
  }
  memoized.clearCache = () => {
    cache2.clear();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
var StrongRef = class {
  constructor(value) {
    this.value = value;
  }
  deref() {
    return this.value;
  }
};
var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
var UNTERMINATED = 0;
var TERMINATED = 1;
function createCacheNode() {
  return {
    s: UNTERMINATED,
    v: void 0,
    o: null,
    p: null
  };
}
function weakMapMemoize(func, options = {}) {
  let fnNode = createCacheNode();
  const { resultEqualityCheck } = options;
  let lastResult;
  let resultsCount = 0;
  function memoized() {
    var _a;
    let cacheNode = fnNode;
    const { length } = arguments;
    for (let i = 0, l = length; i < l; i++) {
      const arg = arguments[i];
      if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
        let objectCache = cacheNode.o;
        if (objectCache === null) {
          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
        }
        const objectNode = objectCache.get(arg);
        if (objectNode === void 0) {
          cacheNode = createCacheNode();
          objectCache.set(arg, cacheNode);
        } else {
          cacheNode = objectNode;
        }
      } else {
        let primitiveCache = cacheNode.p;
        if (primitiveCache === null) {
          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
        }
        const primitiveNode = primitiveCache.get(arg);
        if (primitiveNode === void 0) {
          cacheNode = createCacheNode();
          primitiveCache.set(arg, cacheNode);
        } else {
          cacheNode = primitiveNode;
        }
      }
    }
    const terminatedNode = cacheNode;
    let result;
    if (cacheNode.s === TERMINATED) {
      result = cacheNode.v;
    } else {
      result = func.apply(null, arguments);
      resultsCount++;
      if (resultEqualityCheck) {
        const lastResultValue = ((_a = lastResult == null ? void 0 : lastResult.deref) == null ? void 0 : _a.call(lastResult)) ?? lastResult;
        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
          result = lastResultValue;
          resultsCount !== 0 && resultsCount--;
        }
        const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
        lastResult = needsWeakRef ? new Ref(result) : result;
      }
    }
    terminatedNode.s = TERMINATED;
    terminatedNode.v = result;
    return result;
  }
  memoized.clearCache = () => {
    fnNode = createCacheNode();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
  const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
    memoize: memoizeOrOptions,
    memoizeOptions: memoizeOptionsFromArgs
  } : memoizeOrOptions;
  const createSelector22 = (...createSelectorArgs) => {
    let recomputations = 0;
    let dependencyRecomputations = 0;
    let lastResult;
    let directlyPassedOptions = {};
    let resultFunc = createSelectorArgs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = createSelectorArgs.pop();
    }
    assertIsFunction(
      resultFunc,
      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
    );
    const combinedOptions = {
      ...createSelectorCreatorOptions,
      ...directlyPassedOptions
    };
    const {
      memoize,
      memoizeOptions = [],
      argsMemoize = weakMapMemoize,
      argsMemoizeOptions = [],
      devModeChecks = {}
    } = combinedOptions;
    const finalMemoizeOptions = ensureIsArray(memoizeOptions);
    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
    const dependencies = getDependencies(createSelectorArgs);
    const memoizedResultFunc = memoize(function recomputationWrapper() {
      recomputations++;
      return resultFunc.apply(
        null,
        arguments
      );
    }, ...finalMemoizeOptions);
    let firstRun = true;
    const selector = argsMemoize(function dependenciesChecker() {
      dependencyRecomputations++;
      const inputSelectorResults = collectInputSelectorResults(
        dependencies,
        arguments
      );
      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
      if (true) {
        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);
        if (identityFunctionCheck.shouldRun) {
          identityFunctionCheck.run(
            resultFunc,
            inputSelectorResults,
            lastResult
          );
        }
        if (inputStabilityCheck.shouldRun) {
          const inputSelectorResultsCopy = collectInputSelectorResults(
            dependencies,
            arguments
          );
          inputStabilityCheck.run(
            { inputSelectorResults, inputSelectorResultsCopy },
            { memoize, memoizeOptions: finalMemoizeOptions },
            arguments
          );
        }
        if (firstRun)
          firstRun = false;
      }
      return lastResult;
    }, ...finalArgsMemoizeOptions);
    return Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      dependencyRecomputations: () => dependencyRecomputations,
      resetDependencyRecomputations: () => {
        dependencyRecomputations = 0;
      },
      lastResult: () => lastResult,
      recomputations: () => recomputations,
      resetRecomputations: () => {
        recomputations = 0;
      },
      memoize,
      argsMemoize
    });
  };
  Object.assign(createSelector22, {
    withTypes: () => createSelector22
  });
  return createSelector22;
}
var createSelector = createSelectorCreator(weakMapMemoize);
var createStructuredSelector = Object.assign(
  (inputSelectorsObject, selectorCreator = createSelector) => {
    assertIsObject(
      inputSelectorsObject,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
    );
    const inputSelectorKeys = Object.keys(inputSelectorsObject);
    const dependencies = inputSelectorKeys.map(
      (key) => inputSelectorsObject[key]
    );
    const structuredSelector = selectorCreator(
      dependencies,
      (...inputSelectorResults) => {
        return inputSelectorResults.reduce((composition, value, index) => {
          composition[inputSelectorKeys[index]] = value;
          return composition;
        }, {});
      }
    );
    return structuredSelector;
  },
  { withTypes: () => createStructuredSelector }
);

// node_modules/@mui/x-charts/esm/internals/plugins/utils/selectors.js
var reselectCreateSelector = createSelectorCreator({
  memoize: lruMemoize,
  memoizeOptions: {
    maxSize: 1,
    equalityCheck: Object.is
  }
});
var cache = /* @__PURE__ */ new WeakMap();
var createSelector2 = (...createSelectorArgs) => {
  const selector = (state, selectorArgs) => {
    const cacheKey = state.cacheKey;
    let cacheForCurrentChartInstance = cache.get(cacheKey);
    if (!cacheForCurrentChartInstance) {
      cacheForCurrentChartInstance = /* @__PURE__ */ new Map();
      cache.set(cacheKey, cacheForCurrentChartInstance);
    }
    const cachedSelector = cacheForCurrentChartInstance.get(createSelectorArgs);
    if (cachedSelector) {
      return cachedSelector(state, selectorArgs);
    }
    const fn2 = reselectCreateSelector(...createSelectorArgs);
    cacheForCurrentChartInstance.set(createSelectorArgs, fn2);
    return fn2(state, selectorArgs);
  };
  return selector;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.selectors.js
var selectorChartAnimationState = (state) => state.animation;
var selectorChartSkipAnimation = createSelector2(selectorChartAnimationState, (state) => state.skip || state.skipAnimationRequests > 0);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.js
var React3 = __toESM(require_react(), 1);

// node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js
function ownerWindow(node) {
  const doc = ownerDocument(node);
  return doc.defaultView || window;
}

// node_modules/@mui/x-charts/esm/internals/store/useSelector.js
var import_with_selector = __toESM(require_with_selector(), 1);
var defaultCompare = Object.is;
var useSelector = (store, selector, args = void 0, equals = defaultCompare) => {
  const selectorWithArgs = (state) => selector(state, args);
  return (0, import_with_selector.useSyncExternalStoreWithSelector)(store.subscribe, store.getSnapshot, store.getSnapshot, selectorWithArgs, equals);
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisLayout.selectors.js
var selectorChartCartesianAxisState = (state) => state.cartesianAxis;
var selectorChartRawXAxis = createSelector2(selectorChartCartesianAxisState, (axis) => axis == null ? void 0 : axis.x);
var selectorChartRawYAxis = createSelector2(selectorChartCartesianAxisState, (axis) => axis == null ? void 0 : axis.y);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartAxisSize.selectors.js
var selectorChartLeftAxisSize = createSelector2([selectorChartRawYAxis], (yAxis) => (yAxis ?? []).reduce((acc, axis) => {
  var _a;
  return axis.position === "left" ? acc + (axis.width || 0) + (((_a = axis.zoom) == null ? void 0 : _a.slider.enabled) ? axis.zoom.slider.size : 0) : acc;
}, 0));
var selectorChartRightAxisSize = createSelector2([selectorChartRawYAxis], (yAxis) => (yAxis ?? []).reduce((acc, axis) => {
  var _a;
  return axis.position === "right" ? acc + (axis.width || 0) + (((_a = axis.zoom) == null ? void 0 : _a.slider.enabled) ? axis.zoom.slider.size : 0) : acc;
}, 0));
var selectorChartTopAxisSize = createSelector2([selectorChartRawXAxis], (xAxis) => (xAxis ?? []).reduce((acc, axis) => {
  var _a;
  return axis.position === "top" ? acc + (axis.height || 0) + (((_a = axis.zoom) == null ? void 0 : _a.slider.enabled) ? axis.zoom.slider.size : 0) : acc;
}, 0));
var selectorChartBottomAxisSize = createSelector2([selectorChartRawXAxis], (xAxis) => (xAxis ?? []).reduce((acc, axis) => {
  var _a;
  return axis.position === "bottom" ? acc + (axis.height || 0) + (((_a = axis.zoom) == null ? void 0 : _a.slider.enabled) ? axis.zoom.slider.size : 0) : acc;
}, 0));

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.selectors.js
var selectorChartDimensionsState = (state) => state.dimensions;
var selectorChartMargin = createSelector2(selectorChartDimensionsState, (dimensionsState) => dimensionsState.margin);
var selectorChartWidth = createSelector2(selectorChartDimensionsState, (dimensionsState) => dimensionsState.width);
var selectorChartHeight = createSelector2(selectorChartDimensionsState, (dimensionsState) => dimensionsState.height);
var selectorChartTopMargin = createSelector2(selectorChartMargin, (margin) => margin.top);
var selectorChartRightMargin = createSelector2(selectorChartMargin, (margin) => margin.right);
var selectorChartBottomMargin = createSelector2(selectorChartMargin, (margin) => margin.bottom);
var selectorChartLeftMargin = createSelector2(selectorChartMargin, (margin) => margin.left);
var selectorChartDrawingArea = createSelector2(selectorChartWidth, selectorChartHeight, selectorChartTopMargin, selectorChartRightMargin, selectorChartBottomMargin, selectorChartLeftMargin, selectorChartTopAxisSize, selectorChartRightAxisSize, selectorChartBottomAxisSize, selectorChartLeftAxisSize, (width, height, marginTop, marginRight, marginBottom, marginLeft, axisSizeTop, axisSizeRight, axisSizeBottom, axisSizeLeft) => ({
  width: width - marginLeft - marginRight - axisSizeLeft - axisSizeRight,
  left: marginLeft + axisSizeLeft,
  right: marginRight + axisSizeRight,
  height: height - marginTop - marginBottom - axisSizeTop - axisSizeBottom,
  top: marginTop + axisSizeTop,
  bottom: marginBottom + axisSizeBottom
}));
var selectorChartPropsSize = createSelector2(selectorChartDimensionsState, (dimensionsState) => ({
  width: dimensionsState.propsWidth,
  height: dimensionsState.propsHeight
}));
var selectorChartContainerSize = createSelector2(selectorChartWidth, selectorChartHeight, (width, height) => ({
  width,
  height
}));

// node_modules/@mui/x-charts/esm/internals/defaultizeMargin.js
function defaultizeMargin(input, defaultMargin2) {
  if (typeof input === "number") {
    return {
      top: input,
      bottom: input,
      left: input,
      right: input
    };
  }
  if (defaultMargin2) {
    return _extends({}, defaultMargin2, input);
  }
  return input;
}

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.js
var MAX_COMPUTE_RUN = 10;
var useChartDimensions = ({
  params,
  store,
  svgRef
}) => {
  const hasInSize = params.width !== void 0 && params.height !== void 0;
  const stateRef = React3.useRef({
    displayError: false,
    initialCompute: true,
    computeRun: 0
  });
  const [innerWidth, setInnerWidth] = React3.useState(0);
  const [innerHeight, setInnerHeight] = React3.useState(0);
  const computeSize = React3.useCallback(() => {
    const mainEl = svgRef == null ? void 0 : svgRef.current;
    if (!mainEl) {
      return {};
    }
    const win = ownerWindow(mainEl);
    const computedStyle = win.getComputedStyle(mainEl);
    const newHeight = Math.floor(parseFloat(computedStyle.height)) || 0;
    const newWidth = Math.floor(parseFloat(computedStyle.width)) || 0;
    store.update((prev) => {
      if (prev.dimensions.width === newWidth && prev.dimensions.height === newHeight) {
        return prev;
      }
      return _extends({}, prev, {
        dimensions: {
          margin: {
            top: params.margin.top,
            right: params.margin.right,
            bottom: params.margin.bottom,
            left: params.margin.left
          },
          width: params.width ?? newWidth,
          height: params.height ?? newHeight,
          propsWidth: params.width,
          propsHeight: params.height
        }
      });
    });
    return {
      height: newHeight,
      width: newWidth
    };
  }, [
    store,
    svgRef,
    params.height,
    params.width,
    // Margin is an object, so we need to include all the properties to prevent infinite loops.
    params.margin.left,
    params.margin.right,
    params.margin.top,
    params.margin.bottom
  ]);
  React3.useEffect(() => {
    store.update((prev) => {
      const width = params.width ?? prev.dimensions.width;
      const height = params.height ?? prev.dimensions.height;
      return _extends({}, prev, {
        dimensions: {
          margin: {
            top: params.margin.top,
            right: params.margin.right,
            bottom: params.margin.bottom,
            left: params.margin.left
          },
          width,
          height,
          propsHeight: params.height,
          propsWidth: params.width
        }
      });
    });
  }, [
    store,
    params.height,
    params.width,
    // Margin is an object, so we need to include all the properties to prevent infinite loops.
    params.margin.left,
    params.margin.right,
    params.margin.top,
    params.margin.bottom
  ]);
  React3.useEffect(() => {
    stateRef.current.displayError = true;
  }, []);
  useEnhancedEffect_default(() => {
    if (hasInSize || !stateRef.current.initialCompute || stateRef.current.computeRun > MAX_COMPUTE_RUN) {
      return;
    }
    const computedSize = computeSize();
    if (computedSize.width !== innerWidth || computedSize.height !== innerHeight) {
      stateRef.current.computeRun += 1;
      if (computedSize.width !== void 0) {
        setInnerWidth(computedSize.width);
      }
      if (computedSize.height !== void 0) {
        setInnerHeight(computedSize.height);
      }
    } else if (stateRef.current.initialCompute) {
      stateRef.current.initialCompute = false;
    }
  }, [innerHeight, innerWidth, computeSize, hasInSize]);
  useEnhancedEffect_default(() => {
    if (hasInSize) {
      return () => {
      };
    }
    computeSize();
    const elementToObserve = svgRef.current;
    if (typeof ResizeObserver === "undefined") {
      return () => {
      };
    }
    let animationFrame;
    const observer = new ResizeObserver(() => {
      animationFrame = requestAnimationFrame(() => {
        computeSize();
      });
    });
    if (elementToObserve) {
      observer.observe(elementToObserve);
    }
    return () => {
      if (animationFrame) {
        cancelAnimationFrame(animationFrame);
      }
      if (elementToObserve) {
        observer.unobserve(elementToObserve);
      }
    };
  }, [computeSize, hasInSize, svgRef]);
  if (true) {
    if (stateRef.current.displayError && params.width === void 0 && innerWidth === 0) {
      console.error(`MUI X Charts: ChartContainer does not have \`width\` prop, and its container has no \`width\` defined.`);
      stateRef.current.displayError = false;
    }
    if (stateRef.current.displayError && params.height === void 0 && innerHeight === 0) {
      console.error(`MUI X Charts: ChartContainer does not have \`height\` prop, and its container has no \`height\` defined.`);
      stateRef.current.displayError = false;
    }
  }
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const isXInside = React3.useCallback((x) => x >= drawingArea.left - 1 && x <= drawingArea.left + drawingArea.width, [drawingArea.left, drawingArea.width]);
  const isYInside = React3.useCallback((y) => y >= drawingArea.top - 1 && y <= drawingArea.top + drawingArea.height, [drawingArea.height, drawingArea.top]);
  const isPointInside = React3.useCallback((x, y, targetElement) => {
    if (targetElement && targetElement.closest("[data-drawing-container]")) {
      return true;
    }
    return isXInside(x) && isYInside(y);
  }, [isXInside, isYInside]);
  return {
    instance: {
      isPointInside,
      isXInside,
      isYInside
    }
  };
};
useChartDimensions.params = {
  width: true,
  height: true,
  margin: true
};
useChartDimensions.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  margin: defaultizeMargin(params.margin, DEFAULT_MARGINS)
});
useChartDimensions.getInitialState = ({
  width,
  height,
  margin
}) => {
  return {
    dimensions: {
      margin,
      width: width ?? 0,
      height: height ?? 0,
      propsWidth: width,
      propsHeight: height
    }
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.js
var React4 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.utils.js
var globalChartDefaultId = 0;
var createChartDefaultId = () => {
  globalChartDefaultId += 1;
  return `mui-chart-${globalChartDefaultId}`;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.js
var useChartId = ({
  params,
  store
}) => {
  React4.useEffect(() => {
    store.update((prevState) => {
      if (params.id === void 0 || params.id === prevState.id.providedChartId && prevState.id.chartId !== void 0) {
        return prevState;
      }
      return _extends({}, prevState, {
        id: _extends({}, prevState.id, {
          chartId: params.id ?? createChartDefaultId()
        })
      });
    });
  }, [store, params.id]);
  return {};
};
useChartId.params = {
  id: true
};
useChartId.getInitialState = ({
  id
}) => ({
  id: {
    chartId: id,
    providedChartId: id
  }
});

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartId/useChartId.selectors.js
var selectorChartIdState = (state) => state.id;
var selectorChartId = createSelector2(selectorChartIdState, (idState) => idState.chartId);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.js
var React5 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/colorPalettes/categorical/rainbowSurge.js
var rainbowSurgePaletteLight = ["#4254FB", "#FFB422", "#FA4F58", "#0DBEFF", "#22BF75", "#FA83B4", "#FF7511"];
var rainbowSurgePaletteDark = ["#495AFB", "#FFC758", "#F35865", "#30C8FF", "#44CE8D", "#F286B3", "#FF8C39"];
var rainbowSurgePalette = (mode) => mode === "dark" ? rainbowSurgePaletteDark : rainbowSurgePaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/categorical/blueberryTwilight.js
var blueberryTwilightPaletteLight = ["#02B2AF", "#2E96FF", "#B800D8", "#60009B", "#2731C8", "#03008D"];
var blueberryTwilightPaletteDark = ["#02B2AF", "#72CCFF", "#DA00FF", "#9001CB", "#2E96FF", "#3B48E0"];
var blueberryTwilightPalette = (mode) => mode === "dark" ? blueberryTwilightPaletteDark : blueberryTwilightPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/categorical/mangoFusion.js
var mangoFusionPaletteLight = ["#173A5E", "#00A3A0", "#C91B63", "#EF5350", "#FFA726", "#B800D8", "#60009B", "#2E96FF", "#2731C8", "#03008D"];
var mangoFusionPaletteDark = ["#41698F", "#19D0CD", "#DE196B", "#FC5F5C", "#FFD771", "#DA00FF", "#9001CB", "#72CCFF", "#2E96FF", "#3B48E0"];
var mangoFusionPalette = (mode) => mode === "dark" ? mangoFusionPaletteDark : mangoFusionPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/categorical/cheerfulFiesta.js
var cheerfulFiestaPaletteDark = ["#0059B2", "#2E96FF", "#FFC24C", "#FF9F0E", "#F38200", "#2ABFDE", "#1F94AD", "#BD2C38", "#FF3143", "#FF8282"];
var cheerfulFiestaPaletteLight = ["#003A75", "#007FFF", "#FFC24C", "#FF9D09", "#CA6C00", "#127D94", "#1F94AD", "#C82634", "#FF3143", "#FF7E7E"];
var cheerfulFiestaPalette = (mode) => mode === "dark" ? cheerfulFiestaPaletteDark : cheerfulFiestaPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/strawberrySky.js
var strawberrySkyPaletteLight = ["#6877FF", "#694FFD", "#A94FFD", "#DA4FFD", "#F050A5", "#FF5E6C"];
var strawberrySkyPaletteDark = strawberrySkyPaletteLight;
var strawberrySkyPalette = (mode) => mode === "dark" ? strawberrySkyPaletteDark : strawberrySkyPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/blue.js
var bluePaletteLight = ["#BDDEFF", "#99CCFF", "#66B2FF", "#2E96FF", "#0064D6", "#0D47A1", "#0A367B", "#072555"];
var bluePaletteDark = bluePaletteLight;
var bluePalette = (mode) => mode === "dark" ? bluePaletteDark : bluePaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/cyan.js
var cyanPaletteLight = ["#CFE9E8", "#A3DAD8", "#7ED0CE", "#44BDBA", "#299896", "#137370", "#0E5A58", "#073938"];
var cyanPaletteDark = cyanPaletteLight;
var cyanPalette = (mode) => mode === "dark" ? cyanPaletteDark : cyanPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/green.js
var greenPaletteLight = ["#CDEBDD", "#B2E2CB", "#8FD8B5", "#54C690", "#31B375", "#359F6D", "#0F7746", "#065731"];
var greenPaletteDark = greenPaletteLight;
var greenPalette = (mode) => mode === "dark" ? greenPaletteDark : greenPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/orange.js
var orangePaletteLight = ["#FBDBC3", "#F9BD92", "#F99F5D", "#FF7A19", "#FD620B", "#E15100", "#AC3E00", "#822F00"];
var orangePaletteDark = orangePaletteLight;
var orangePalette = (mode) => mode === "dark" ? orangePaletteDark : orangePaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/pink.js
var pinkPaletteLight = ["#F7D2E1", "#F6BED5", "#F4A0C3", "#F6619F", "#EE448B", "#E32977", "#B6215F", "#8B1F4C"];
var pinkPaletteDark = pinkPaletteLight;
var pinkPalette = (mode) => mode === "dark" ? pinkPaletteDark : pinkPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/purple.js
var purplePaletteLight = ["#CAD4EE", "#98ADE5", "#577EE3", "#4254FB", "#2638DF", "#222FA6", "#111C7F", "#091159"];
var purplePaletteDark = purplePaletteLight;
var purplePalette = (mode) => mode === "dark" ? purplePaletteDark : purplePaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/red.js
var redPaletteLight = ["#FAE0E0", "#F7C0BF", "#F3A2A0", "#EF5350", "#E53935", "#DC2B27", "#860B08", "#560503 "];
var redPaletteDark = redPaletteLight;
var redPalette = (mode) => mode === "dark" ? redPaletteDark : redPaletteLight;

// node_modules/@mui/x-charts/esm/colorPalettes/sequential/yellow.js
var yellowPaletteLight = ["#FBEFD6", "#F5DEB0", "#F3CD80", "#FAC14F", "#FFB219", "#EF9801", "#DA7D0B", "#AB6208"];
var yellowPaletteDark = yellowPaletteLight;
var yellowPalette = (mode) => mode === "dark" ? yellowPaletteDark : yellowPaletteLight;

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/processSeries.js
var preprocessSeries = ({
  series,
  colors,
  seriesConfig: seriesConfig5,
  dataset
}) => {
  const seriesGroups = {};
  series.forEach((seriesData, seriesIndex) => {
    var _a;
    const seriesWithDefaultValues = seriesConfig5[seriesData.type].getSeriesWithDefaultValues(seriesData, seriesIndex, colors);
    const id = seriesWithDefaultValues.id;
    if (seriesGroups[seriesData.type] === void 0) {
      seriesGroups[seriesData.type] = {
        series: {},
        seriesOrder: []
      };
    }
    if (((_a = seriesGroups[seriesData.type]) == null ? void 0 : _a.series[id]) !== void 0) {
      throw new Error(`MUI X Charts: series' id "${id}" is not unique.`);
    }
    seriesGroups[seriesData.type].series[id] = seriesWithDefaultValues;
    seriesGroups[seriesData.type].seriesOrder.push(id);
  });
  const processedSeries = {};
  Object.keys(seriesConfig5).forEach((type) => {
    var _a, _b;
    const group = seriesGroups[type];
    if (group !== void 0) {
      processedSeries[type] = ((_b = (_a = seriesConfig5[type]) == null ? void 0 : _a.seriesProcessor) == null ? void 0 : _b.call(_a, group, dataset)) ?? seriesGroups[type];
    }
  });
  return processedSeries;
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.js
var useChartSeries = ({
  params,
  store,
  seriesConfig: seriesConfig5
}) => {
  const {
    series,
    dataset,
    theme,
    colors
  } = params;
  const isFirstRender = React5.useRef(true);
  React5.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      series: _extends({}, prev.series, {
        processedSeries: preprocessSeries({
          series,
          colors: typeof colors === "function" ? colors(theme) : colors,
          seriesConfig: seriesConfig5,
          dataset
        })
      })
    }));
  }, [colors, dataset, series, theme, seriesConfig5, store]);
  return {};
};
useChartSeries.params = {
  dataset: true,
  series: true,
  colors: true,
  theme: true
};
var EMPTY_ARRAY = [];
useChartSeries.getDefaultizedParams = ({
  params
}) => {
  var _a;
  return _extends({}, params, {
    series: ((_a = params.series) == null ? void 0 : _a.length) ? params.series : EMPTY_ARRAY,
    colors: params.colors ?? rainbowSurgePalette,
    theme: params.theme ?? "light"
  });
};
useChartSeries.getInitialState = ({
  series = [],
  colors,
  theme,
  dataset
}, _, seriesConfig5) => {
  return {
    series: {
      seriesConfig: seriesConfig5,
      processedSeries: preprocessSeries({
        series,
        colors: typeof colors === "function" ? colors(theme) : colors,
        seriesConfig: seriesConfig5,
        dataset
      })
    }
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.selectors.js
var selectorChartSeriesState = (state) => state.series;
var selectorChartSeriesProcessed = createSelector2(selectorChartSeriesState, (seriesState) => seriesState.processedSeries);
var selectorChartSeriesConfig = createSelector2(selectorChartSeriesState, (seriesState) => seriesState.seriesConfig);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/corePlugins.js
var CHART_CORE_PLUGINS = [useChartId, useChartDimensions, useChartSeries, useChartAnimation];

// node_modules/@mui/x-charts/esm/internals/store/extractPluginParamsFromProps.js
var _excluded = ["apiRef"];
var extractPluginParamsFromProps = (_ref) => {
  let {
    plugins
  } = _ref, props = _objectWithoutPropertiesLoose(_ref.props, _excluded);
  const paramsLookup = {};
  plugins.forEach((plugin) => {
    Object.assign(paramsLookup, plugin.params);
  });
  const pluginParams = {};
  Object.keys(props).forEach((propName) => {
    const prop = props[propName];
    if (paramsLookup[propName]) {
      pluginParams[propName] = prop;
    }
  });
  const defaultizedPluginParams = plugins.reduce((acc, plugin) => {
    if (plugin.getDefaultizedParams) {
      return plugin.getDefaultizedParams({
        params: acc
      });
    }
    return acc;
  }, pluginParams);
  return defaultizedPluginParams;
};

// node_modules/@mui/x-charts/esm/internals/store/useCharts.js
var globalId2 = 0;
function useCharts(inPlugins, props, seriesConfig5) {
  const chartId = useId();
  const plugins = React6.useMemo(() => [...CHART_CORE_PLUGINS, ...inPlugins], [inPlugins]);
  const pluginParams = extractPluginParamsFromProps({
    plugins,
    props
  });
  pluginParams.id = pluginParams.id ?? chartId;
  const instanceRef = React6.useRef({});
  const instance = instanceRef.current;
  const publicAPI = useChartApiInitialization(props.apiRef);
  const innerChartRootRef = React6.useRef(null);
  const innerSvgRef = React6.useRef(null);
  const storeRef = React6.useRef(null);
  if (storeRef.current == null) {
    globalId2 += 1;
    const initialState = {
      cacheKey: {
        id: globalId2
      }
    };
    plugins.forEach((plugin) => {
      if (plugin.getInitialState) {
        Object.assign(initialState, plugin.getInitialState(pluginParams, initialState, seriesConfig5));
      }
    });
    storeRef.current = new ChartStore(initialState);
  }
  const runPlugin = (plugin) => {
    const pluginResponse = plugin({
      instance,
      params: pluginParams,
      plugins,
      store: storeRef.current,
      svgRef: innerSvgRef,
      chartRootRef: innerChartRootRef,
      seriesConfig: seriesConfig5
    });
    if (pluginResponse.publicAPI) {
      Object.assign(publicAPI.current, pluginResponse.publicAPI);
    }
    if (pluginResponse.instance) {
      Object.assign(instance, pluginResponse.instance);
    }
  };
  plugins.forEach(runPlugin);
  const contextValue = React6.useMemo(() => ({
    store: storeRef.current,
    publicAPI: publicAPI.current,
    instance,
    svgRef: innerSvgRef,
    chartRootRef: innerChartRootRef
  }), [instance, publicAPI]);
  return {
    contextValue
  };
}
function initializeInputApiRef(inputApiRef) {
  if (inputApiRef.current == null) {
    inputApiRef.current = {};
  }
  return inputApiRef;
}
function useChartApiInitialization(inputApiRef) {
  const fallbackPublicApiRef = React6.useRef({});
  if (inputApiRef) {
    return initializeInputApiRef(inputApiRef);
  }
  return fallbackPublicApiRef;
}

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartContext.js
var React7 = __toESM(require_react(), 1);
var ChartContext = React7.createContext(null);
if (true)
  ChartContext.displayName = "ChartContext";

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.js
var React9 = __toESM(require_react(), 1);

// node_modules/@mui/x-internals/esm/warning/warning.js
var warnedOnceCache = /* @__PURE__ */ new Set();
function warnOnce(message, gravity = "warning") {
  if (false) {
    return;
  }
  const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
  if (!warnedOnceCache.has(cleanMessage)) {
    warnedOnceCache.add(cleanMessage);
    if (gravity === "error") {
      console.error(cleanMessage);
    } else {
      console.warn(cleanMessage);
    }
  }
}

// node_modules/@mui/x-charts/esm/internals/constants.js
var ZOOM_SLIDER_MARGIN = 4;
var DEFAULT_ZOOM_SLIDER_SIZE = 20 + 2 * ZOOM_SLIDER_MARGIN;
var DEFAULT_ZOOM_SLIDER_SHOW_TOOLTIP = "hover";

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/defaultizeZoom.js
var defaultZoomOptions = {
  minStart: 0,
  maxEnd: 100,
  step: 5,
  minSpan: 10,
  maxSpan: 100,
  panning: true,
  filterMode: "keep",
  slider: {
    enabled: false,
    size: DEFAULT_ZOOM_SLIDER_SIZE,
    showTooltip: DEFAULT_ZOOM_SLIDER_SHOW_TOOLTIP
  }
};
var defaultizeZoom = (zoom, axisId, axisDirection) => {
  if (!zoom) {
    return void 0;
  }
  if (zoom === true) {
    return _extends({
      axisId,
      axisDirection
    }, defaultZoomOptions);
  }
  return _extends({
    axisId,
    axisDirection
  }, defaultZoomOptions, zoom, {
    slider: _extends({}, defaultZoomOptions.slider, zoom.slider)
  });
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/defaultizeAxis.js
function defaultizeXAxis(inAxes, dataset) {
  const offsets = {
    top: 0,
    bottom: 0,
    none: 0
  };
  const inputAxes = inAxes && inAxes.length > 0 ? inAxes : [{
    id: DEFAULT_X_AXIS_KEY,
    scaleType: "linear"
  }];
  const parsedAxes = inputAxes.map((axisConfig, index) => {
    var _a;
    const dataKey = axisConfig.dataKey;
    const defaultPosition = index === 0 ? "bottom" : "none";
    const position = axisConfig.position ?? defaultPosition;
    const defaultHeight = DEFAULT_AXIS_SIZE_HEIGHT + (axisConfig.label ? AXIS_LABEL_DEFAULT_HEIGHT : 0);
    const id = axisConfig.id ?? `defaultized-x-axis-${index}`;
    const sharedConfig = _extends({
      offset: offsets[position]
    }, axisConfig, {
      id,
      position,
      height: axisConfig.height ?? defaultHeight,
      zoom: defaultizeZoom(axisConfig.zoom, id, "x")
    });
    if (position !== "none") {
      offsets[position] += sharedConfig.height;
      if ((_a = sharedConfig.zoom) == null ? void 0 : _a.slider.enabled) {
        offsets[position] += sharedConfig.zoom.slider.size;
      }
    }
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return sharedConfig;
    }
    if (dataset === void 0) {
      throw new Error(`MUI X Charts: x-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({}, sharedConfig, {
      data: dataset.map((d) => d[dataKey])
    });
  });
  return parsedAxes;
}
function defaultizeYAxis(inAxes, dataset) {
  const offsets = {
    right: 0,
    left: 0,
    none: 0
  };
  const inputAxes = inAxes && inAxes.length > 0 ? inAxes : [{
    id: DEFAULT_Y_AXIS_KEY,
    scaleType: "linear"
  }];
  const parsedAxes = inputAxes.map((axisConfig, index) => {
    var _a;
    const dataKey = axisConfig.dataKey;
    const defaultPosition = index === 0 ? "left" : "none";
    const position = axisConfig.position ?? defaultPosition;
    const defaultWidth = DEFAULT_AXIS_SIZE_WIDTH + (axisConfig.label ? AXIS_LABEL_DEFAULT_HEIGHT : 0);
    const id = axisConfig.id ?? `defaultized-y-axis-${index}`;
    const sharedConfig = _extends({
      offset: offsets[position]
    }, axisConfig, {
      id,
      position,
      width: axisConfig.width ?? defaultWidth,
      zoom: defaultizeZoom(axisConfig.zoom, id, "y")
    });
    if (position !== "none") {
      offsets[position] += sharedConfig.width;
      if ((_a = sharedConfig.zoom) == null ? void 0 : _a.slider.enabled) {
        offsets[position] += sharedConfig.zoom.slider.size;
      }
    }
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return sharedConfig;
    }
    if (dataset === void 0) {
      throw new Error(`MUI X Charts: y-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({}, sharedConfig, {
      data: dataset.map((d) => d[dataKey])
    });
  });
  return parsedAxes;
}

// node_modules/@mui/x-charts/esm/models/axis.js
function isBandScaleConfig(scaleConfig) {
  return scaleConfig.scaleType === "band";
}
function isPointScaleConfig(scaleConfig) {
  return scaleConfig.scaleType === "point";
}

// node_modules/@mui/x-charts/esm/internals/colorScale.js
function getSequentialColorScale(config) {
  if (config.type === "piecewise") {
    return threshold(config.thresholds, config.colors);
  }
  return sequential([config.min ?? 0, config.max ?? 100], config.color);
}
function getOrdinalColorScale(config) {
  if (config.values) {
    return ordinal(config.values, config.colors).unknown(config.unknownColor ?? null);
  }
  return ordinal(config.colors.map((_, index) => index), config.colors).unknown(config.unknownColor ?? null);
}
function getColorScale(config) {
  return config.type === "ordinal" ? getOrdinalColorScale(config) : getSequentialColorScale(config);
}

// node_modules/@mui/x-charts/esm/internals/ticks.js
function getTickNumber(params) {
  const {
    tickMaxStep,
    tickMinStep,
    tickNumber,
    range,
    domain
  } = params;
  const maxTicks = tickMinStep === void 0 ? 999 : Math.floor(Math.abs(domain[1] - domain[0]) / tickMinStep);
  const minTicks = tickMaxStep === void 0 ? 2 : Math.ceil(Math.abs(domain[1] - domain[0]) / tickMaxStep);
  const defaultizedTickNumber = tickNumber ?? Math.floor(Math.abs(range[1] - range[0]) / 50);
  return Math.min(maxTicks, Math.max(minTicks, defaultizedTickNumber));
}
function scaleTickNumberByRange(tickNumber, range) {
  const rangeGap = range[1] - range[0];
  if (rangeGap === 0) {
    return 1;
  }
  return tickNumber / ((range[1] - range[0]) / 100);
}

// node_modules/@mui/x-charts/esm/internals/getScale.js
function getScale(scaleType, domain, range) {
  switch (scaleType) {
    case "log":
      return log(domain, range);
    case "pow":
      return pow(domain, range);
    case "sqrt":
      return sqrt(domain, range);
    case "time":
      return time(domain, range);
    case "utc":
      return utcTime(domain, range);
    default:
      return linear(domain, range);
  }
}

// node_modules/@mui/x-charts/esm/internals/dateHelpers.js
var isDateData = (data) => (data == null ? void 0 : data[0]) instanceof Date;
function createDateFormatter(axis, range) {
  const timeScale = time(axis.data, range);
  return (v2, {
    location
  }) => location === "tick" ? timeScale.tickFormat(axis.tickNumber)(v2) : `${v2.toLocaleString()}`;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/zoom.js
var zoomScaleRange = (scaleRange, zoomRange) => {
  const rangeGap = scaleRange[1] - scaleRange[0];
  const zoomGap = zoomRange[1] - zoomRange[0];
  const min2 = scaleRange[0] - zoomRange[0] * rangeGap / zoomGap;
  const max2 = scaleRange[1] + (100 - zoomRange[1]) * rangeGap / zoomGap;
  return [min2, max2];
};

// node_modules/@mui/x-charts/esm/internals/configInit.js
var cartesianInstance;
var polarInstance;
var CartesianSeriesTypes = class {
  constructor() {
    this.types = /* @__PURE__ */ new Set();
    if (cartesianInstance) {
      throw new Error("You can only create one instance!");
    }
    cartesianInstance = this.types;
  }
  addType(value) {
    this.types.add(value);
  }
  getTypes() {
    return this.types;
  }
};
var PolarSeriesTypes = class {
  constructor() {
    this.types = /* @__PURE__ */ new Set();
    if (polarInstance) {
      throw new Error("You can only create one instance!");
    }
    polarInstance = this.types;
  }
  addType(value) {
    this.types.add(value);
  }
  getTypes() {
    return this.types;
  }
};
var cartesianSeriesTypes = new CartesianSeriesTypes();
cartesianSeriesTypes.addType("bar");
cartesianSeriesTypes.addType("line");
cartesianSeriesTypes.addType("scatter");
var polarSeriesTypes = new PolarSeriesTypes();
polarSeriesTypes.addType("radar");

// node_modules/@mui/x-charts/esm/internals/isCartesian.js
function isCartesianSeriesType(seriesType) {
  return cartesianSeriesTypes.getTypes().has(seriesType);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisExtremum.js
var axisExtremumCallback = (acc, chartType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters) => {
  var _a;
  const getter = axisDirection === "x" ? seriesConfig5[chartType].xExtremumGetter : seriesConfig5[chartType].yExtremumGetter;
  const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
  const [minChartTypeData, maxChartTypeData] = (getter == null ? void 0 : getter({
    series,
    axis,
    axisIndex,
    isDefaultAxis: axisIndex === 0,
    getFilters
  })) ?? [Infinity, -Infinity];
  const [minData, maxData] = acc;
  return [Math.min(minChartTypeData, minData), Math.max(maxChartTypeData, maxData)];
};
var getAxisExtremum = (axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters) => {
  const charTypes = Object.keys(seriesConfig5).filter(isCartesianSeriesType);
  const extremums = charTypes.reduce((acc, charType) => axisExtremumCallback(acc, charType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries, getFilters), [Infinity, -Infinity]);
  if (Number.isNaN(extremums[0]) || Number.isNaN(extremums[1])) {
    return [Infinity, -Infinity];
  }
  return extremums;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisTriggerTooltip.js
var getAxisTriggerTooltip = (axisDirection, seriesConfig5, formattedSeries, defaultAxisId) => {
  const tooltipAxesIds = /* @__PURE__ */ new Set();
  const chartTypes = Object.keys(seriesConfig5).filter(isCartesianSeriesType);
  chartTypes.forEach((chartType) => {
    var _a, _b, _c;
    const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
    const tooltipAxes = (_c = (_b = seriesConfig5[chartType]).axisTooltipGetter) == null ? void 0 : _c.call(_b, series);
    if (tooltipAxes === void 0) {
      return;
    }
    tooltipAxes.forEach(({
      axisId,
      direction
    }) => {
      if (direction === axisDirection) {
        tooltipAxesIds.add(axisId ?? defaultAxisId);
      }
    });
  });
  return tooltipAxesIds;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/computeAxisValue.js
function getRange(drawingArea, axisDirection, axis) {
  const range = axisDirection === "x" ? [drawingArea.left, drawingArea.left + drawingArea.width] : [drawingArea.top + drawingArea.height, drawingArea.top];
  return axis.reverse ? [range[1], range[0]] : range;
}
var DEFAULT_CATEGORY_GAP_RATIO = 0.2;
var DEFAULT_BAR_GAP_RATIO = 0.1;
function computeAxisValue({
  drawingArea,
  formattedSeries,
  axis: allAxis,
  seriesConfig: seriesConfig5,
  axisDirection,
  zoomMap,
  zoomOptions,
  getFilters
}) {
  if (allAxis === void 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const axisIdsTriggeringTooltip = getAxisTriggerTooltip(axisDirection, seriesConfig5, formattedSeries, allAxis[0].id);
  const completeAxis = {};
  allAxis.forEach((eachAxis, axisIndex) => {
    const axis = eachAxis;
    const zoomOption = zoomOptions == null ? void 0 : zoomOptions[axis.id];
    const zoom = zoomMap == null ? void 0 : zoomMap.get(axis.id);
    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];
    const range = getRange(drawingArea, axisDirection, axis);
    const [minData, maxData] = getAxisExtremum(
      axis,
      axisDirection,
      seriesConfig5,
      axisIndex,
      formattedSeries,
      zoom === void 0 && !zoomOption ? getFilters : void 0
      // Do not apply filtering if zoom is already defined.
    );
    const triggerTooltip = !axis.ignoreTooltip && axisIdsTriggeringTooltip.has(axis.id);
    const data = axis.data ?? [];
    if (isBandScaleConfig(axis)) {
      const categoryGapRatio = axis.categoryGapRatio ?? DEFAULT_CATEGORY_GAP_RATIO;
      const barGapRatio = axis.barGapRatio ?? DEFAULT_BAR_GAP_RATIO;
      const scaleRange = axisDirection === "y" ? [range[1], range[0]] : range;
      const zoomedRange2 = zoomScaleRange(scaleRange, zoomRange);
      completeAxis[axis.id] = _extends({
        offset: 0,
        height: 0,
        categoryGapRatio,
        barGapRatio,
        triggerTooltip
      }, axis, {
        data,
        scale: band(axis.data, zoomedRange2).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, scaleRange);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (isPointScaleConfig(axis)) {
      const scaleRange = axisDirection === "y" ? [...range].reverse() : range;
      const zoomedRange2 = zoomScaleRange(scaleRange, zoomRange);
      completeAxis[axis.id] = _extends({
        offset: 0,
        height: 0,
        triggerTooltip
      }, axis, {
        data,
        scale: point(axis.data, zoomedRange2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, scaleRange);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (axis.scaleType === "band" || axis.scaleType === "point") {
      return;
    }
    const scaleType = axis.scaleType ?? "linear";
    const domainLimit = axis.domainLimit ?? "nice";
    const axisExtremums = [axis.min ?? minData, axis.max ?? maxData];
    if (typeof domainLimit === "function") {
      const {
        min: min2,
        max: max2
      } = domainLimit(minData, maxData);
      axisExtremums[0] = min2;
      axisExtremums[1] = max2;
    }
    const rawTickNumber = getTickNumber(_extends({}, axis, {
      range,
      domain: axisExtremums
    }));
    const tickNumber = scaleTickNumberByRange(rawTickNumber, zoomRange);
    const zoomedRange = zoomScaleRange(range, zoomRange);
    const scale2 = getScale(scaleType, axisExtremums, zoomedRange);
    const finalScale = domainLimit === "nice" ? scale2.nice(rawTickNumber) : scale2;
    const [minDomain, maxDomain] = finalScale.domain();
    const domain = [axis.min ?? minDomain, axis.max ?? maxDomain];
    completeAxis[axis.id] = _extends({
      offset: 0,
      height: 0,
      triggerTooltip
    }, axis, {
      data,
      scaleType,
      scale: finalScale.domain(domain),
      tickNumber,
      colorScale: axis.colorMap && getColorScale(axis.colorMap)
    });
  });
  return {
    axis: completeAxis,
    axisIds: allAxis.map(({
      id
    }) => id)
  };
}

// node_modules/@mui/x-charts/esm/internals/isDefined.js
function isDefined(value) {
  return value !== null && value !== void 0;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/createAxisFilterMapper.js
function createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction
}) {
  return (axis, axisIndex) => {
    var _a;
    const zoomOption = zoomOptions[axis.id];
    if (!zoomOption || zoomOption.filterMode !== "discard") {
      return null;
    }
    const zoom = zoomMap == null ? void 0 : zoomMap.get(axis.id);
    if (zoom === void 0 || zoom.start <= 0 && zoom.end >= 100) {
      return null;
    }
    let extremums = [];
    const scaleType = axis.scaleType;
    if (scaleType === "point" || scaleType === "band") {
      extremums = [0, (((_a = axis.data) == null ? void 0 : _a.length) ?? 1) - 1];
    } else {
      extremums = getAxisExtremum(axis, direction, seriesConfig5, axisIndex, formattedSeries);
    }
    let min2;
    let max2;
    const continuousScaleType = !scaleType || scaleType === "band" || scaleType === "point" ? "linear" : scaleType;
    [min2, max2] = getScale(continuousScaleType, extremums, [0, 100]).nice().domain();
    min2 = min2 instanceof Date ? min2.getTime() : min2;
    max2 = max2 instanceof Date ? max2.getTime() : max2;
    const minVal = min2 + zoom.start * (max2 - min2) / 100;
    const maxVal = min2 + zoom.end * (max2 - min2) / 100;
    return (value, dataIndex) => {
      var _a2;
      const val = value[direction] ?? ((_a2 = axis.data) == null ? void 0 : _a2[dataIndex]);
      if (val == null) {
        return true;
      }
      if (axis.scaleType === "point" || axis.scaleType === "band" || typeof val === "string") {
        return dataIndex >= minVal && dataIndex <= maxVal;
      }
      return val >= minVal && val <= maxVal;
    };
  };
}
var createGetAxisFilters = (filters) => ({
  currentAxisId,
  seriesXAxisId,
  seriesYAxisId,
  isDefaultAxis
}) => {
  return (value, dataIndex) => {
    var _a, _b;
    const axisId = currentAxisId === seriesXAxisId ? seriesYAxisId : seriesXAxisId;
    if (!axisId || isDefaultAxis) {
      return ((_b = (_a = Object.values(filters ?? {}))[0]) == null ? void 0 : _b.call(_a, value, dataIndex)) ?? true;
    }
    const data = [seriesYAxisId, seriesXAxisId].filter((id) => id !== currentAxisId).map((id) => filters[id ?? ""]).filter(isDefined);
    return data.every((f) => f(value, dataIndex));
  };
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/createZoomLookup.js
var createZoomLookup = (axisDirection) => (axes = []) => axes.reduce((acc, v2) => {
  const {
    zoom,
    id: axisId
  } = v2;
  const defaultizedZoom = defaultizeZoom(zoom, axisId, axisDirection);
  if (defaultizedZoom) {
    acc[axisId] = defaultizedZoom;
  }
  return acc;
}, {});

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisRendering.selectors.js
var createZoomMap = (zoom) => {
  const zoomItemMap = /* @__PURE__ */ new Map();
  zoom.forEach((zoomItem) => {
    zoomItemMap.set(zoomItem.axisId, zoomItem);
  });
  return zoomItemMap;
};
var selectorChartZoomState = (state) => state.zoom;
var selectorChartZoomIsInteracting = createSelector2(selectorChartZoomState, (zoom) => zoom == null ? void 0 : zoom.isInteracting);
var selectorChartZoomMap = createSelector2(selectorChartZoomState, (zoom) => (zoom == null ? void 0 : zoom.zoomData) && createZoomMap(zoom == null ? void 0 : zoom.zoomData));
var selectorChartXZoomOptionsLookup = createSelector2(selectorChartRawXAxis, createZoomLookup("x"));
var selectorChartYZoomOptionsLookup = createSelector2(selectorChartRawYAxis, createZoomLookup("y"));
var selectorChartZoomOptionsLookup = createSelector2([selectorChartXZoomOptionsLookup, selectorChartYZoomOptionsLookup], (xLookup, yLookup) => _extends({}, xLookup, yLookup));
var selectorChartAxisZoomOptionsLookup = createSelector2([selectorChartXZoomOptionsLookup, selectorChartYZoomOptionsLookup, (state, axisId) => axisId], (xLookup, yLookup, axisId) => xLookup[axisId] ?? yLookup[axisId]);
var selectorChartXFilter = createSelector2([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartSeriesConfig, selectorChartSeriesProcessed], (zoomMap, zoomOptions, seriesConfig5, formattedSeries) => zoomMap && zoomOptions && createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction: "x"
}));
var selectorChartYFilter = createSelector2([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartSeriesConfig, selectorChartSeriesProcessed], (zoomMap, zoomOptions, seriesConfig5, formattedSeries) => zoomMap && zoomOptions && createAxisFilterMapper({
  zoomMap,
  zoomOptions,
  seriesConfig: seriesConfig5,
  formattedSeries,
  direction: "y"
}));
var selectorChartZoomAxisFilters = createSelector2([selectorChartXFilter, selectorChartYFilter, selectorChartRawXAxis, selectorChartRawYAxis], (xMapper, yMapper, xAxis, yAxis) => {
  if (xMapper === void 0 || yMapper === void 0) {
    return void 0;
  }
  const xFilters = xAxis == null ? void 0 : xAxis.reduce((acc, axis, index) => {
    const filter = xMapper(axis, index);
    if (filter !== null) {
      acc[axis.id] = filter;
    }
    return acc;
  }, {});
  const yFilters = yAxis == null ? void 0 : yAxis.reduce((acc, axis, index) => {
    const filter = yMapper(axis, index);
    if (filter !== null) {
      acc[axis.id] = filter;
    }
    return acc;
  }, {});
  if (Object.keys(xFilters ?? {}).length === 0 && Object.keys(yFilters ?? {}).length === 0) {
    return void 0;
  }
  return createGetAxisFilters(_extends({}, xFilters, yFilters));
});
var selectorChartXAxis = createSelector2([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters], (axis, drawingArea, formattedSeries, seriesConfig5, zoomMap, zoomOptions, getFilters) => computeAxisValue({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "x",
  zoomMap,
  zoomOptions,
  getFilters
}));
var selectorChartYAxis = createSelector2([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters], (axis, drawingArea, formattedSeries, seriesConfig5, zoomMap, zoomOptions, getFilters) => computeAxisValue({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "y",
  zoomMap,
  zoomOptions,
  getFilters
}));
var selectorChartRawAxis = createSelector2([selectorChartRawXAxis, selectorChartRawYAxis, (state, axisId) => axisId], (xAxes, yAxes, axisId) => {
  const axis = (xAxes == null ? void 0 : xAxes.find((a) => a.id === axisId)) ?? (yAxes == null ? void 0 : yAxes.find((a) => a.id === axisId)) ?? null;
  if (!axis) {
    return void 0;
  }
  return axis;
});

// node_modules/@mui/x-charts/esm/internals/isBandScale.js
function isBandScale(scale2) {
  return scale2.bandwidth !== void 0;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/getAxisValue.js
function getAsANumber(value) {
  return value instanceof Date ? value.getTime() : value;
}
function getAxisIndex(axisConfig, pointerValue) {
  const {
    scale: scale2,
    data: axisData,
    reverse
  } = axisConfig;
  if (!isBandScale(scale2)) {
    const value = scale2.invert(pointerValue);
    if (axisData === void 0) {
      return -1;
    }
    const valueAsNumber = getAsANumber(value);
    const closestIndex = axisData == null ? void 0 : axisData.findIndex((pointValue, index) => {
      const v2 = getAsANumber(pointValue);
      if (v2 > valueAsNumber) {
        if (index === 0 || Math.abs(valueAsNumber - v2) <= Math.abs(valueAsNumber - getAsANumber(axisData[index - 1]))) {
          return true;
        }
      }
      if (v2 <= valueAsNumber) {
        if (index === axisData.length - 1 || Math.abs(getAsANumber(value) - v2) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index + 1]))) {
          return true;
        }
      }
      return false;
    });
    return closestIndex;
  }
  const dataIndex = scale2.bandwidth() === 0 ? Math.floor((pointerValue - Math.min(...scale2.range()) + scale2.step() / 2) / scale2.step()) : Math.floor((pointerValue - Math.min(...scale2.range())) / scale2.step());
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return -1;
  }
  return reverse ? axisData.length - 1 - dataIndex : dataIndex;
}
function getAxisValue(axisConfig, pointerValue, dataIndex) {
  const {
    scale: scale2,
    data: axisData
  } = axisConfig;
  if (!isBandScale(scale2)) {
    const value = scale2.invert(pointerValue);
    if (dataIndex < 0) {
      return value;
    }
    return axisData[dataIndex];
  }
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return null;
  }
  return axisData[dataIndex];
}

// node_modules/@mui/x-charts/esm/internals/getSVGPoint.js
function getSVGPoint(svg, event) {
  const pt = svg.createSVGPoint();
  pt.x = event.clientX;
  pt.y = event.clientY;
  return pt.matrixTransform(svg.getScreenCTM().inverse());
}

// node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
var React8 = __toESM(require_react(), 1);
function useEventCallback(fn2) {
  const ref = React8.useRef(fn2);
  useEnhancedEffect_default(() => {
    ref.current = fn2;
  });
  return React8.useRef((...args) => (
    // @ts-expect-error hide `this`
    (0, ref.current)(...args)
  )).current;
}
var useEventCallback_default = useEventCallback;

// node_modules/@mui/x-internals/esm/fastObjectShallowCompare/fastObjectShallowCompare.js
var is = Object.is;
function fastObjectShallowCompare(a, b) {
  if (a === b) {
    return true;
  }
  if (!(a instanceof Object) || !(b instanceof Object)) {
    return false;
  }
  let aLength = 0;
  let bLength = 0;
  for (const key in a) {
    aLength += 1;
    if (!is(a[key], b[key])) {
      return false;
    }
    if (!(key in b)) {
      return false;
    }
  }
  for (const _ in b) {
    bLength += 1;
  }
  return aLength === bLength;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartInteraction/useChartInteraction.js
var useChartInteraction = ({
  store
}) => {
  const cleanInteraction = useEventCallback_default(() => {
    store.update((prev) => {
      return _extends({}, prev, {
        interaction: {
          pointer: null,
          item: null
        }
      });
    });
  });
  const removeItemInteraction = useEventCallback_default((itemToRemove) => {
    store.update((prev) => {
      const prevItem = prev.interaction.item;
      if (!itemToRemove) {
        return prevItem === null ? prev : _extends({}, prev, {
          interaction: _extends({}, prev.interaction, {
            item: null
          })
        });
      }
      if (prevItem === null || Object.keys(itemToRemove).some((key) => itemToRemove[key] !== prevItem[key])) {
        return prev;
      }
      return _extends({}, prev, {
        interaction: _extends({}, prev.interaction, {
          item: null
        })
      });
    });
  });
  const setItemInteraction = useEventCallback_default((newItem) => {
    store.update((prev) => {
      if (fastObjectShallowCompare(prev.interaction.item, newItem)) {
        return prev;
      }
      return _extends({}, prev, {
        interaction: _extends({}, prev.interaction, {
          item: newItem
        })
      });
    });
  });
  const setPointerCoordinate = useEventCallback_default((coordinate) => {
    store.update((prev) => _extends({}, prev, {
      interaction: _extends({}, prev.interaction, {
        pointer: coordinate
      })
    }));
  });
  return {
    instance: {
      cleanInteraction,
      setItemInteraction,
      removeItemInteraction,
      setPointerCoordinate
    }
  };
};
useChartInteraction.getInitialState = () => ({
  interaction: {
    item: null,
    pointer: null
  }
});
useChartInteraction.params = {};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartInteraction/useChartInteraction.selectors.js
var selectInteraction = (state) => state.interaction;
var selectorChartsInteractionIsInitialized = createSelector2(selectInteraction, (interaction) => interaction !== void 0);
var selectorChartsInteractionItem = createSelector2(selectInteraction, (interaction) => (interaction == null ? void 0 : interaction.item) ?? null);
var selectorChartsInteractionPointer = createSelector2(selectInteraction, (interaction) => (interaction == null ? void 0 : interaction.pointer) ?? null);
var selectorChartsInteractionPointerX = createSelector2(selectorChartsInteractionPointer, (pointer) => pointer && pointer.x);
var selectorChartsInteractionPointerY = createSelector2(selectorChartsInteractionPointer, (pointer) => pointer && pointer.y);
var selectorChartsInteractionItemIsDefined = createSelector2(selectorChartsInteractionItem, (item) => item !== null);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.js
var useChartCartesianAxis = ({
  params,
  store,
  seriesConfig: seriesConfig5,
  svgRef,
  instance
}) => {
  const {
    xAxis,
    yAxis,
    dataset
  } = params;
  if (true) {
    const ids = [...xAxis ?? [], ...yAxis ?? []].filter((axis) => axis.id).map((axis) => axis.id);
    const duplicates = new Set(ids.filter((id, index) => ids.indexOf(id) !== index));
    if (duplicates.size > 0) {
      warnOnce([`MUI X Charts: The following axis ids are duplicated: ${Array.from(duplicates).join(", ")}.`, `Please make sure that each axis has a unique id.`].join("\n"), "error");
    }
  }
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const processedSeries = useSelector(store, selectorChartSeriesProcessed);
  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);
  const {
    axis: xAxisWithScale,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const {
    axis: yAxisWithScale,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const isFirstRender = React9.useRef(true);
  React9.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      cartesianAxis: _extends({}, prev.cartesianAxis, {
        x: defaultizeXAxis(xAxis, dataset),
        y: defaultizeYAxis(yAxis, dataset)
      })
    }));
  }, [seriesConfig5, drawingArea, xAxis, yAxis, dataset, store]);
  const usedXAxis = xAxisIds[0];
  const usedYAxis = yAxisIds[0];
  React9.useEffect(() => {
    const element = svgRef.current;
    if (!isInteractionEnabled || element === null || params.disableAxisListener) {
      return () => {
      };
    }
    const handleOut = () => {
      var _a;
      (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
    };
    const handleMove = (event) => {
      var _a, _b;
      const target = "targetTouches" in event ? event.targetTouches[0] : event;
      const svgPoint = getSVGPoint(element, target);
      if (!instance.isPointInside(svgPoint.x, svgPoint.y, event.target)) {
        (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
        return;
      }
      (_b = instance.setPointerCoordinate) == null ? void 0 : _b.call(instance, svgPoint);
    };
    const handleDown = (event) => {
      const target = event.currentTarget;
      if (!target) {
        return;
      }
      if ("hasPointerCapture" in target && target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
      }
    };
    element.addEventListener("pointerdown", handleDown);
    element.addEventListener("pointermove", handleMove);
    element.addEventListener("pointercancel", handleOut);
    element.addEventListener("pointerleave", handleOut);
    return () => {
      element.removeEventListener("pointerdown", handleDown);
      element.removeEventListener("pointermove", handleMove);
      element.removeEventListener("pointercancel", handleOut);
      element.removeEventListener("pointerleave", handleOut);
    };
  }, [svgRef, store, xAxisWithScale, usedXAxis, yAxisWithScale, usedYAxis, instance, params.disableAxisListener, isInteractionEnabled]);
  React9.useEffect(() => {
    const element = svgRef.current;
    const onAxisClick = params.onAxisClick;
    if (element === null || !onAxisClick) {
      return () => {
      };
    }
    const handleMouseClick = (event) => {
      event.preventDefault();
      let dataIndex = null;
      let isXAxis = false;
      const svgPoint = getSVGPoint(element, event);
      const xIndex = getAxisIndex(xAxisWithScale[usedXAxis], svgPoint.x);
      isXAxis = xIndex !== -1;
      dataIndex = isXAxis ? xIndex : getAxisIndex(yAxisWithScale[usedYAxis], svgPoint.y);
      const USED_AXIS_ID = isXAxis ? xAxisIds[0] : yAxisIds[0];
      if (dataIndex == null || dataIndex === -1) {
        return;
      }
      const axisValue = (isXAxis ? xAxisWithScale : yAxisWithScale)[USED_AXIS_ID].data[dataIndex];
      const seriesValues = {};
      Object.keys(processedSeries).filter((seriesType) => ["bar", "line"].includes(seriesType)).forEach((seriesType) => {
        var _a;
        (_a = processedSeries[seriesType]) == null ? void 0 : _a.seriesOrder.forEach((seriesId) => {
          const seriesItem = processedSeries[seriesType].series[seriesId];
          const providedXAxisId = seriesItem.xAxisId;
          const providedYAxisId = seriesItem.yAxisId;
          const axisKey = isXAxis ? providedXAxisId : providedYAxisId;
          if (axisKey === void 0 || axisKey === USED_AXIS_ID) {
            seriesValues[seriesId] = seriesItem.data[dataIndex];
          }
        });
      });
      onAxisClick(event, {
        dataIndex,
        axisValue,
        seriesValues
      });
    };
    element.addEventListener("click", handleMouseClick);
    return () => {
      element.removeEventListener("click", handleMouseClick);
    };
  }, [params.onAxisClick, processedSeries, svgRef, xAxisWithScale, xAxisIds, yAxisWithScale, yAxisIds, usedXAxis, usedYAxis]);
  return {};
};
useChartCartesianAxis.params = {
  xAxis: true,
  yAxis: true,
  dataset: true,
  onAxisClick: true,
  disableAxisListener: true
};
useChartCartesianAxis.getDefaultizedParams = ({
  params
}) => {
  return _extends({}, params, {
    colors: params.colors ?? rainbowSurgePalette,
    theme: params.theme ?? "light",
    defaultizedXAxis: defaultizeXAxis(params.xAxis, params.dataset),
    defaultizedYAxis: defaultizeYAxis(params.yAxis, params.dataset)
  });
};
useChartCartesianAxis.getInitialState = (params) => ({
  cartesianAxis: {
    x: params.defaultizedXAxis,
    y: params.defaultizedYAxis
  }
});

// node_modules/@mui/x-internals/esm/isDeepEqual/isDeepEqual.js
function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor) {
      return false;
    }
    if (Array.isArray(a)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (!isDeepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Map && b instanceof Map) {
      if (a.size !== b.size) {
        return false;
      }
      const entriesA = Array.from(a.entries());
      for (let i = 0; i < entriesA.length; i += 1) {
        if (!b.has(entriesA[i][0])) {
          return false;
        }
      }
      for (let i = 0; i < entriesA.length; i += 1) {
        const entryA = entriesA[i];
        if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Set && b instanceof Set) {
      if (a.size !== b.size) {
        return false;
      }
      const entries = Array.from(a.entries());
      for (let i = 0; i < entries.length; i += 1) {
        if (!b.has(entries[i][0])) {
          return false;
        }
      }
      return true;
    }
    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys = Object.keys(a);
    const length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (let i = 0; i < length; i += 1) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (let i = 0; i < length; i += 1) {
      const key = keys[i];
      if (!isDeepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianInteraction.selectors.js
var optionalGetAxisId = (_, id) => id;
function indexGetter(value, axes, ids = axes.axisIds[0]) {
  return Array.isArray(ids) ? ids.map((id) => getAxisIndex(axes.axis[id], value)) : getAxisIndex(axes.axis[ids], value);
}
var selectorChartsInteractionXAxisIndex = createSelector2([selectorChartsInteractionPointerX, selectorChartXAxis, optionalGetAxisId], (value, axes, id) => value === null ? null : indexGetter(value, axes, id));
var selectorChartsInteractionYAxisIndex = createSelector2([selectorChartsInteractionPointerY, selectorChartYAxis, optionalGetAxisId], (value, axes, id) => value === null ? null : indexGetter(value, axes, id));
function valueGetter(value, axes, indexes, ids = axes.axisIds[0]) {
  return Array.isArray(ids) ? ids.map((id, axisIndex) => getAxisValue(axes.axis[id], value, indexes[axisIndex])) : getAxisValue(axes.axis[ids], value, indexes);
}
var selectorChartsInteractionXAxisValue = createSelector2([selectorChartsInteractionPointerX, selectorChartXAxis, selectorChartsInteractionXAxisIndex, optionalGetAxisId], (x, xAxes, xIndex, id) => {
  if (x === null || xIndex === null || xAxes.axisIds.length === 0) {
    return null;
  }
  return valueGetter(x, xAxes, xIndex, id);
});
var selectorChartsInteractionYAxisValue = createSelector2([selectorChartsInteractionPointerY, selectorChartYAxis, selectorChartsInteractionYAxisIndex, optionalGetAxisId], (y, yAxes, yIndex, id) => {
  if (y === null || yIndex === null || yAxes.axisIds.length === 0) {
    return null;
  }
  return valueGetter(y, yAxes, yIndex, id);
});
var selectorChartsInteractionTooltipXAxes = createSelector2([selectorChartsInteractionPointerX, selectorChartXAxis], (value, axes) => {
  if (value === null) {
    return [];
  }
  return axes.axisIds.filter((id) => axes.axis[id].triggerTooltip).map((axisId) => ({
    axisId,
    dataIndex: getAxisIndex(axes.axis[axisId], value)
  })).filter(({
    dataIndex
  }) => dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionTooltipYAxes = createSelector2([selectorChartsInteractionPointerY, selectorChartYAxis], (value, axes) => {
  if (value === null) {
    return [];
  }
  return axes.axisIds.filter((id) => axes.axis[id].triggerTooltip).map((axisId) => ({
    axisId,
    dataIndex: getAxisIndex(axes.axis[axisId], value)
  })).filter(({
    dataIndex
  }) => dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionAxisTooltip = createSelector2([selectorChartsInteractionTooltipXAxes, selectorChartsInteractionTooltipYAxes], (xTooltip, yTooltip) => xTooltip.length > 0 || yTooltip.length > 0);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartZAxis/useChartZAxis.js
var React10 = __toESM(require_react(), 1);
function addDefaultId(axisConfig, defaultId) {
  if (axisConfig.id !== void 0) {
    return axisConfig;
  }
  return _extends({
    id: defaultId
  }, axisConfig);
}
function processColorMap(axisConfig) {
  if (!axisConfig.colorMap) {
    return axisConfig;
  }
  return _extends({}, axisConfig, {
    colorScale: axisConfig.colorMap.type === "ordinal" && axisConfig.data ? getOrdinalColorScale(_extends({
      values: axisConfig.data
    }, axisConfig.colorMap)) : getColorScale(axisConfig.colorMap.type === "continuous" ? _extends({
      min: axisConfig.min,
      max: axisConfig.max
    }, axisConfig.colorMap) : axisConfig.colorMap)
  });
}
function getZAxisState(zAxis, dataset) {
  if (!zAxis || zAxis.length === 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const zAxisLookup = {};
  const axisIds = [];
  zAxis.forEach((axisConfig, index) => {
    const dataKey = axisConfig.dataKey;
    const defaultizedId = axisConfig.id ?? `defaultized-z-axis-${index}`;
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      zAxisLookup[defaultizedId] = processColorMap(addDefaultId(axisConfig, defaultizedId));
      axisIds.push(defaultizedId);
      return;
    }
    if (dataset === void 0) {
      throw new Error("MUI X Charts: z-axis uses `dataKey` but no `dataset` is provided.");
    }
    zAxisLookup[defaultizedId] = processColorMap(addDefaultId(_extends({}, axisConfig, {
      data: dataset.map((d) => d[dataKey])
    }), defaultizedId));
    axisIds.push(defaultizedId);
  });
  return {
    axis: zAxisLookup,
    axisIds
  };
}
var useChartZAxis = ({
  params,
  store
}) => {
  const {
    zAxis,
    dataset
  } = params;
  const isFirstRender = React10.useRef(true);
  React10.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      zAxis: getZAxisState(zAxis, dataset)
    }));
  }, [zAxis, dataset, store]);
  return {};
};
useChartZAxis.params = {
  zAxis: true,
  dataset: true
};
useChartZAxis.getInitialState = (params) => ({
  zAxis: getZAxisState(params.zAxis, params.dataset)
});

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartZAxis/useChartZAxis.selectors.js
var selectRootState = (state) => state;
var selectorChartZAxis = createSelector2([selectRootState], (state) => state.zAxis);

// node_modules/@mui/x-internals/esm/useAssertModelConsistency/useAssertModelConsistency.js
var React11 = __toESM(require_react(), 1);
function useAssertModelConsistencyOutsideOfProduction(parameters) {
  const {
    componentName,
    propName,
    controlled,
    defaultValue,
    warningPrefix = "MUI X"
  } = parameters;
  const [{
    initialDefaultValue,
    isControlled
  }] = React11.useState({
    initialDefaultValue: defaultValue,
    isControlled: controlled !== void 0
  });
  if (isControlled !== (controlled !== void 0)) {
    warnOnce([`${warningPrefix}: A component is changing the ${isControlled ? "" : "un"}controlled ${propName} state of ${componentName} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${propName} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"], "error");
  }
  if (JSON.stringify(initialDefaultValue) !== JSON.stringify(defaultValue)) {
    warnOnce([`${warningPrefix}: A component is changing the default ${propName} state of an uncontrolled ${componentName} after being initialized. To suppress this warning opt to use a controlled ${componentName}.`], "error");
  }
}
var useAssertModelConsistency = false ? () => {
} : useAssertModelConsistencyOutsideOfProduction;

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/useChartHighlight.js
var useChartHighlight = ({
  store,
  params
}) => {
  useAssertModelConsistency({
    warningPrefix: "MUI X Charts",
    componentName: "Chart",
    propName: "highlightedItem",
    controlled: params.highlightedItem,
    defaultValue: null
  });
  useEnhancedEffect_default(() => {
    store.update((prevState) => prevState.highlight.item === params.highlightedItem ? prevState : _extends({}, prevState, {
      highlight: _extends({}, prevState.highlight, {
        item: params.highlightedItem
      })
    }));
  }, [store, params.highlightedItem]);
  const clearHighlight = useEventCallback_default(() => {
    var _a;
    (_a = params.onHighlightChange) == null ? void 0 : _a.call(params, null);
    store.update((prev) => _extends({}, prev, {
      highlight: {
        item: null
      }
    }));
  });
  const setHighlight = useEventCallback_default((newItem) => {
    var _a;
    const prevItem = store.getSnapshot().highlight.item;
    if (fastObjectShallowCompare(prevItem, newItem)) {
      return;
    }
    (_a = params.onHighlightChange) == null ? void 0 : _a.call(params, newItem);
    store.update((prev) => _extends({}, prev, {
      highlight: {
        item: newItem
      }
    }));
  });
  return {
    instance: {
      clearHighlight,
      setHighlight
    }
  };
};
useChartHighlight.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  highlightedItem: params.highlightedItem ?? null
});
useChartHighlight.getInitialState = (params) => ({
  highlight: {
    item: params.highlightedItem
  }
});
useChartHighlight.params = {
  highlightedItem: true,
  onHighlightChange: true
};

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/extremums.js
var createResult = (data, direction) => {
  if (direction === "x") {
    return {
      x: data,
      y: null
    };
  }
  return {
    x: null,
    y: data
  };
};
var getBaseExtremum = (params) => {
  var _a;
  const {
    axis,
    getFilters,
    isDefaultAxis
  } = params;
  const filter = getFilters == null ? void 0 : getFilters({
    currentAxisId: axis.id,
    isDefaultAxis
  });
  const data = filter ? (_a = axis.data) == null ? void 0 : _a.filter((_, i) => filter({
    x: null,
    y: null
  }, i)) : axis.data;
  const minX = Math.min(...data ?? []);
  const maxX = Math.max(...data ?? []);
  return [minX, maxX];
};
var getValueExtremum = (direction) => (params) => {
  const {
    series,
    axis,
    getFilters,
    isDefaultAxis
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = direction === "x" ? series[seriesId].xAxisId : series[seriesId].yAxisId;
    return axisId === axis.id || isDefaultAxis && axisId === void 0;
  }).reduce((acc, seriesId) => {
    const {
      stackedData
    } = series[seriesId];
    const filter = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const [seriesMin, seriesMax] = (stackedData == null ? void 0 : stackedData.reduce((seriesAcc, values, index) => {
      if (filter && (!filter(createResult(values[0], direction), index) || !filter(createResult(values[1], direction), index))) {
        return seriesAcc;
      }
      return [Math.min(...values, seriesAcc[0]), Math.max(...values, seriesAcc[1])];
    }, [Infinity, -Infinity])) ?? [Infinity, -Infinity];
    return [Math.min(seriesMin, acc[0]), Math.max(seriesMax, acc[1])];
  }, [Infinity, -Infinity]);
};
var getExtremumX = (params) => {
  const isHorizontal = Object.keys(params.series).some((seriesId) => params.series[seriesId].layout === "horizontal");
  if (isHorizontal) {
    return getValueExtremum("x")(params);
  }
  return getBaseExtremum(params);
};
var getExtremumY = (params) => {
  const isHorizontal = Object.keys(params.series).some((seriesId) => params.series[seriesId].layout === "horizontal");
  if (isHorizontal) {
    return getBaseExtremum(params);
  }
  return getValueExtremum("y")(params);
};

// node_modules/@mui/x-charts/esm/internals/stackSeries.js
var StackOrder = {
  /**
   * Series order such that the earliest series (according to the maximum value) is at the bottom.
   * */
  appearance: appearance_default,
  /**
   *  Series order such that the smallest series (according to the sum of values) is at the bottom.
   * */
  ascending: ascending_default,
  /**
   * Series order such that the largest series (according to the sum of values) is at the bottom.
   */
  descending: descending_default,
  /**
   * Series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs—Geometry & Aesthetics by Byron & Wattenberg for more information.
   */
  insideOut: insideOut_default,
  /**
   * Given series order [0, 1, … n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.
   */
  none: none_default2,
  /**
   * Reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.
   */
  reverse: reverse_default
};
var StackOffset = {
  /**
   * Applies a zero baseline and normalizes the values for each point such that the topline is always one.
   * */
  expand: expand_default,
  /**
   * Positive values are stacked above zero, negative values are stacked below zero, and zero values are stacked at zero.
   * */
  diverging: diverging_default,
  /**
   * Applies a zero baseline.
   * */
  none: none_default,
  /**
   * Shifts the baseline down such that the center of the streamgraph is always at zero.
   * */
  silhouette: silhouette_default,
  /**
   * Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the inside-out order. See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.
   * */
  wiggle: wiggle_default
};
var getStackingGroups = (params) => {
  const {
    series,
    seriesOrder,
    defaultStrategy
  } = params;
  const stackingGroups = [];
  const stackIndex = {};
  seriesOrder.forEach((id) => {
    const {
      stack,
      stackOrder,
      stackOffset
    } = series[id];
    if (stack === void 0) {
      stackingGroups.push({
        ids: [id],
        stackingOrder: StackOrder.none,
        stackingOffset: StackOffset.none
      });
    } else if (stackIndex[stack] === void 0) {
      stackIndex[stack] = stackingGroups.length;
      stackingGroups.push({
        ids: [id],
        stackingOrder: StackOrder[stackOrder ?? (defaultStrategy == null ? void 0 : defaultStrategy.stackOrder) ?? "none"],
        stackingOffset: StackOffset[stackOffset ?? (defaultStrategy == null ? void 0 : defaultStrategy.stackOffset) ?? "diverging"]
      });
    } else {
      stackingGroups[stackIndex[stack]].ids.push(id);
      if (stackOrder !== void 0) {
        stackingGroups[stackIndex[stack]].stackingOrder = StackOrder[stackOrder];
      }
      if (stackOffset !== void 0) {
        stackingGroups[stackIndex[stack]].stackingOffset = StackOffset[stackOffset];
      }
    }
  });
  return stackingGroups;
};

// node_modules/@mui/x-charts/esm/internals/defaultizeValueFormatter.js
function defaultizeValueFormatter(series, defaultValueFormatter) {
  const defaultizedSeries = {};
  Object.keys(series).forEach((seriesId) => {
    defaultizedSeries[seriesId] = _extends({}, series[seriesId], {
      valueFormatter: series[seriesId].valueFormatter ?? defaultValueFormatter
    });
  });
  return defaultizedSeries;
}

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/seriesProcessor.js
var seriesProcessor = (params, dataset) => {
  const {
    seriesOrder,
    series
  } = params;
  const stackingGroups = getStackingGroups(params);
  const d3Dataset = dataset ?? [];
  seriesOrder.forEach((id) => {
    const data = series[id].data;
    if (data !== void 0) {
      data.forEach((value, index) => {
        if (d3Dataset.length <= index) {
          d3Dataset.push({
            [id]: value
          });
        } else {
          d3Dataset[index][id] = value;
        }
      });
    } else if (dataset === void 0) {
      throw new Error([`MUI X Charts: bar series with id='${id}' has no data.`, "Either provide a data property to the series or use the dataset prop."].join("\n"));
    }
  });
  const completedSeries = {};
  stackingGroups.forEach((stackingGroup) => {
    const {
      ids,
      stackingOffset,
      stackingOrder
    } = stackingGroup;
    const stackedSeries = stack_default().keys(ids.map((id) => {
      const dataKey = series[id].dataKey;
      return series[id].data === void 0 && dataKey !== void 0 ? dataKey : id;
    })).value((d, key) => d[key] ?? 0).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach((id, index) => {
      const dataKey = series[id].dataKey;
      completedSeries[id] = _extends({
        layout: "vertical",
        labelMarkType: "square"
      }, series[id], {
        data: dataKey ? dataset.map((data) => {
          const value = data[dataKey];
          if (typeof value !== "number") {
            if (true) {
              if (value !== null) {
                warnOnce([`MUI X Charts: your dataset key "${dataKey}" is used for plotting bars, but contains nonnumerical elements.`, "Bar plots only support numbers and null values."]);
              }
            }
            return 0;
          }
          return value;
        }) : series[id].data,
        stackedData: stackedSeries[index].map(([a, b]) => [a, b])
      });
    });
  });
  return {
    seriesOrder,
    stackingGroups,
    series: defaultizeValueFormatter(completedSeries, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var seriesProcessor_default = seriesProcessor;

// node_modules/@mui/x-charts/esm/internals/getLabel.js
function getLabel(value, location) {
  return typeof value === "function" ? value(location) : value;
}

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/legend.js
var legendGetter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default = legendGetter;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/getColor.js
var getColor = (series, xAxis, yAxis) => {
  const verticalLayout = series.layout === "vertical";
  const bandColorScale = verticalLayout ? xAxis == null ? void 0 : xAxis.colorScale : yAxis == null ? void 0 : yAxis.colorScale;
  const valueColorScale = verticalLayout ? yAxis == null ? void 0 : yAxis.colorScale : xAxis == null ? void 0 : xAxis.colorScale;
  const bandValues = verticalLayout ? xAxis == null ? void 0 : xAxis.data : yAxis == null ? void 0 : yAxis.data;
  if (valueColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color = value === null ? series.color : valueColorScale(value);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  if (bandColorScale && bandValues) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = bandValues[dataIndex];
      const color = value === null ? series.color : bandColorScale(value);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  return () => series.color;
};
var getColor_default = getColor;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/tooltip.js
var tooltipGetter = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  if (value == null) {
    return null;
  }
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var axisTooltipGetter = (series) => {
  return Object.values(series).map((s) => s.layout === "horizontal" ? {
    direction: "y",
    axisId: s.yAxisId
  } : {
    direction: "x",
    axisId: s.xAxisId
  });
};
var tooltip_default = tooltipGetter;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default = getSeriesWithDefaultValues;

// node_modules/@mui/x-charts/esm/BarChart/seriesConfig/index.js
var seriesConfig = {
  seriesProcessor: seriesProcessor_default,
  colorProcessor: getColor_default,
  legendGetter: legend_default,
  tooltipGetter: tooltip_default,
  axisTooltipGetter,
  xExtremumGetter: getExtremumX,
  yExtremumGetter: getExtremumY,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default
};

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/extremums.js
var mergeMinMax = (acc, val) => {
  return [val[0] === null ? acc[0] : Math.min(acc[0], val[0]), val[1] === null ? acc[1] : Math.max(acc[1], val[1])];
};
var getExtremumX2 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = series[seriesId].xAxisId;
    return axisId === axis.id || axisId === void 0 && isDefaultAxis;
  }).reduce((acc, seriesId) => {
    var _a;
    const filter = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const seriesMinMax = (_a = series[seriesId].data) == null ? void 0 : _a.reduce((accSeries, d, dataIndex) => {
      if (filter && !filter(d, dataIndex)) {
        return accSeries;
      }
      return mergeMinMax(accSeries, [d.x, d.x]);
    }, [Infinity, -Infinity]);
    return mergeMinMax(acc, seriesMinMax ?? [Infinity, -Infinity]);
  }, [Infinity, -Infinity]);
};
var getExtremumY2 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const axisId = series[seriesId].yAxisId;
    return axisId === axis.id || axisId === void 0 && isDefaultAxis;
  }).reduce((acc, seriesId) => {
    var _a;
    const filter = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const seriesMinMax = (_a = series[seriesId].data) == null ? void 0 : _a.reduce((accSeries, d, dataIndex) => {
      if (filter && !filter(d, dataIndex)) {
        return accSeries;
      }
      return mergeMinMax(accSeries, [d.y, d.y]);
    }, [Infinity, -Infinity]);
    return mergeMinMax(acc, seriesMinMax ?? [Infinity, -Infinity]);
  }, [Infinity, -Infinity]);
};

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/seriesProcessor.js
var seriesProcessor2 = ({
  series,
  seriesOrder
}, dataset) => {
  const completeSeries = Object.fromEntries(Object.entries(series).map(([seriesId, seriesData]) => {
    const datasetKeys = seriesData == null ? void 0 : seriesData.datasetKeys;
    const missingKeys = ["x", "y", "id"].filter((key) => typeof (datasetKeys == null ? void 0 : datasetKeys[key]) !== "string");
    if ((seriesData == null ? void 0 : seriesData.datasetKeys) && missingKeys.length > 0) {
      throw new Error([`MUI X Charts: scatter series with id='${seriesId}' has incomplete datasetKeys.`, `Properties ${missingKeys.map((key) => `"${key}"`).join(", ")} are missing.`].join("\n"));
    }
    const data = !datasetKeys ? seriesData.data ?? [] : (dataset == null ? void 0 : dataset.map((d) => {
      return {
        x: d[datasetKeys.x] ?? null,
        y: d[datasetKeys.y] ?? null,
        z: datasetKeys.z && d[datasetKeys.z],
        id: datasetKeys.id && d[datasetKeys.id]
      };
    })) ?? [];
    return [seriesId, _extends({
      labelMarkType: "circle",
      markerSize: 4
    }, seriesData, {
      data,
      valueFormatter: seriesData.valueFormatter ?? ((v2) => v2 && `(${v2.x}, ${v2.y})`)
    })];
  }));
  return {
    series: completeSeries,
    seriesOrder
  };
};
var seriesProcessor_default2 = seriesProcessor2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/getColor.js
var getColor2 = (series, xAxis, yAxis, zAxis) => {
  const zColorScale = zAxis == null ? void 0 : zAxis.colorScale;
  const yColorScale = yAxis == null ? void 0 : yAxis.colorScale;
  const xColorScale = xAxis == null ? void 0 : xAxis.colorScale;
  if (zColorScale) {
    return (dataIndex) => {
      var _a, _b;
      if (dataIndex === void 0) {
        return series.color;
      }
      if (((_a = zAxis == null ? void 0 : zAxis.data) == null ? void 0 : _a[dataIndex]) !== void 0) {
        const color2 = zColorScale((_b = zAxis == null ? void 0 : zAxis.data) == null ? void 0 : _b[dataIndex]);
        if (color2 !== null) {
          return color2;
        }
      }
      const value = series.data[dataIndex];
      const color = value === null ? series.color : zColorScale(value.z);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  if (yColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color = value === null ? series.color : yColorScale(value.y);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  if (xColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color = value === null ? series.color : xColorScale(value.x);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  return () => series.color;
};
var getColor_default2 = getColor2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/legend.js
var legendGetter2 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default2 = legendGetter2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/tooltip.js
var tooltipGetter2 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var tooltip_default2 = tooltipGetter2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues2 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default2 = getSeriesWithDefaultValues2;

// node_modules/@mui/x-charts/esm/ScatterChart/seriesConfig/index.js
var seriesConfig2 = {
  seriesProcessor: seriesProcessor_default2,
  colorProcessor: getColor_default2,
  legendGetter: legend_default2,
  tooltipGetter: tooltip_default2,
  xExtremumGetter: getExtremumX2,
  yExtremumGetter: getExtremumY2,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default2
};

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/extremums.js
var getExtremumX3 = (params) => {
  const {
    axis
  } = params;
  const minX = Math.min(...axis.data ?? []);
  const maxX = Math.max(...axis.data ?? []);
  return [minX, maxX];
};
function getSeriesExtremums(getValues, data, stackedData, filter) {
  return stackedData.reduce((seriesAcc, stackedValue, index) => {
    if (data[index] === null) {
      return seriesAcc;
    }
    const [base, value] = getValues(stackedValue);
    if (filter && (!filter({
      y: base,
      x: null
    }, index) || !filter({
      y: value,
      x: null
    }, index))) {
      return seriesAcc;
    }
    return [Math.min(base, value, seriesAcc[0]), Math.max(base, value, seriesAcc[1])];
  }, [Infinity, -Infinity]);
}
var getExtremumY3 = (params) => {
  const {
    series,
    axis,
    isDefaultAxis,
    getFilters
  } = params;
  return Object.keys(series).filter((seriesId) => {
    const yAxisId = series[seriesId].yAxisId;
    return yAxisId === axis.id || isDefaultAxis && yAxisId === void 0;
  }).reduce((acc, seriesId) => {
    const {
      area,
      stackedData,
      data
    } = series[seriesId];
    const isArea = area !== void 0;
    const filter = getFilters == null ? void 0 : getFilters({
      currentAxisId: axis.id,
      isDefaultAxis,
      seriesXAxisId: series[seriesId].xAxisId,
      seriesYAxisId: series[seriesId].yAxisId
    });
    const getValues = isArea && axis.scaleType !== "log" && typeof series[seriesId].baseline !== "string" ? (d) => d : (d) => [d[1], d[1]];
    const seriesExtremums = getSeriesExtremums(getValues, data, stackedData, filter);
    const [seriesMin, seriesMax] = seriesExtremums;
    return [Math.min(seriesMin, acc[0]), Math.max(seriesMax, acc[1])];
  }, [Infinity, -Infinity]);
};

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/seriesProcessor.js
var seriesProcessor3 = (params, dataset) => {
  const {
    seriesOrder,
    series
  } = params;
  const stackingGroups = getStackingGroups(_extends({}, params, {
    defaultStrategy: {
      stackOffset: "none"
    }
  }));
  const d3Dataset = dataset ?? [];
  seriesOrder.forEach((id) => {
    const data = series[id].data;
    if (data !== void 0) {
      data.forEach((value, index) => {
        if (d3Dataset.length <= index) {
          d3Dataset.push({
            [id]: value
          });
        } else {
          d3Dataset[index][id] = value;
        }
      });
    } else if (dataset === void 0 && true) {
      throw new Error([`MUI X Charts: line series with id='${id}' has no data.`, "Either provide a data property to the series or use the dataset prop."].join("\n"));
    }
  });
  const completedSeries = {};
  stackingGroups.forEach((stackingGroup) => {
    const {
      ids,
      stackingOrder,
      stackingOffset
    } = stackingGroup;
    const stackedSeries = stack_default().keys(ids.map((id) => {
      const dataKey = series[id].dataKey;
      return series[id].data === void 0 && dataKey !== void 0 ? dataKey : id;
    })).value((d, key) => d[key] ?? 0).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach((id, index) => {
      const dataKey = series[id].dataKey;
      completedSeries[id] = _extends({
        labelMarkType: "line"
      }, series[id], {
        data: dataKey ? dataset.map((data) => {
          const value = data[dataKey];
          if (typeof value !== "number") {
            if (true) {
              if (value !== null) {
                warnOnce([`MUI X Charts: Your dataset key "${dataKey}" is used for plotting line, but contains nonnumerical elements.`, "Line plots only support numbers and null values."]);
              }
            }
            return null;
          }
          return value;
        }) : series[id].data,
        stackedData: stackedSeries[index].map(([a, b]) => [a, b])
      });
    });
  });
  return {
    seriesOrder,
    stackingGroups,
    series: defaultizeValueFormatter(completedSeries, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var seriesProcessor_default3 = seriesProcessor3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/getColor.js
var getColor3 = (series, xAxis, yAxis) => {
  const yColorScale = yAxis == null ? void 0 : yAxis.colorScale;
  const xColorScale = xAxis == null ? void 0 : xAxis.colorScale;
  if (yColorScale) {
    return (dataIndex) => {
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = series.data[dataIndex];
      const color = value === null ? series.color : yColorScale(value);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  if (xColorScale) {
    return (dataIndex) => {
      var _a;
      if (dataIndex === void 0) {
        return series.color;
      }
      const value = (_a = xAxis.data) == null ? void 0 : _a[dataIndex];
      const color = value === null ? series.color : xColorScale(value);
      if (color === null) {
        return series.color;
      }
      return color;
    };
  }
  return () => series.color;
};
var getColor_default3 = getColor3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/legend.js
var legendGetter3 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      markType: series[seriesId].labelMarkType,
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel
    });
    return acc;
  }, []);
};
var legend_default3 = legendGetter3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/tooltip.js
var tooltipGetter3 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const value = series.data[identifier.dataIndex];
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: series.labelMarkType
  };
};
var axisTooltipGetter2 = (series) => {
  return Object.values(series).map((s) => ({
    direction: "x",
    axisId: s.xAxisId
  }));
};
var tooltip_default3 = tooltipGetter3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues3 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default3 = getSeriesWithDefaultValues3;

// node_modules/@mui/x-charts/esm/LineChart/seriesConfig/index.js
var seriesConfig3 = {
  colorProcessor: getColor_default3,
  seriesProcessor: seriesProcessor_default3,
  legendGetter: legend_default3,
  tooltipGetter: tooltip_default3,
  axisTooltipGetter: axisTooltipGetter2,
  xExtremumGetter: getExtremumX3,
  yExtremumGetter: getExtremumY3,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default3
};

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/seriesProcessor.js
var getSortingComparator = (comparator = "none") => {
  if (typeof comparator === "function") {
    return comparator;
  }
  switch (comparator) {
    case "none":
      return null;
    case "desc":
      return (a, b) => b - a;
    case "asc":
      return (a, b) => a - b;
    default:
      return null;
  }
};
var seriesProcessor4 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  const defaultizedSeries = {};
  seriesOrder.forEach((seriesId) => {
    const arcs = pie_default().startAngle(2 * Math.PI * (series[seriesId].startAngle ?? 0) / 360).endAngle(2 * Math.PI * (series[seriesId].endAngle ?? 360) / 360).padAngle(2 * Math.PI * (series[seriesId].paddingAngle ?? 0) / 360).sortValues(getSortingComparator(series[seriesId].sortingValues ?? "none"))(series[seriesId].data.map((piePoint) => piePoint.value));
    defaultizedSeries[seriesId] = _extends({
      labelMarkType: "circle",
      valueFormatter: (item) => item.value.toLocaleString()
    }, series[seriesId], {
      data: series[seriesId].data.map((item, index) => _extends({}, item, {
        id: item.id ?? `auto-generated-pie-id-${seriesId}-${index}`
      }, arcs[index])).map((item, index) => {
        var _a, _b;
        return _extends({
          labelMarkType: "circle"
        }, item, {
          formattedValue: ((_b = (_a = series[seriesId]).valueFormatter) == null ? void 0 : _b.call(_a, _extends({}, item, {
            label: getLabel(item.label, "arc")
          }), {
            dataIndex: index
          })) ?? item.value.toLocaleString()
        });
      })
    });
  });
  return {
    seriesOrder,
    series: defaultizedSeries
  };
};
var seriesProcessor_default4 = seriesProcessor4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/getColor.js
var getColor4 = (series) => {
  return (dataIndex) => {
    return series.data[dataIndex].color;
  };
};
var getColor_default4 = getColor4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/legend.js
var legendGetter4 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    series[seriesId].data.forEach((item, dataIndex) => {
      const formattedLabel = getLabel(item.label, "legend");
      if (formattedLabel === void 0) {
        return;
      }
      acc.push({
        markType: item.labelMarkType ?? series[seriesId].labelMarkType,
        id: item.id ?? dataIndex,
        seriesId,
        color: item.color,
        label: formattedLabel,
        itemId: item.id ?? dataIndex
      });
    });
    return acc;
  }, []);
};
var legend_default4 = legendGetter4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/tooltip.js
var tooltipGetter4 = (params) => {
  const {
    series,
    getColor: getColor6,
    identifier
  } = params;
  if (!identifier || identifier.dataIndex === void 0) {
    return null;
  }
  const point2 = series.data[identifier.dataIndex];
  if (point2 == null) {
    return null;
  }
  const label = getLabel(point2.label, "tooltip");
  const value = _extends({}, point2, {
    label
  });
  const formattedValue = series.valueFormatter(value, {
    dataIndex: identifier.dataIndex
  });
  return {
    identifier,
    color: getColor6(identifier.dataIndex),
    label,
    value,
    formattedValue,
    markType: point2.labelMarkType ?? series.labelMarkType
  };
};
var tooltip_default4 = tooltipGetter4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues4 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`
  }, seriesData, {
    data: seriesData.data.map((d, index) => _extends({
      color: colors[index % colors.length]
    }, d))
  });
};
var getSeriesWithDefaultValues_default4 = getSeriesWithDefaultValues4;

// node_modules/@mui/x-charts/esm/PieChart/seriesConfig/index.js
var seriesConfig4 = {
  colorProcessor: getColor_default4,
  seriesProcessor: seriesProcessor_default4,
  legendGetter: legend_default4,
  tooltipGetter: tooltip_default4,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default4
};

// node_modules/@mui/x-charts/esm/context/ChartProvider/ChartProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var defaultSeriesConfig = {
  bar: seriesConfig,
  scatter: seriesConfig2,
  line: seriesConfig3,
  pie: seriesConfig4
};
var defaultPlugins = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];
function ChartProvider(props) {
  const {
    children,
    plugins = defaultPlugins,
    pluginParams = {},
    seriesConfig: seriesConfig5 = defaultSeriesConfig
  } = props;
  const {
    contextValue
  } = useCharts(plugins, pluginParams, seriesConfig5);
  return (0, import_jsx_runtime.jsx)(ChartContext.Provider, {
    value: contextValue,
    children
  });
}

// node_modules/@mui/x-charts/esm/context/ChartProvider/useChartContext.js
var React13 = __toESM(require_react(), 1);
var useChartContext = () => {
  const context = React13.useContext(ChartContext);
  if (context == null) {
    throw new Error(["MUI X Charts: Could not find the Chart context.", "It looks like you rendered your component outside of a ChartDataProvider.", "This can also happen if you are bundling multiple versions of the library."].join("\n"));
  }
  return context;
};

// node_modules/@mui/x-charts/esm/context/useChartApiContext.js
function useChartApiContext() {
  const {
    publicAPI
  } = useChartContext();
  const apiRef = React14.useRef(publicAPI);
  React14.useEffect(() => {
    apiRef.current = publicAPI;
  }, [publicAPI]);
  return apiRef;
}

// node_modules/@mui/x-charts/esm/internals/store/useStore.js
function useStore() {
  const context = useChartContext();
  if (!context) {
    throw new Error(["MUI X Charts: Could not find the charts context.", "It looks like you rendered your component outside of a ChartContainer parent component."].join("\n"));
  }
  return context.store;
}

// node_modules/@mui/x-charts/esm/hooks/useDrawingArea.js
function useDrawingArea() {
  const store = useStore();
  return useSelector(store, selectorChartDrawingArea);
}

// node_modules/@mui/x-charts/esm/hooks/useChartId.js
function useChartId2() {
  const store = useStore();
  return useSelector(store, selectorChartId);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.js
var React15 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/defaultizeAxis.js
function defaultizeAxis(inAxis, dataset, axisName) {
  const DEFAULT_AXIS_KEY = axisName === "rotation" ? DEFAULT_ROTATION_AXIS_KEY : DEFAULT_RADIUS_AXIS_KEY;
  const inputAxes = inAxis && inAxis.length > 0 ? inAxis : [{
    id: DEFAULT_AXIS_KEY
  }];
  return inputAxes.map((axisConfig, index) => {
    const id = `defaultized-${axisName}-axis-${index}`;
    const dataKey = axisConfig.dataKey;
    if (dataKey === void 0 || axisConfig.data !== void 0) {
      return _extends({
        id
      }, axisConfig);
    }
    if (dataset === void 0) {
      throw new Error(`MUI X Charts: ${axisName}-axis uses \`dataKey\` but no \`dataset\` is provided.`);
    }
    return _extends({
      id,
      data: dataset.map((d) => d[dataKey])
    }, axisConfig);
  });
}

// node_modules/@mui/x-charts/esm/internals/isPolar.js
function isPolarSeriesType(seriesType) {
  return polarSeriesTypes.getTypes().has(seriesType);
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisExtremum.js
var axisExtremumCallback2 = (acc, chartType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries) => {
  var _a;
  const getter = axisDirection === "rotation" ? seriesConfig5[chartType].rotationExtremumGetter : seriesConfig5[chartType].radiusExtremumGetter;
  const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
  const [minChartTypeData, maxChartTypeData] = (getter == null ? void 0 : getter({
    series,
    axis,
    axisIndex,
    isDefaultAxis: axisIndex === 0
  })) ?? [Infinity, -Infinity];
  const [minData, maxData] = acc;
  return [Math.min(minChartTypeData, minData), Math.max(maxChartTypeData, maxData)];
};
var getAxisExtremum2 = (axis, axisDirection, seriesConfig5, axisIndex, formattedSeries) => {
  const polarSeriesTypes2 = Object.keys(seriesConfig5).filter(isPolarSeriesType);
  const extremums = polarSeriesTypes2.reduce((acc, charType) => axisExtremumCallback2(acc, charType, axis, axisDirection, seriesConfig5, axisIndex, formattedSeries), [Infinity, -Infinity]);
  if (Number.isNaN(extremums[0]) || Number.isNaN(extremums[1])) {
    return [Infinity, -Infinity];
  }
  return extremums;
};

// node_modules/@mui/x-charts/esm/internals/angleConversion.js
var deg2rad = (value, defaultRad) => {
  if (value === void 0) {
    return defaultRad;
  }
  return Math.PI * value / 180;
};
var rad2deg = (value, defaultDeg) => {
  if (value === void 0) {
    return defaultDeg;
  }
  return 180 * value / Math.PI;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisTriggerTooltip.js
var getAxisTriggerTooltip2 = (axisDirection, seriesConfig5, formattedSeries, defaultAxisId) => {
  const tooltipAxesIds = /* @__PURE__ */ new Set();
  const chartTypes = Object.keys(seriesConfig5).filter(isPolarSeriesType);
  chartTypes.forEach((chartType) => {
    var _a, _b, _c;
    const series = ((_a = formattedSeries[chartType]) == null ? void 0 : _a.series) ?? {};
    const tooltipAxes = (_c = (_b = seriesConfig5[chartType]).axisTooltipGetter) == null ? void 0 : _c.call(_b, series);
    if (tooltipAxes === void 0) {
      return;
    }
    tooltipAxes.forEach(({
      axisId,
      direction
    }) => {
      if (direction === axisDirection) {
        tooltipAxesIds.add(axisId ?? defaultAxisId);
      }
    });
  });
  return tooltipAxesIds;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/computeAxisValue.js
function getRange2(drawingArea, axisDirection, axis) {
  if (axisDirection === "rotation") {
    if (axis.scaleType === "point") {
      const angles = [deg2rad(axis.startAngle, 0), deg2rad(axis.endAngle, 2 * Math.PI)];
      const diff = angles[1] - angles[0];
      if (diff > Math.PI * 2 - 0.1) {
        angles[1] -= diff / axis.data.length;
      }
      return angles;
    }
    return [deg2rad(axis.startAngle, 0), deg2rad(axis.endAngle, 2 * Math.PI)];
  }
  return [0, Math.min(drawingArea.height, drawingArea.width) / 2];
}
var DEFAULT_CATEGORY_GAP_RATIO2 = 0.2;
var DEFAULT_BAR_GAP_RATIO2 = 0.1;
function computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis: allAxis,
  seriesConfig: seriesConfig5,
  axisDirection
}) {
  if (allAxis === void 0) {
    return {
      axis: {},
      axisIds: []
    };
  }
  const axisIdsTriggeringTooltip = getAxisTriggerTooltip2(axisDirection, seriesConfig5, formattedSeries, allAxis[0].id);
  const completeAxis = {};
  allAxis.forEach((eachAxis, axisIndex) => {
    const axis = eachAxis;
    const range = getRange2(drawingArea, axisDirection, axis);
    const [minData, maxData] = getAxisExtremum2(axis, axisDirection, seriesConfig5, axisIndex, formattedSeries);
    const triggerTooltip = !axis.ignoreTooltip && axisIdsTriggeringTooltip.has(axis.id);
    const data = axis.data ?? [];
    if (isBandScaleConfig(axis)) {
      const categoryGapRatio = axis.categoryGapRatio ?? DEFAULT_CATEGORY_GAP_RATIO2;
      const barGapRatio = axis.barGapRatio ?? DEFAULT_BAR_GAP_RATIO2;
      completeAxis[axis.id] = _extends({
        offset: 0,
        categoryGapRatio,
        barGapRatio,
        triggerTooltip
      }, axis, {
        data,
        scale: band(axis.data, range).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, range);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (isPointScaleConfig(axis)) {
      completeAxis[axis.id] = _extends({
        offset: 0,
        triggerTooltip
      }, axis, {
        data,
        scale: point(axis.data, range),
        tickNumber: axis.data.length,
        colorScale: axis.colorMap && (axis.colorMap.type === "ordinal" ? getOrdinalColorScale(_extends({
          values: axis.data
        }, axis.colorMap)) : getColorScale(axis.colorMap))
      });
      if (isDateData(axis.data)) {
        const dateFormatter = createDateFormatter(axis, range);
        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;
      }
    }
    if (axis.scaleType === "band" || axis.scaleType === "point") {
      return;
    }
    const scaleType = axis.scaleType ?? "linear";
    const domainLimit = axis.domainLimit ?? "nice";
    const axisExtremums = [axis.min ?? minData, axis.max ?? maxData];
    if (typeof domainLimit === "function") {
      const {
        min: min2,
        max: max2
      } = domainLimit(minData, maxData);
      axisExtremums[0] = min2;
      axisExtremums[1] = max2;
    }
    const rawTickNumber = getTickNumber(_extends({}, axis, {
      range,
      domain: axisExtremums
    }));
    const tickNumber = scaleTickNumberByRange(rawTickNumber, range);
    const scale2 = getScale(scaleType, axisExtremums, range);
    const finalScale = domainLimit === "nice" ? scale2.nice(rawTickNumber) : scale2;
    const [minDomain, maxDomain] = finalScale.domain();
    const domain = [axis.min ?? minDomain, axis.max ?? maxDomain];
    completeAxis[axis.id] = _extends({
      offset: 0,
      triggerTooltip
    }, axis, {
      data,
      scaleType,
      scale: finalScale.domain(domain),
      tickNumber,
      colorScale: axis.colorMap && getColorScale(axis.colorMap)
    });
  });
  return {
    axis: completeAxis,
    axisIds: allAxis.map(({
      id
    }) => id)
  };
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.selectors.js
var selectorChartPolarAxisState = (state) => state.polarAxis;
var selectorChartRawRotationAxis = createSelector2(selectorChartPolarAxisState, (axis) => axis == null ? void 0 : axis.rotation);
var selectorChartRawRadiusAxis = createSelector2(selectorChartPolarAxisState, (axis) => axis == null ? void 0 : axis.radius);
var selectorChartRotationAxis = createSelector2([selectorChartRawRotationAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig], (axis, drawingArea, formattedSeries, seriesConfig5) => computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "rotation"
}));
var selectorChartRadiusAxis = createSelector2([selectorChartRawRadiusAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig], (axis, drawingArea, formattedSeries, seriesConfig5) => computeAxisValue2({
  drawingArea,
  formattedSeries,
  axis,
  seriesConfig: seriesConfig5,
  axisDirection: "radius"
}));
var selectorChartPolarCenter = createSelector2([selectorChartDrawingArea], (drawingArea) => ({
  cx: drawingArea.left + drawingArea.width / 2,
  cy: drawingArea.top + drawingArea.height / 2
}));

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/coordinateTransformation.js
var generateSvg2rotation = (center) => (x, y) => Math.atan2(x - center.cx, center.cy - y);
var generateSvg2polar = (center) => (x, y) => {
  const angle = Math.atan2(x - center.cx, center.cy - y);
  return [Math.sqrt((x - center.cx) ** 2 + (center.cy - y) ** 2), angle];
};
var generatePolar2svg = (center) => (radius, rotation) => {
  return [center.cx + radius * Math.sin(rotation), center.cy - radius * Math.cos(rotation)];
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.js
var useChartPolarAxis = ({
  params,
  store,
  seriesConfig: seriesConfig5,
  svgRef,
  instance
}) => {
  const {
    rotationAxis,
    radiusAxis,
    dataset
  } = params;
  if (true) {
    const ids = [...rotationAxis ?? [], ...radiusAxis ?? []].filter((axis) => axis.id).map((axis) => axis.id);
    const duplicates = new Set(ids.filter((id, index) => ids.indexOf(id) !== index));
    if (duplicates.size > 0) {
      warnOnce([`MUI X Charts: The following axis ids are duplicated: ${Array.from(duplicates).join(", ")}.`, `Please make sure that each axis has a unique id.`].join("\n"), "error");
    }
  }
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const center = useSelector(store, selectorChartPolarCenter);
  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);
  const {
    axis: rotationAxisWithScale,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  const {
    axis: radiusAxisWithScale,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  const isFirstRender = React15.useRef(true);
  React15.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    store.update((prev) => _extends({}, prev, {
      polarAxis: _extends({}, prev.polarAxis, {
        rotation: defaultizeAxis(rotationAxis, dataset, "rotation"),
        radius: defaultizeAxis(radiusAxis, dataset, "radius")
      })
    }));
  }, [seriesConfig5, drawingArea, rotationAxis, radiusAxis, dataset, store]);
  const svg2rotation = React15.useMemo(() => generateSvg2rotation({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const svg2polar = React15.useMemo(() => generateSvg2polar({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const polar2svg = React15.useMemo(() => generatePolar2svg({
    cx: center.cx,
    cy: center.cy
  }), [center.cx, center.cy]);
  const usedRotationAxisId = rotationAxisIds[0];
  const usedRadiusAxisId = radiusAxisIds[0];
  const mousePosition = React15.useRef({
    isInChart: false,
    x: -1,
    y: -1
  });
  React15.useEffect(() => {
    const element = svgRef.current;
    if (!isInteractionEnabled || element === null || params.disableAxisListener) {
      return () => {
      };
    }
    const handleOut = () => {
      var _a;
      mousePosition.current = {
        isInChart: false,
        x: -1,
        y: -1
      };
      (_a = instance.cleanInteraction) == null ? void 0 : _a.call(instance);
    };
    const handleMove = (event) => {
      var _a;
      const target = "targetTouches" in event ? event.targetTouches[0] : event;
      const svgPoint = getSVGPoint(element, target);
      mousePosition.current.x = svgPoint.x;
      mousePosition.current.y = svgPoint.y;
      if (!instance.isPointInside(svgPoint.x, svgPoint.y, event.target)) {
        if (mousePosition.current.isInChart) {
          instance == null ? void 0 : instance.cleanInteraction();
          mousePosition.current.isInChart = false;
        }
        return;
      }
      const radiusSquare = (center.cx - svgPoint.x) ** 2 + (center.cy - svgPoint.y) ** 2;
      const maxRadius = radiusAxisWithScale[usedRadiusAxisId].scale.range()[1];
      if (radiusSquare > maxRadius ** 2) {
        if (mousePosition.current.isInChart) {
          instance == null ? void 0 : instance.cleanInteraction();
          mousePosition.current.isInChart = false;
        }
        return;
      }
      mousePosition.current.isInChart = true;
      (_a = instance.setPointerCoordinate) == null ? void 0 : _a.call(instance, svgPoint);
    };
    const handleDown = (event) => {
      const target = event.currentTarget;
      if (!target) {
        return;
      }
      if ("hasPointerCapture" in target && target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
      }
    };
    element.addEventListener("pointerdown", handleDown);
    element.addEventListener("pointermove", handleMove);
    element.addEventListener("pointerout", handleOut);
    element.addEventListener("pointercancel", handleOut);
    element.addEventListener("pointerleave", handleOut);
    return () => {
      element.removeEventListener("pointerdown", handleDown);
      element.removeEventListener("pointermove", handleMove);
      element.removeEventListener("pointerout", handleOut);
      element.removeEventListener("pointercancel", handleOut);
      element.removeEventListener("pointerleave", handleOut);
    };
  }, [svgRef, store, center, radiusAxisWithScale, usedRadiusAxisId, rotationAxisWithScale, usedRotationAxisId, instance, params.disableAxisListener, isInteractionEnabled, svg2rotation]);
  return {
    instance: {
      svg2polar,
      svg2rotation,
      polar2svg
    }
  };
};
useChartPolarAxis.params = {
  rotationAxis: true,
  radiusAxis: true,
  dataset: true,
  disableAxisListener: true
};
useChartPolarAxis.getInitialState = (params) => ({
  polarAxis: {
    rotation: defaultizeAxis(params.rotationAxis, params.dataset, "rotation"),
    radius: defaultizeAxis(params.radiusAxis, params.dataset, "radius")
  }
});

// node_modules/@mui/x-charts/esm/hooks/useAxis.js
function useXAxes() {
  const store = useStore();
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  return {
    xAxis,
    xAxisIds
  };
}
function useYAxes() {
  const store = useStore();
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  return {
    yAxis,
    yAxisIds
  };
}
function useXAxis(axisId) {
  const store = useStore();
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const id = axisId ?? xAxisIds[0];
  return xAxis[id];
}
function useYAxis(axisId) {
  const store = useStore();
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const id = axisId ?? yAxisIds[0];
  return yAxis[id];
}
function useRotationAxes() {
  const store = useStore();
  const {
    axis: rotationAxis,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  return {
    rotationAxis,
    rotationAxisIds
  };
}
function useRadiusAxes() {
  const store = useStore();
  const {
    axis: radiusAxis,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  return {
    radiusAxis,
    radiusAxisIds
  };
}
function useRotationAxis(identifier) {
  const store = useStore();
  const {
    axis: rotationAxis,
    axisIds: rotationAxisIds
  } = useSelector(store, selectorChartRotationAxis);
  const id = typeof identifier === "string" ? identifier : rotationAxisIds[identifier ?? 0];
  return rotationAxis[id];
}
function useRadiusAxis(identifier) {
  const store = useStore();
  const {
    axis: radiusAxis,
    axisIds: radiusAxisIds
  } = useSelector(store, selectorChartRadiusAxis);
  const id = typeof identifier === "string" ? identifier : radiusAxisIds[identifier ?? 0];
  return radiusAxis[id];
}

// node_modules/@mui/x-charts/esm/hooks/useScale.js
function getValueToPositionMapper(scale2) {
  if (isBandScale(scale2)) {
    return (value) => (scale2(value) ?? 0) + scale2.bandwidth() / 2;
  }
  return (value) => scale2(value);
}
function useXScale(axisId) {
  const axis = useXAxis(axisId);
  return axis.scale;
}
function useYScale(axisId) {
  const axis = useYAxis(axisId);
  return axis.scale;
}
function useRotationScale(identifier) {
  const axis = useRotationAxis(identifier);
  return axis == null ? void 0 : axis.scale;
}
function useRadiusScale(identifier) {
  const axis = useRadiusAxis(identifier);
  return axis == null ? void 0 : axis.scale;
}

// node_modules/@mui/x-charts/esm/hooks/useZAxis.js
function useZAxes() {
  const store = useStore();
  const {
    axis: zAxis,
    axisIds: zAxisIds
  } = useSelector(store, selectorChartZAxis) ?? {
    axis: {},
    axisIds: []
  };
  return {
    zAxis,
    zAxisIds
  };
}
function useZAxis(identifier) {
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const id = typeof identifier === "string" ? identifier : zAxisIds[identifier ?? 0];
  return zAxis[id];
}

// node_modules/@mui/x-charts/esm/hooks/useColorScale.js
function useXColorScale(axisId) {
  const axis = useXAxis(axisId);
  return axis.colorScale;
}
function useYColorScale(axisId) {
  const axis = useYAxis(axisId);
  return axis.colorScale;
}
function useZColorScale(axisId) {
  const axis = useZAxis(axisId);
  return axis.colorScale;
}

// node_modules/@mui/x-charts/esm/hooks/useSvgRef.js
function useSvgRef() {
  const context = useChartContext();
  if (!context) {
    throw new Error(["MUI X Charts: Could not find the svg ref context.", "It looks like you rendered your component outside of a ChartContainer parent component."].join("\n"));
  }
  return context.svgRef;
}

// node_modules/@mui/x-charts/esm/hooks/useSeries.js
function useSeries() {
  const store = useStore();
  return useSelector(store, selectorChartSeriesProcessed);
}

// node_modules/@mui/x-internals/esm/fastArrayCompare/fastArrayCompare.js
function fastArrayCompare(a, b) {
  if (a === b) {
    return true;
  }
  if (!Array.isArray(a) || !Array.isArray(b)) {
    return false;
  }
  let i = a.length;
  if (i !== b.length) {
    return false;
  }
  while (i--) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}

// node_modules/@mui/x-charts/esm/internals/createSeriesSelectorOfType.js
function createSeriesSelectorsOfType(seriesType) {
  const selectorSeriesWithIds = createSelector2([selectorChartSeriesProcessed, (_, ids) => ids], (processedSeries, ids) => {
    var _a, _b, _c, _d, _e, _f;
    if (!ids || Array.isArray(ids) && ids.length === 0) {
      return ((_b = (_a = processedSeries[seriesType]) == null ? void 0 : _a.seriesOrder) == null ? void 0 : _b.map((seriesId) => {
        var _a2;
        return (_a2 = processedSeries[seriesType]) == null ? void 0 : _a2.series[seriesId];
      })) ?? [];
    }
    if (!Array.isArray(ids)) {
      return (_d = (_c = processedSeries[seriesType]) == null ? void 0 : _c.series) == null ? void 0 : _d[ids];
    }
    const result = [];
    const failedIds = [];
    for (const id of ids) {
      const series = (_f = (_e = processedSeries[seriesType]) == null ? void 0 : _e.series) == null ? void 0 : _f[id];
      if (series) {
        result.push(series);
      } else {
        failedIds.push(id);
      }
    }
    if (failedIds.length > 0) {
      const formattedIds = failedIds.map((v2) => JSON.stringify(v2)).join(", ");
      const fnName = `use${seriesType.charAt(0).toUpperCase()}${seriesType.slice(1)}Series`;
      warnOnce([`MUI X Charts: The following ids provided to "${fnName}" could not be found: ${formattedIds}.`, `Make sure that they exist and their series are using the "${seriesType}" series type.`]);
    }
    return result;
  });
  return (ids) => {
    const store = useStore();
    return useSelector(store, selectorSeriesWithIds, ids, fastArrayCompare);
  };
}
function createAllSeriesSelectorOfType(seriesType) {
  const selectorSeries = createSelector2(selectorChartSeriesProcessed, (processedSeries) => processedSeries[seriesType]);
  return () => {
    const store = useStore();
    return useSelector(store, selectorSeries);
  };
}

// node_modules/@mui/x-charts/esm/hooks/useScatterSeries.js
var useSelectorSeries = createSeriesSelectorsOfType("scatter");
var useSelectorSeriesContext = createAllSeriesSelectorOfType("scatter");
function useScatterSeries(seriesIds) {
  return useSelectorSeries(seriesIds);
}
function useScatterSeriesContext() {
  return useSelectorSeriesContext();
}

// node_modules/@mui/x-charts/esm/hooks/usePieSeries.js
var useSelectorSeries2 = createSeriesSelectorsOfType("pie");
var useSelectorSeriesContext2 = createAllSeriesSelectorOfType("pie");
function usePieSeries(seriesIds) {
  return useSelectorSeries2(seriesIds);
}
function usePieSeriesContext() {
  return useSelectorSeriesContext2();
}

// node_modules/@mui/x-charts/esm/hooks/useBarSeries.js
var useSelectorSeries3 = createSeriesSelectorsOfType("bar");
var useSelectorSeriesContext3 = createAllSeriesSelectorOfType("bar");
function useBarSeries(seriesIds) {
  return useSelectorSeries3(seriesIds);
}
function useBarSeriesContext() {
  return useSelectorSeriesContext3();
}

// node_modules/@mui/x-charts/esm/hooks/useLineSeries.js
var useSelectorSeries4 = createSeriesSelectorsOfType("line");
var useSelectorSeriesContext4 = createAllSeriesSelectorOfType("line");
function useLineSeries(seriesIds) {
  return useSelectorSeries4(seriesIds);
}
function useLineSeriesContext() {
  return useSelectorSeriesContext4();
}

// node_modules/@mui/x-charts/esm/hooks/useRadarSeries.js
var useSelectorSeries5 = createSeriesSelectorsOfType("radar");
var useSelectorSeriesContext5 = createAllSeriesSelectorOfType("radar");
function useRadarSeries(seriesIds) {
  return useSelectorSeries5(seriesIds);
}
function useRadarSeriesContext() {
  return useSelectorSeriesContext5();
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/createIsHighlighted.js
var createIsHighlighted = (highlightScope, highlightedItem) => (item) => {
  if (!highlightScope || !highlightedItem || !item) {
    return false;
  }
  if (highlightScope.highlight === "series") {
    return item.seriesId === highlightedItem.seriesId;
  }
  if (highlightScope.highlight === "item") {
    return item.dataIndex === highlightedItem.dataIndex && item.seriesId === highlightedItem.seriesId;
  }
  return false;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/createIsFaded.js
var createIsFaded = (highlightScope, highlightedItem) => (item) => {
  if (!highlightScope || !highlightedItem || !item) {
    return false;
  }
  if (highlightScope.fade === "series") {
    return item.seriesId === highlightedItem.seriesId && item.dataIndex !== highlightedItem.dataIndex;
  }
  if (highlightScope.fade === "global") {
    return item.seriesId !== highlightedItem.seriesId || item.dataIndex !== highlightedItem.dataIndex;
  }
  return false;
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartHighlight/useChartHighlight.selectors.js
var selectHighlight = (state) => state.highlight;
var selectSeries = (state) => state.series;
var selectorChartsHighlightScopePerSeriesId = createSelector2(selectSeries, (series) => {
  const map = /* @__PURE__ */ new Map();
  Object.keys(series.processedSeries).forEach((seriesType) => {
    const seriesData = series.processedSeries[seriesType];
    Object.keys((seriesData == null ? void 0 : seriesData.series) ?? {}).forEach((seriesId) => {
      const seriesItem = seriesData == null ? void 0 : seriesData.series[seriesId];
      map.set(seriesId, seriesItem == null ? void 0 : seriesItem.highlightScope);
    });
  });
  return map;
});
var selectorChartsHighlightedItem = createSelector2(selectHighlight, (highlight) => highlight.item);
var selectorChartsHighlightScope = createSelector2([selectorChartsHighlightScopePerSeriesId, selectorChartsHighlightedItem], (seriesIdToHighlightScope, highlightedItem) => {
  if (!highlightedItem) {
    return null;
  }
  const highlightScope = seriesIdToHighlightScope.get(highlightedItem.seriesId);
  if (highlightScope === void 0) {
    return null;
  }
  return highlightScope;
});
var selectorChartsIsHighlightedCallback = createSelector2([selectorChartsHighlightScope, selectorChartsHighlightedItem], createIsHighlighted);
var selectorChartsIsFadedCallback = createSelector2([selectorChartsHighlightScope, selectorChartsHighlightedItem], createIsFaded);
var selectorChartsIsHighlighted = createSelector2([selectorChartsHighlightScope, selectorChartsHighlightedItem, (_, item) => item], (highlightScope, highlightedItem, item) => createIsHighlighted(highlightScope, highlightedItem)(item));
var selectorChartsIsFaded = createSelector2([selectorChartsHighlightScope, selectorChartsHighlightedItem, (_, item) => item], (highlightScope, highlightedItem, item) => createIsFaded(highlightScope, highlightedItem)(item));

// node_modules/@mui/x-charts/esm/hooks/useItemHighlighted.js
function useItemHighlighted(item) {
  const store = useStore();
  const isHighlighted = useSelector(store, selectorChartsIsHighlighted, item);
  const isFaded = useSelector(store, selectorChartsIsFaded, item);
  return {
    isHighlighted,
    isFaded: !isHighlighted && isFaded
  };
}

// node_modules/@mui/x-charts/esm/hooks/useItemHighlightedGetter.js
function useItemHighlightedGetter() {
  const store = useStore();
  const isHighlighted = useSelector(store, selectorChartsIsHighlightedCallback);
  const isFaded = useSelector(store, selectorChartsIsFadedCallback);
  return {
    isHighlighted,
    isFaded
  };
}

// node_modules/@mui/x-charts/esm/hooks/useLegend.js
function getSeriesToDisplay(series, seriesConfig5) {
  return Object.keys(series).flatMap((seriesType) => {
    const getter = seriesConfig5[seriesType].legendGetter;
    return getter === void 0 ? [] : getter(series[seriesType]);
  });
}
function useLegend() {
  const series = useSeries();
  const store = useStore();
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  return {
    items: getSeriesToDisplay(series, seriesConfig5)
  };
}

// node_modules/@mui/x-charts/esm/hooks/useChartGradientId.js
var React16 = __toESM(require_react(), 1);
function useChartGradientIdBuilder() {
  const chartId = useChartId2();
  return React16.useCallback((axisId) => `${chartId}-gradient-${axisId}`, [chartId]);
}
function useChartGradientIdObjectBoundBuilder() {
  const chartId = useChartId2();
  return React16.useCallback((axisId) => `${chartId}-gradient-${axisId}-object-bound`, [chartId]);
}
function useChartGradientId(axisId) {
  return useChartGradientIdBuilder()(axisId);
}
function useChartGradientIdObjectBound(axisId) {
  return useChartGradientIdObjectBoundBuilder()(axisId);
}

// node_modules/@mui/utils/esm/useForkRef/useForkRef.js
var React17 = __toESM(require_react(), 1);
function useForkRef(...refs) {
  const cleanupRef = React17.useRef(void 0);
  const refEffect = React17.useCallback((instance) => {
    const cleanups = refs.map((ref) => {
      if (ref == null) {
        return null;
      }
      if (typeof ref === "function") {
        const refCallback = ref;
        const refCleanup = refCallback(instance);
        return typeof refCleanup === "function" ? refCleanup : () => {
          refCallback(null);
        };
      }
      ref.current = instance;
      return () => {
        ref.current = null;
      };
    });
    return () => {
      cleanups.forEach((refCleanup) => refCleanup == null ? void 0 : refCleanup());
    };
  }, refs);
  return React17.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) {
        cleanupRef.current = refEffect(value);
      }
    };
  }, refs);
}

// node_modules/@mui/x-charts/esm/internals/animation/useAnimateInternal.js
var React18 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/animation/animation.js
var import_bezier_easing = __toESM(require_src(), 1);
var ANIMATION_DURATION_MS = 300;
var ANIMATION_TIMING_FUNCTION = "cubic-bezier(0.66, 0, 0.34, 1)";
var ANIMATION_TIMING_FUNCTION_JS = (0, import_bezier_easing.default)(0.66, 0, 0.34, 1);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time2) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time2;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time2) {
  var t = new Timer();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time2 = Infinity;
  while (t1) {
    if (t1._call) {
      if (time2 > t1._time)
        time2 = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}

// node_modules/@mui/x-charts/esm/internals/animation/Transition.js
var Transition = class {
  /**
   * Create a new ResumableTransition.
   * @param duration Duration in milliseconds
   * @param easingFn The easing function
   * @param onTick Callback function called on each animation frame with the eased time in range [0, 1].
   */
  constructor(duration, easingFn, onTick) {
    this.duration = void 0;
    this.elapsed = 0;
    this.easingFn = void 0;
    this.timer = null;
    this.onTickCallback = void 0;
    this.duration = duration;
    this.easingFn = easingFn;
    this.onTickCallback = onTick;
    this.resume();
  }
  get running() {
    return this.timer !== null;
  }
  timerCallback(elapsed) {
    this.elapsed = Math.min(elapsed, this.duration);
    const t = this.duration === 0 ? 1 : this.elapsed / this.duration;
    const easedT = this.easingFn(t);
    this.onTickCallback(easedT);
    if (this.elapsed >= this.duration) {
      this.stop();
    }
  }
  /**
   * Resume the transition
   */
  resume() {
    if (this.running || this.elapsed >= this.duration) {
      return this;
    }
    const time2 = now() - this.elapsed;
    this.timer = timer((elapsed) => this.timerCallback(elapsed), 0, time2);
    timerFlush();
    return this;
  }
  /**
   * Stops the transition.
   */
  stop() {
    if (!this.running) {
      return this;
    }
    if (this.timer) {
      this.timer.stop();
      this.timer = null;
    }
    return this;
  }
  /**
   * Immediately finishes the transition and calls the tick callback with the final value.
   */
  finish() {
    this.stop();
    timeout_default(() => this.timerCallback(this.duration));
    timerFlush();
    return this;
  }
};

// node_modules/@mui/x-charts/esm/internals/shallowEqual.js
function shallowEqual(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  for (let i = 0; i < keysA.length; i += 1) {
    const currentKey = keysA[i];
    if (!Object.prototype.hasOwnProperty.call(objB, currentKey) || // @ts-ignore
    !Object.is(objA[currentKey], objB[currentKey])) {
      return false;
    }
  }
  return true;
}

// node_modules/@mui/x-charts/esm/internals/animation/useAnimateInternal.js
function useAnimateInternal(props, {
  createInterpolator,
  applyProps,
  skip,
  initialProps = props
}) {
  const lastInterpolatedPropsRef = React18.useRef(initialProps);
  const transitionRef = React18.useRef(null);
  const elementRef = React18.useRef(null);
  const lastPropsRef = React18.useRef(props);
  useEnhancedEffect_default(() => {
    lastPropsRef.current = props;
  }, [props]);
  useEnhancedEffect_default(() => {
    var _a;
    if (skip) {
      (_a = transitionRef.current) == null ? void 0 : _a.finish();
      transitionRef.current = null;
      elementRef.current = null;
      lastInterpolatedPropsRef.current = props;
    }
  }, [props, skip]);
  const animate = React18.useCallback((element) => {
    const lastInterpolatedProps = lastInterpolatedPropsRef.current;
    const interpolate = createInterpolator(lastInterpolatedProps, props);
    transitionRef.current = new Transition(ANIMATION_DURATION_MS, ANIMATION_TIMING_FUNCTION_JS, (t) => {
      const interpolatedProps = interpolate(t);
      lastInterpolatedPropsRef.current = interpolatedProps;
      applyProps(element, interpolatedProps);
    });
  }, [applyProps, createInterpolator, props]);
  const setRef2 = React18.useCallback((element) => {
    var _a, _b, _c, _d;
    if (element === null) {
      (_a = transitionRef.current) == null ? void 0 : _a.stop();
      return;
    }
    const lastElement = elementRef.current;
    if (lastElement === element) {
      if (shallowEqual(lastPropsRef.current, props)) {
        (_b = transitionRef.current) == null ? void 0 : _b.resume();
        return;
      }
      (_c = transitionRef.current) == null ? void 0 : _c.stop();
    }
    if (lastElement) {
      (_d = transitionRef.current) == null ? void 0 : _d.stop();
    }
    elementRef.current = element;
    if (transitionRef.current || !skip) {
      animate(element);
    }
  }, [animate, props, skip]);
  return setRef2;
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimate.js
function useAnimate(props, {
  createInterpolator,
  transformProps,
  applyProps,
  skip,
  initialProps = props,
  ref
}) {
  const transform = transformProps ?? ((p) => p);
  const animateRef = useAnimateInternal(props, {
    initialProps,
    createInterpolator,
    applyProps: (element, animatedProps) => applyProps(element, transform(animatedProps)),
    skip
  });
  const usedProps = skip ? props : initialProps;
  return _extends({}, transformProps(usedProps), {
    ref: useForkRef(animateRef, ref)
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateArea.js
function useAnimateArea(props) {
  return useAnimate({
    d: props.d
  }, {
    createInterpolator: (lastProps, newProps) => {
      const interpolate = string_default(lastProps.d, newProps.d);
      return (t) => ({
        d: interpolate(t)
      });
    },
    applyProps: (element, {
      d
    }) => element.setAttribute("d", d),
    transformProps: (p) => p,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateBar.js
function barPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t)
    };
  };
}
function useAnimateBar(props) {
  const initialProps = {
    x: props.layout === "vertical" ? props.x : props.xOrigin,
    y: props.layout === "vertical" ? props.yOrigin : props.y,
    width: props.layout === "vertical" ? props.width : 0,
    height: props.layout === "vertical" ? 0 : props.height
  };
  return useAnimate({
    x: props.x,
    y: props.y,
    width: props.width,
    height: props.height
  }, {
    createInterpolator: barPropsInterpolator,
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
    },
    transformProps: (p) => p,
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateBarLabel.js
function barLabelPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t)
    };
  };
}
function useAnimateBarLabel(props) {
  const initialProps = {
    x: props.layout === "vertical" ? props.x + props.width / 2 : props.xOrigin,
    y: props.layout === "vertical" ? props.yOrigin : props.y + props.height / 2,
    width: props.width,
    height: props.height
  };
  const currentProps = {
    x: props.x + props.width / 2,
    y: props.y + props.height / 2,
    width: props.width,
    height: props.height
  };
  return useAnimate(currentProps, {
    createInterpolator: barLabelPropsInterpolator,
    transformProps: (p) => p,
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateLine.js
function useAnimateLine(props) {
  return useAnimate({
    d: props.d
  }, {
    createInterpolator: (lastProps, newProps) => {
      const interpolate = string_default(lastProps.d, newProps.d);
      return (t) => ({
        d: interpolate(t)
      });
    },
    applyProps: (element, {
      d
    }) => element.setAttribute("d", d),
    skip: props.skipAnimation,
    transformProps: (p) => p,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimatePieArc.js
function pieArcPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolatePaddingAngle = number_default(from.paddingAngle, to.paddingAngle);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      paddingAngle: interpolatePaddingAngle(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimatePieArc(props) {
  const initialProps = {
    startAngle: (props.startAngle + props.endAngle) / 2,
    endAngle: (props.startAngle + props.endAngle) / 2,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  };
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: pieArcPropsInterpolator,
    transformProps: (p) => ({
      d: arc_default().cornerRadius(p.cornerRadius)({
        padAngle: p.paddingAngle,
        innerRadius: p.innerRadius,
        outerRadius: p.outerRadius,
        startAngle: p.startAngle,
        endAngle: p.endAngle
      }),
      visibility: p.startAngle === p.endAngle ? "hidden" : "visible"
    }),
    applyProps(element, p) {
      element.setAttribute("d", p.d);
      element.setAttribute("visibility", p.visibility);
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimatePieArcLabel.js
function pieArcLabelPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolatePaddingAngle = number_default(from.paddingAngle, to.paddingAngle);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      paddingAngle: interpolatePaddingAngle(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimatePieArcLabel(props) {
  const initialProps = {
    startAngle: (props.startAngle + props.endAngle) / 2,
    endAngle: (props.startAngle + props.endAngle) / 2,
    innerRadius: props.arcLabelRadius ?? props.innerRadius,
    outerRadius: props.arcLabelRadius ?? props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  };
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: (props == null ? void 0 : props.arcLabelRadius) ?? props.innerRadius,
    outerRadius: (props == null ? void 0 : props.arcLabelRadius) ?? props.outerRadius,
    paddingAngle: props.paddingAngle,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: pieArcLabelPropsInterpolator,
    transformProps: (animatedProps) => {
      const [x, y] = arc_default().cornerRadius(animatedProps.cornerRadius).centroid({
        padAngle: animatedProps.paddingAngle,
        startAngle: animatedProps.startAngle,
        endAngle: animatedProps.endAngle,
        innerRadius: animatedProps.innerRadius,
        outerRadius: animatedProps.outerRadius
      });
      return {
        x,
        y
      };
    },
    applyProps(element, {
      x,
      y
    }) {
      element.setAttribute("x", x.toString());
      element.setAttribute("y", y.toString());
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/hooks/useChartRootRef.js
function useChartRootRef() {
  const context = useChartContext();
  return context.chartRootRef;
}

// node_modules/@mui/x-charts/esm/hooks/useChartsLocalization.js
var React20 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsLocalizationProvider/ChartsLocalizationProvider.js
var React19 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/locales/utils/getChartsLocalization.js
var getChartsLocalization = (chartsTranslations) => {
  return {
    components: {
      MuiChartsLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, chartsTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-charts/esm/locales/enUS.js
var enUSLocaleText = {
  // Overlay
  loading: "Loading data…",
  noData: "No data to display",
  zoomIn: "Zoom in",
  zoomOut: "Zoom out"
};
var DEFAULT_LOCALE = enUSLocaleText;
var enUS = getChartsLocalization(enUSLocaleText);

// node_modules/@mui/x-charts/esm/ChartsLocalizationProvider/ChartsLocalizationProvider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var _excluded2 = ["localeText"];
var ChartsLocalizationContext = React19.createContext(null);
if (true)
  ChartsLocalizationContext.displayName = "ChartsLocalizationContext";
function ChartsLocalizationProvider(inProps) {
  const {
    localeText: inLocaleText
  } = inProps, other = _objectWithoutPropertiesLoose(inProps, _excluded2);
  const {
    localeText: parentLocaleText
  } = React19.useContext(ChartsLocalizationContext) ?? {
    localeText: void 0
  };
  const props = useThemeProps({
    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
    // We will then merge this theme value with our value manually
    props: other,
    name: "MuiChartsLocalizationProvider"
  });
  const {
    children,
    localeText: themeLocaleText
  } = props;
  const localeText = React19.useMemo(() => _extends({}, DEFAULT_LOCALE, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
  const contextValue = React19.useMemo(() => {
    return {
      localeText
    };
  }, [localeText]);
  return (0, import_jsx_runtime2.jsx)(ChartsLocalizationContext.Provider, {
    value: contextValue,
    children
  });
}
true ? ChartsLocalizationProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types.default.node,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/hooks/useChartsLocalization.js
var useChartsLocalization = () => {
  const localization = React20.useContext(ChartsLocalizationContext);
  if (localization === null) {
    throw new Error(["MUI X Charts: Can not find the charts localization context.", "It looks like you forgot to wrap your component in ChartsLocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-charts` package"].join("\n"));
  }
  return localization;
};

// node_modules/@mui/x-charts/esm/models/seriesType/index.js
function isDefaultizedBarSeries(series) {
  return series.type === "bar";
}
function isBarSeries(series) {
  return series.type === "bar";
}

// node_modules/@mui/x-charts/esm/ChartsClipPath/ChartsClipPath.js
var React21 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function ChartsClipPath(props) {
  const {
    id,
    offset: offsetProps
  } = props;
  const {
    left: left2,
    top: top2,
    width,
    height
  } = useDrawingArea();
  const offset2 = _extends({
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }, offsetProps);
  return (0, import_jsx_runtime3.jsx)("clipPath", {
    id,
    children: (0, import_jsx_runtime3.jsx)("rect", {
      x: left2 - offset2.left,
      y: top2 - offset2.top,
      width: width + offset2.left + offset2.right,
      height: height + offset2.top + offset2.bottom
    })
  });
}
true ? ChartsClipPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the clip path.
   */
  id: import_prop_types2.default.string.isRequired,
  /**
   * Offset, in pixels, of the clip path rectangle from the drawing area.
   *
   * A positive value will move the rectangle outside the drawing area.
   */
  offset: import_prop_types2.default.shape({
    bottom: import_prop_types2.default.number,
    left: import_prop_types2.default.number,
    right: import_prop_types2.default.number,
    top: import_prop_types2.default.number
  })
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var React26 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var React24 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/chartsReferenceLineClasses.js
function getReferenceLineUtilityClass(slot) {
  return generateUtilityClass("MuiChartsReferenceLine", slot);
}
var referenceLineClasses = generateUtilityClasses("MuiChartsReferenceLine", ["root", "vertical", "horizontal", "line", "label"]);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
var ReferenceLineRoot = styled_default("g")(({
  theme
}) => ({
  [`& .${referenceLineClasses.line}`]: {
    fill: "none",
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1,
    pointerEvents: "none"
  },
  [`& .${referenceLineClasses.label}`]: _extends({
    fill: (theme.vars || theme).palette.text.primary,
    stroke: "none",
    pointerEvents: "none",
    fontSize: 12
  }, theme.typography.body1)
}));

// node_modules/@mui/x-charts/esm/ChartsText/ChartsText.js
var React23 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/domUtils.js
function isSsr() {
  return typeof window === "undefined";
}
var stringCache = /* @__PURE__ */ new Map();
var MAX_CACHE_NUM = 2e3;
var SPAN_STYLE = {
  position: "absolute",
  top: "-20000px",
  left: 0,
  padding: 0,
  margin: 0,
  border: "none",
  whiteSpace: "pre"
};
var STYLE_LIST = ["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height", "top", "left", "fontSize", "padding", "margin", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom"];
var MEASUREMENT_SPAN_ID = "mui_measurement_span";
function autoCompleteStyle(name, value) {
  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {
    return `${value}px`;
  }
  return value;
}
function camelToMiddleLine(text) {
  const strs = text.split("");
  const formatStrs = strs.reduce((result, entry) => {
    if (entry === entry.toUpperCase()) {
      return [...result, "-", entry.toLowerCase()];
    }
    return [...result, entry];
  }, []);
  return formatStrs.join("");
}
var getStyleString = (style) => Object.keys(style).sort().reduce((result, s) => `${result}${camelToMiddleLine(s)}:${autoCompleteStyle(s, style[s])};`, "");
var domCleanTimeout;
var getStringSize = (text, style = {}) => {
  if (text === void 0 || text === null || isSsr()) {
    return {
      width: 0,
      height: 0
    };
  }
  const str = `${text}`;
  const styleString = getStyleString(style);
  const cacheKey = `${str}-${styleString}`;
  const size = stringCache.get(cacheKey);
  if (size) {
    return size;
  }
  try {
    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
    if (measurementSpan === null) {
      measurementSpan = document.createElement("span");
      measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
      measurementSpan.setAttribute("aria-hidden", "true");
      document.body.appendChild(measurementSpan);
    }
    const measurementSpanStyle = _extends({}, SPAN_STYLE, style);
    Object.keys(measurementSpanStyle).map((styleKey) => {
      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);
      return styleKey;
    });
    measurementSpan.textContent = str;
    const rect = measurementSpan.getBoundingClientRect();
    const result = {
      width: rect.width,
      height: rect.height
    };
    stringCache.set(cacheKey, result);
    if (stringCache.size + 1 > MAX_CACHE_NUM) {
      stringCache.clear();
    }
    if (false) {
      measurementSpan.textContent = "";
    } else {
      if (domCleanTimeout) {
        clearTimeout(domCleanTimeout);
      }
      domCleanTimeout = setTimeout(() => {
        measurementSpan.textContent = "";
      }, 0);
    }
    return result;
  } catch {
    return {
      width: 0,
      height: 0
    };
  }
};

// node_modules/@mui/x-charts/esm/internals/getWordsByLines.js
function getWordsByLines({
  style,
  needsComputation,
  text
}) {
  return text.split("\n").map((subText) => _extends({
    text: subText
  }, needsComputation ? getStringSize(subText, style) : {
    width: 0,
    height: 0
  }));
}

// node_modules/@mui/x-charts/esm/hooks/useIsHydrated.js
var React22 = __toESM(require_react(), 1);
function useIsHydrated() {
  const [isHydrated, setIsHydrated] = React22.useState(typeof window !== "undefined" || false);
  React22.useEffect(() => {
    setIsHydrated(true);
  }, []);
  return isHydrated;
}

// node_modules/@mui/x-charts/esm/ChartsText/ChartsText.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var _excluded3 = ["x", "y", "style", "text", "ownerState"];
var _excluded22 = ["angle", "textAnchor", "dominantBaseline"];
function ChartsText(props) {
  const {
    x,
    y,
    style: styleProps,
    text
  } = props, textProps = _objectWithoutPropertiesLoose(props, _excluded3);
  const _ref = styleProps ?? {}, {
    angle,
    textAnchor,
    dominantBaseline
  } = _ref, style = _objectWithoutPropertiesLoose(_ref, _excluded22);
  const isHydrated = useIsHydrated();
  const wordsByLines = React23.useMemo(() => getWordsByLines({
    style,
    needsComputation: isHydrated && text.includes("\n"),
    text
  }), [style, text, isHydrated]);
  let startDy;
  switch (dominantBaseline) {
    case "hanging":
    case "text-before-edge":
      startDy = 0;
      break;
    case "central":
      startDy = (wordsByLines.length - 1) / 2 * -wordsByLines[0].height;
      break;
    default:
      startDy = (wordsByLines.length - 1) * -wordsByLines[0].height;
      break;
  }
  return (0, import_jsx_runtime4.jsx)("text", _extends({}, textProps, {
    transform: angle ? `rotate(${angle}, ${x}, ${y})` : void 0,
    x,
    y,
    textAnchor,
    dominantBaseline,
    style,
    children: wordsByLines.map((line, index) => (0, import_jsx_runtime4.jsx)("tspan", {
      x,
      dy: `${index === 0 ? startDy : wordsByLines[0].height}px`,
      dominantBaseline,
      children: line.text
    }, index))
  }));
}
true ? ChartsText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Height of a text line (in `em`).
   */
  lineHeight: import_prop_types3.default.number,
  /**
   * If `true`, the line width is computed.
   * @default false
   */
  needsComputation: import_prop_types3.default.bool,
  ownerState: import_prop_types3.default.any,
  /**
   * Style applied to text elements.
   */
  style: import_prop_types3.default.object,
  /**
   * Text displayed.
   */
  text: import_prop_types3.default.string.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var getTextParams = ({
  top: top2,
  height,
  spacingY,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        y: top2 + spacingY,
        style: {
          dominantBaseline: "hanging",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        y: top2 + height - spacingY,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    default:
      return {
        y: top2 + height / 2,
        style: {
          dominantBaseline: "central",
          textAnchor: "start"
        }
      };
  }
};
function getXReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "vertical"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsXReferenceLine(props) {
  const {
    x,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    top: top2,
    height
  } = useDrawingArea();
  const xAxisScale = useXScale(axisId);
  const xPosition = xAxisScale(x);
  if (xPosition === void 0) {
    if (true) {
      warnOnce(`MUI X Charts: the value ${x} does not exist in the data of x axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${xPosition} ${top2} l 0 ${height}`;
  const classes = getXReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? spacing.x ?? 0 : spacing;
  const spacingY = typeof spacing === "object" ? spacing.y ?? 0 : spacing;
  const textParams = _extends({
    x: xPosition + spacingX,
    text: label,
    fontSize: 12
  }, getTextParams({
    top: top2,
    height,
    spacingY,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime5.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime5.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime5.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsYReferenceLine.js
var React25 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var getTextParams2 = ({
  left: left2,
  width,
  spacingX,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        x: left2 + spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        x: left2 + width - spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "end"
        }
      };
    default:
      return {
        x: left2 + width / 2,
        style: {
          dominantBaseline: "auto",
          textAnchor: "middle"
        }
      };
  }
};
function getYReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "horizontal"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsYReferenceLine(props) {
  const {
    y,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    left: left2,
    width
  } = useDrawingArea();
  const yAxisScale = useYScale(axisId);
  const yPosition = yAxisScale(y);
  if (yPosition === void 0) {
    if (true) {
      warnOnce(`MUI X Charts: the value ${y} does not exist in the data of y axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${left2} ${yPosition} l ${width} 0`;
  const classes = getYReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? spacing.x ?? 0 : spacing;
  const spacingY = typeof spacing === "object" ? spacing.y ?? 0 : spacing;
  const textParams = _extends({
    y: yPosition - spacingY,
    text: label,
    fontSize: 12
  }, getTextParams2({
    left: left2,
    width,
    spacingX,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime6.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime6.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime6.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function ChartsReferenceLine(props) {
  const {
    x,
    y
  } = props;
  if (x !== void 0 && y !== void 0) {
    throw new Error("MUI X Charts: The ChartsReferenceLine cannot have both `x` and `y` props set.");
  }
  if (x === void 0 && y === void 0) {
    throw new Error("MUI X Charts: The ChartsReferenceLine should have a value in `x` or `y` prop.");
  }
  if (x !== void 0) {
    return (0, import_jsx_runtime7.jsx)(ChartsXReferenceLine, _extends({}, props));
  }
  return (0, import_jsx_runtime7.jsx)(ChartsYReferenceLine, _extends({}, props));
}
true ? ChartsReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types4.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types4.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types4.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types4.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types4.default.object,
  /**
   * Additional space around the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default 5
   */
  spacing: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.shape({
    x: import_prop_types4.default.number,
    y: import_prop_types4.default.number
  })]),
  /**
   * The x value associated with the reference line.
   * If defined the reference line will be vertical.
   */
  x: import_prop_types4.default.oneOfType([import_prop_types4.default.instanceOf(Date), import_prop_types4.default.number, import_prop_types4.default.string]),
  /**
   * The y value associated with the reference line.
   * If defined the reference line will be horizontal.
   */
  y: import_prop_types4.default.oneOfType([import_prop_types4.default.instanceOf(Date), import_prop_types4.default.number, import_prop_types4.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxis/ChartsAxis.js
var React31 = __toESM(require_react(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsXAxis/ChartsXAxis.js
var React29 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
function isHostComponent(element) {
  return typeof element === "string";
}
var isHostComponent_default = isHostComponent;

// node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
function appendOwnerState(elementType, otherProps, ownerState) {
  if (elementType === void 0 || isHostComponent_default(elementType)) {
    return otherProps;
  }
  return {
    ...otherProps,
    ownerState: {
      ...otherProps.ownerState,
      ...ownerState
    }
  };
}
var appendOwnerState_default = appendOwnerState;

// node_modules/@mui/utils/node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
function extractEventHandlers(object, excludeKeys = []) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var extractEventHandlers_default = extractEventHandlers;

// node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
function omitEventHandlers(object) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var omitEventHandlers_default = omitEventHandlers;

// node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
function mergeSlotProps(parameters) {
  const {
    getSlotProps,
    additionalProps,
    externalSlotProps,
    externalForwardedProps,
    className
  } = parameters;
  if (!getSlotProps) {
    const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle2 = {
      ...additionalProps == null ? void 0 : additionalProps.style,
      ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
      ...externalSlotProps == null ? void 0 : externalSlotProps.style
    };
    const props2 = {
      ...additionalProps,
      ...externalForwardedProps,
      ...externalSlotProps
    };
    if (joinedClasses2.length > 0) {
      props2.className = joinedClasses2;
    }
    if (Object.keys(mergedStyle2).length > 0) {
      props2.style = mergedStyle2;
    }
    return {
      props: props2,
      internalRef: void 0
    };
  }
  const eventHandlers = extractEventHandlers_default({
    ...externalForwardedProps,
    ...externalSlotProps
  });
  const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
  const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
  const internalSlotProps = getSlotProps(eventHandlers);
  const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
  const mergedStyle = {
    ...internalSlotProps == null ? void 0 : internalSlotProps.style,
    ...additionalProps == null ? void 0 : additionalProps.style,
    ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
    ...externalSlotProps == null ? void 0 : externalSlotProps.style
  };
  const props = {
    ...internalSlotProps,
    ...additionalProps,
    ...otherPropsWithoutEventHandlers,
    ...componentsPropsWithoutEventHandlers
  };
  if (joinedClasses.length > 0) {
    props.className = joinedClasses;
  }
  if (Object.keys(mergedStyle).length > 0) {
    props.style = mergedStyle;
  }
  return {
    props,
    internalRef: internalSlotProps.ref
  };
}
var mergeSlotProps_default = mergeSlotProps;

// node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
function resolveComponentProps(componentProps, ownerState, slotState) {
  if (typeof componentProps === "function") {
    return componentProps(ownerState, slotState);
  }
  return componentProps;
}
var resolveComponentProps_default = resolveComponentProps;

// node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
function useSlotProps(parameters) {
  var _a;
  const {
    elementType,
    externalSlotProps,
    ownerState,
    skipResolvingSlotProps = false,
    ...other
  } = parameters;
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps_default({
    ...other,
    externalSlotProps: resolvedComponentsProps
  });
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_a = parameters.additionalProps) == null ? void 0 : _a.ref);
  const props = appendOwnerState_default(elementType, {
    ...mergedProps,
    ref
  }, ownerState);
  return props;
}
var useSlotProps_default = useSlotProps;

// node_modules/@mui/x-charts/esm/internals/clampAngle.js
function clampAngle(angle) {
  return (angle % 360 + 360) % 360;
}
var TWO_PI = 2 * Math.PI;
function clampAngleRad(angle) {
  return (angle % TWO_PI + TWO_PI) % TWO_PI;
}

// node_modules/@mui/x-charts/esm/internals/getGraphemeCount.js
var segmenter = typeof window !== "undefined" && "Intl" in window && "Segmenter" in Intl ? new Intl.Segmenter(void 0, {
  granularity: "grapheme"
}) : null;
function getGraphemeCountFallback(text) {
  return text.length;
}
function getGraphemeCountModern(text) {
  const segments = segmenter.segment(text);
  let count = 0;
  for (const _unused of segments) {
    count += 1;
  }
  return count;
}
var getGraphemeCount = segmenter ? getGraphemeCountModern : getGraphemeCountFallback;

// node_modules/@mui/x-charts/esm/internals/degToRad.js
function degToRad(degrees) {
  return degrees * (Math.PI / 180);
}

// node_modules/@mui/x-charts/esm/internals/sliceUntil.js
var segmenter2 = typeof window !== "undefined" && "Intl" in window && "Segmenter" in Intl ? new Intl.Segmenter(void 0, {
  granularity: "grapheme"
}) : null;
function sliceUntilFallback(text, endIndex) {
  return text.slice(0, endIndex);
}
function sliceUntilModern(text, endIndex) {
  const segments = segmenter2.segment(text);
  let newText = "";
  let i = 0;
  for (const segment of segments) {
    newText += segment.segment;
    i += 1;
    if (i >= endIndex) {
      break;
    }
  }
  return newText;
}
var sliceUntil = segmenter2 ? sliceUntilModern : sliceUntilFallback;

// node_modules/@mui/x-charts/esm/internals/ellipsize.js
var ELLIPSIS = "…";
function doesTextFitInRect(text, config) {
  const {
    width,
    height,
    measureText
  } = config;
  const angle = degToRad(config.angle);
  const textSize = measureText(text);
  const angledWidth = Math.abs(textSize.width * Math.cos(angle)) + Math.abs(textSize.height * Math.sin(angle));
  const angledHeight = Math.abs(textSize.width * Math.sin(angle)) + Math.abs(textSize.height * Math.cos(angle));
  return angledWidth <= width && angledHeight <= height;
}
function ellipsize(text, doesTextFit) {
  if (doesTextFit(text)) {
    return text;
  }
  let shortenedText = text;
  let step = 1;
  let by = 1 / 2;
  const graphemeCount = getGraphemeCount(text);
  let newLength = graphemeCount;
  let lastLength = graphemeCount;
  let longestFittingText = null;
  do {
    lastLength = newLength;
    newLength = Math.floor(graphemeCount * by);
    if (newLength === 0) {
      break;
    }
    shortenedText = sliceUntil(text, newLength).trim();
    const fits = doesTextFit(shortenedText + ELLIPSIS);
    step += 1;
    if (fits) {
      longestFittingText = shortenedText;
      by += 1 / 2 ** step;
    } else {
      by -= 1 / 2 ** step;
    }
  } while (Math.abs(newLength - lastLength) !== 1);
  return longestFittingText ? longestFittingText + ELLIPSIS : "";
}

// node_modules/@mui/x-charts/esm/hooks/useTicks.js
var React27 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/isInfinity.js
function isInfinity(v2) {
  return typeof v2 === "number" && !Number.isFinite(v2);
}

// node_modules/@mui/x-charts/esm/hooks/useTicks.js
var offsetRatio = {
  start: 0,
  extremities: 0,
  end: 1,
  middle: 0.5
};
function useTicks(options) {
  const {
    scale: scale2,
    tickNumber,
    valueFormatter,
    tickInterval,
    tickPlacement = "extremities",
    tickLabelPlacement: tickLabelPlacementProp,
    direction
  } = options;
  const {
    instance
  } = useChartContext();
  return React27.useMemo(() => {
    if (isBandScale(scale2)) {
      const domain2 = scale2.domain();
      const tickLabelPlacement2 = tickLabelPlacementProp ?? "middle";
      if (scale2.bandwidth() > 0) {
        const filteredDomain2 = typeof tickInterval === "function" && domain2.filter(tickInterval) || typeof tickInterval === "object" && tickInterval || domain2;
        return [...filteredDomain2.map((value) => ({
          value,
          formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
            location: "tick",
            scale: scale2
          })) ?? `${value}`,
          offset: scale2(value) - (scale2.step() - scale2.bandwidth()) / 2 + offsetRatio[tickPlacement] * scale2.step(),
          labelOffset: tickLabelPlacement2 === "tick" ? 0 : scale2.step() * (offsetRatio[tickLabelPlacement2] - offsetRatio[tickPlacement])
        })), ...tickPlacement === "extremities" ? [{
          formattedValue: void 0,
          offset: scale2.range()[1],
          labelOffset: 0
        }] : []];
      }
      const filteredDomain = typeof tickInterval === "function" && domain2.filter(tickInterval) || typeof tickInterval === "object" && tickInterval || domain2;
      return filteredDomain.map((value) => ({
        value,
        formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
          location: "tick",
          scale: scale2
        })) ?? `${value}`,
        offset: scale2(value),
        labelOffset: 0
      }));
    }
    const domain = scale2.domain();
    if (domain.some(isInfinity)) {
      return [];
    }
    const tickLabelPlacement = tickLabelPlacementProp;
    const ticks = typeof tickInterval === "object" ? tickInterval : scale2.ticks(tickNumber);
    const visibleTicks = [];
    for (let i = 0; i < ticks.length; i += 1) {
      const value = ticks[i];
      const offset2 = scale2(value);
      const isInside = direction === "x" ? instance.isXInside(offset2) : instance.isYInside(offset2);
      if (isInside) {
        visibleTicks.push({
          value,
          formattedValue: (valueFormatter == null ? void 0 : valueFormatter(value, {
            location: "tick",
            scale: scale2
          })) ?? scale2.tickFormat(tickNumber)(value),
          offset: offset2,
          // Allowing the label to be placed in the middle of a continuous scale is weird.
          // But it is useful in some cases, like funnel categories with a linear scale.
          labelOffset: tickLabelPlacement === "middle" ? scale2(ticks[i - 1] ?? 0) - (offset2 + scale2(ticks[i - 1] ?? 0)) / 2 : 0
        });
      }
    }
    return visibleTicks;
  }, [scale2, tickLabelPlacementProp, tickInterval, tickNumber, tickPlacement, valueFormatter, direction, instance]);
}

// node_modules/@mui/x-charts/esm/ChartsAxis/axisClasses.js
function getAxisUtilityClass(slot) {
  return generateUtilityClass("MuiChartsAxis", slot);
}
var axisClasses = generateUtilityClasses("MuiChartsAxis", ["root", "line", "tickContainer", "tick", "tickLabel", "label", "directionX", "directionY", "top", "bottom", "left", "right", "id"]);

// node_modules/@mui/x-charts/esm/internals/components/AxisSharedComponents.js
var AxisRoot = styled_default("g", {
  name: "MuiChartsAxis",
  slot: "Root"
})(({
  theme
}) => ({
  [`& .${axisClasses.tickLabel}`]: _extends({}, theme.typography.caption, {
    fill: (theme.vars || theme).palette.text.primary
  }),
  [`& .${axisClasses.label}`]: {
    fill: (theme.vars || theme).palette.text.primary
  },
  [`& .${axisClasses.line}`]: {
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1
  },
  [`& .${axisClasses.tick}`]: {
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges"
  }
}));

// node_modules/@mui/x-charts/esm/internals/geometry.js
var ANGLE_APPROX = 5;
function getMinXTranslation(width, height, angle = 0) {
  if (true) {
    if (angle > 90 && angle < -90) {
      warnOnce([`MUI X Charts: It seems you applied an angle larger than 90° or smaller than -90° to an axis text.`, `This could cause some text overlapping.`, `If you encounter a use case where it's needed, please open an issue.`]);
    }
  }
  const standardAngle = Math.min(Math.abs(angle) % 180, Math.abs(Math.abs(angle) % 180 - 180) % 180);
  if (standardAngle < ANGLE_APPROX) {
    return width;
  }
  if (standardAngle > 90 - ANGLE_APPROX) {
    return height;
  }
  const radAngle = deg2rad(standardAngle);
  const angleSwich = Math.atan2(height, width);
  if (radAngle < angleSwich) {
    return width / Math.cos(radAngle);
  }
  return height / Math.sin(radAngle);
}

// node_modules/@mui/x-charts/esm/hooks/useMounted.js
var React28 = __toESM(require_react(), 1);
function useMounted(defer = false) {
  const [mountedState, setMountedState] = React28.useState(false);
  useEnhancedEffect_default(() => {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React28.useEffect(() => {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return mountedState;
}

// node_modules/@mui/x-charts/esm/ChartsText/defaultTextPlacement.js
function getDefaultTextAnchor(angle) {
  const adjustedAngle = clampAngle(angle);
  if (adjustedAngle <= 30 || adjustedAngle >= 330) {
    return "middle";
  }
  if (adjustedAngle <= 210 && adjustedAngle >= 150) {
    return "middle";
  }
  if (adjustedAngle <= 180) {
    return "end";
  }
  return "start";
}
function getDefaultBaseline(angle) {
  const adjustedAngle = clampAngle(angle);
  if (adjustedAngle <= 30 || adjustedAngle >= 330) {
    return "hanging";
  }
  if (adjustedAngle <= 210 && adjustedAngle >= 150) {
    return "auto";
  }
  return "central";
}

// node_modules/@mui/x-charts/esm/internals/invertTextAnchor.js
function invertTextAnchor(textAnchor) {
  switch (textAnchor) {
    case "start":
      return "end";
    case "end":
      return "start";
    default:
      return textAnchor;
  }
}

// node_modules/@mui/x-charts/esm/ChartsXAxis/ChartsXAxis.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var _excluded4 = ["scale", "tickNumber", "reverse"];
var useUtilityClasses = (ownerState) => {
  const {
    classes,
    position,
    id
  } = ownerState;
  const slots = {
    root: ["root", "directionX", position, `id-${id}`],
    line: ["line"],
    tickContainer: ["tickContainer"],
    tick: ["tick"],
    tickLabel: ["tickLabel"],
    label: ["label"]
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
var TICK_LABEL_GAP = 3;
var AXIS_LABEL_TICK_LABEL_GAP = 4;
function getVisibleLabels(xTicks, {
  tickLabelStyle: style,
  tickLabelInterval,
  tickLabelMinGap,
  reverse,
  isMounted,
  isXInside
}) {
  const getTickLabelSize = (tick) => {
    if (!isMounted || tick.formattedValue === void 0) {
      return {
        width: 0,
        height: 0
      };
    }
    const tickSizes = getWordsByLines({
      style,
      needsComputation: true,
      text: tick.formattedValue
    });
    return {
      width: Math.max(...tickSizes.map((size) => size.width)),
      height: Math.max(tickSizes.length * tickSizes[0].height)
    };
  };
  if (typeof tickLabelInterval === "function") {
    return new Set(xTicks.filter((item, index) => tickLabelInterval(item.value, index)));
  }
  let previousTextLimit = 0;
  const direction = reverse ? -1 : 1;
  return new Set(xTicks.filter((item, labelIndex) => {
    const {
      offset: offset2,
      labelOffset
    } = item;
    const textPosition = offset2 + labelOffset;
    if (labelIndex > 0 && direction * textPosition < direction * (previousTextLimit + tickLabelMinGap)) {
      return false;
    }
    if (!isXInside(textPosition)) {
      return false;
    }
    const {
      width,
      height
    } = getTickLabelSize(item);
    const distance = getMinXTranslation(width, height, style == null ? void 0 : style.angle);
    const currentTextLimit = textPosition - direction * distance / 2;
    if (labelIndex > 0 && direction * currentTextLimit < direction * (previousTextLimit + tickLabelMinGap)) {
      return false;
    }
    previousTextLimit = textPosition + direction * distance / 2;
    return true;
  }));
}
function shortenLabels(visibleLabels, drawingArea, maxHeight, isRtl, tickLabelStyle) {
  const shortenedLabels = /* @__PURE__ */ new Map();
  const angle = clampAngle((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0);
  let leftBoundFactor = 1;
  let rightBoundFactor = 1;
  if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "start") {
    leftBoundFactor = Infinity;
    rightBoundFactor = 1;
  } else if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "end") {
    leftBoundFactor = 1;
    rightBoundFactor = Infinity;
  } else {
    leftBoundFactor = 2;
    rightBoundFactor = 2;
  }
  if (angle > 90 && angle < 270) {
    [leftBoundFactor, rightBoundFactor] = [rightBoundFactor, leftBoundFactor];
  }
  if (isRtl) {
    [leftBoundFactor, rightBoundFactor] = [rightBoundFactor, leftBoundFactor];
  }
  for (const item of visibleLabels) {
    if (item.formattedValue) {
      const width = Math.min((item.offset + item.labelOffset) * leftBoundFactor, (drawingArea.left + drawingArea.width + drawingArea.right - item.offset - item.labelOffset) * rightBoundFactor);
      const doesTextFit = (text) => doesTextFitInRect(text, {
        width,
        height: maxHeight,
        angle,
        measureText: (string) => getStringSize(string, tickLabelStyle)
      });
      shortenedLabels.set(item, ellipsize(item.formattedValue.toString(), doesTextFit));
    }
  }
  return shortenedLabels;
}
var XAxisRoot = styled_default(AxisRoot, {
  name: "MuiChartsXAxis",
  slot: "Root"
})({});
var defaultProps = {
  disableLine: false,
  disableTicks: false,
  tickSize: 6,
  tickLabelMinGap: 4
};
function ChartsXAxis(inProps) {
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const _xAxis = xAxis[inProps.axisId ?? xAxisIds[0]], {
    scale: xScale,
    tickNumber,
    reverse
  } = _xAxis, settings = _objectWithoutPropertiesLoose(_xAxis, _excluded4);
  const isMounted = useMounted();
  const themedProps = useThemeProps({
    props: _extends({}, settings, inProps),
    name: "MuiChartsXAxis"
  });
  const defaultizedProps = _extends({}, defaultProps, themedProps);
  const {
    position,
    disableLine,
    disableTicks,
    tickLabelStyle,
    label,
    labelStyle,
    tickSize: tickSizeProp,
    valueFormatter,
    slots,
    slotProps,
    tickInterval,
    tickLabelInterval,
    tickPlacement,
    tickLabelPlacement,
    tickLabelMinGap,
    sx,
    offset: offset2,
    height: axisHeight
  } = defaultizedProps;
  const theme = useTheme();
  const isRtl = useRtl();
  const classes = useUtilityClasses(defaultizedProps);
  const drawingArea = useDrawingArea();
  const {
    left: left2,
    top: top2,
    width,
    height
  } = drawingArea;
  const {
    instance
  } = useChartContext();
  const isHydrated = useIsHydrated();
  const tickSize = disableTicks ? 4 : tickSizeProp;
  const positionSign = position === "bottom" ? 1 : -1;
  const Line = (slots == null ? void 0 : slots.axisLine) ?? "line";
  const Tick = (slots == null ? void 0 : slots.axisTick) ?? "line";
  const TickLabel = (slots == null ? void 0 : slots.axisTickLabel) ?? ChartsText;
  const Label = (slots == null ? void 0 : slots.axisLabel) ?? ChartsText;
  const defaultTextAnchor = getDefaultTextAnchor((position === "bottom" ? 0 : 180) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const defaultDominantBaseline = getDefaultBaseline((position === "bottom" ? 0 : 180) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const axisTickLabelProps = useSlotProps_default({
    elementType: TickLabel,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisTickLabel,
    additionalProps: {
      style: _extends({}, theme.typography.caption, {
        fontSize: 12,
        lineHeight: 1.25,
        textAnchor: isRtl ? invertTextAnchor(defaultTextAnchor) : defaultTextAnchor,
        dominantBaseline: defaultDominantBaseline
      }, tickLabelStyle)
    },
    className: classes.tickLabel,
    ownerState: {}
  });
  const xTicks = useTicks({
    scale: xScale,
    tickNumber,
    valueFormatter,
    tickInterval,
    tickPlacement,
    tickLabelPlacement,
    direction: "x"
  });
  const visibleLabels = getVisibleLabels(xTicks, {
    tickLabelStyle: axisTickLabelProps.style,
    tickLabelInterval,
    tickLabelMinGap,
    reverse,
    isMounted,
    isXInside: instance.isXInside
  });
  const axisLabelProps = useSlotProps_default({
    elementType: Label,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLabel,
    additionalProps: {
      style: _extends({}, theme.typography.body1, {
        lineHeight: 1,
        fontSize: 14,
        textAnchor: "middle",
        dominantBaseline: position === "bottom" ? "text-after-edge" : "text-before-edge"
      }, labelStyle)
    },
    ownerState: {}
  });
  const domain = xScale.domain();
  const ordinalAxis = isBandScale(xScale);
  if (ordinalAxis && domain.length === 0 || !ordinalAxis && domain.some(isInfinity) || position === "none") {
    return null;
  }
  const labelHeight = label ? getStringSize(label, axisLabelProps.style).height : 0;
  const labelRefPoint = {
    x: left2 + width / 2,
    y: positionSign * axisHeight
  };
  const tickLabelsMaxHeight = Math.max(0, axisHeight - (label ? labelHeight + AXIS_LABEL_TICK_LABEL_GAP : 0) - tickSize - TICK_LABEL_GAP);
  const tickLabels = isHydrated ? shortenLabels(visibleLabels, drawingArea, tickLabelsMaxHeight, isRtl, axisTickLabelProps.style) : new Map(Array.from(visibleLabels).map((item) => [item, item.formattedValue]));
  return (0, import_jsx_runtime8.jsxs)(XAxisRoot, {
    transform: `translate(0, ${position === "bottom" ? top2 + height + offset2 : top2 - offset2})`,
    className: classes.root,
    sx,
    children: [!disableLine && (0, import_jsx_runtime8.jsx)(Line, _extends({
      x1: left2,
      x2: left2 + width,
      className: classes.line
    }, slotProps == null ? void 0 : slotProps.axisLine)), xTicks.map((item, index) => {
      const {
        offset: tickOffset,
        labelOffset
      } = item;
      const xTickLabel = labelOffset ?? 0;
      const yTickLabel = positionSign * (tickSize + TICK_LABEL_GAP);
      const showTick = instance.isXInside(tickOffset);
      const tickLabel = tickLabels.get(item);
      const showTickLabel = visibleLabels.has(item);
      return (0, import_jsx_runtime8.jsxs)("g", {
        transform: `translate(${tickOffset}, 0)`,
        className: classes.tickContainer,
        children: [!disableTicks && showTick && (0, import_jsx_runtime8.jsx)(Tick, _extends({
          y2: positionSign * tickSize,
          className: classes.tick
        }, slotProps == null ? void 0 : slotProps.axisTick)), tickLabel !== void 0 && showTickLabel && (0, import_jsx_runtime8.jsx)(TickLabel, _extends({
          x: xTickLabel,
          y: yTickLabel
        }, axisTickLabelProps, {
          text: tickLabel
        }))]
      }, index);
    }), label && (0, import_jsx_runtime8.jsx)("g", {
      className: classes.label,
      children: (0, import_jsx_runtime8.jsx)(Label, _extends({}, labelRefPoint, axisLabelProps, {
        text: label
      }))
    })]
  });
}
true ? ChartsXAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  axis: import_prop_types5.default.oneOf(["x"]),
  /**
   * The id of the axis to render.
   * If undefined, it will be the first defined axis.
   */
  axisId: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types5.default.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: import_prop_types5.default.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: import_prop_types5.default.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: import_prop_types5.default.string,
  /**
   * The label of the axis.
   */
  label: import_prop_types5.default.string,
  /**
   * The style applied to the axis label.
   */
  labelStyle: import_prop_types5.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types5.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types5.default.object,
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: import_prop_types5.default.string,
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  /**
   * Defines which ticks are displayed.
   * Its value can be:
   * - 'auto' In such case the ticks are computed based on axis scale and other parameters.
   * - a filtering function of the form `(value, index) => boolean` which is available only if the axis has "point" scale.
   * - an array containing the values where ticks should be displayed.
   * @see See {@link https://mui.com/x/react-charts/axis/#fixed-tick-positions}
   * @default 'auto'
   */
  tickInterval: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.array, import_prop_types5.default.func]),
  /**
   * Defines which ticks get its label displayed. Its value can be:
   * - 'auto' In such case, labels are displayed if they do not overlap with the previous one.
   * - a filtering function of the form (value, index) => boolean. Warning: the index is tick index, not data ones.
   * @default 'auto'
   */
  tickLabelInterval: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.func]),
  /**
   * The minimum gap in pixels between two tick labels.
   * If two tick labels are closer than this minimum gap, one of them will be hidden.
   * @default 4
   */
  tickLabelMinGap: import_prop_types5.default.number,
  /**
   * The placement of ticks label. Can be the middle of the band, or the tick position.
   * Only used if scale is 'band'.
   * @default 'middle'
   */
  tickLabelPlacement: import_prop_types5.default.oneOf(["middle", "tick"]),
  /**
   * The style applied to ticks text.
   */
  tickLabelStyle: import_prop_types5.default.object,
  /**
   * Maximal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMaxStep: import_prop_types5.default.number,
  /**
   * Minimal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMinStep: import_prop_types5.default.number,
  /**
   * The number of ticks. This number is not guaranteed.
   * Not supported by categorical axis (band, points).
   */
  tickNumber: import_prop_types5.default.number,
  /**
   * The placement of ticks in regard to the band interval.
   * Only used if scale is 'band'.
   * @default 'extremities'
   */
  tickPlacement: import_prop_types5.default.oneOf(["end", "extremities", "middle", "start"]),
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: import_prop_types5.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsYAxis/ChartsYAxis.js
var React30 = __toESM(require_react(), 1);
var import_prop_types6 = __toESM(require_prop_types(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var _excluded5 = ["scale", "tickNumber"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes,
    position,
    id
  } = ownerState;
  const slots = {
    root: ["root", "directionY", position, `id-${id}`],
    line: ["line"],
    tickContainer: ["tickContainer"],
    tick: ["tick"],
    tickLabel: ["tickLabel"],
    label: ["label"]
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
var TICK_LABEL_GAP2 = 2;
var AXIS_LABEL_TICK_LABEL_GAP2 = 2;
function shortenLabels2(visibleLabels, drawingArea, maxWidth, isRtl, tickLabelStyle) {
  const shortenedLabels = /* @__PURE__ */ new Map();
  const angle = clampAngle((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0);
  let topBoundFactor = 1;
  let bottomBoundFactor = 1;
  if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "start") {
    topBoundFactor = Infinity;
    bottomBoundFactor = 1;
  } else if ((tickLabelStyle == null ? void 0 : tickLabelStyle.textAnchor) === "end") {
    topBoundFactor = 1;
    bottomBoundFactor = Infinity;
  } else {
    topBoundFactor = 2;
    bottomBoundFactor = 2;
  }
  if (angle > 180) {
    [topBoundFactor, bottomBoundFactor] = [bottomBoundFactor, topBoundFactor];
  }
  if (isRtl) {
    [topBoundFactor, bottomBoundFactor] = [bottomBoundFactor, topBoundFactor];
  }
  for (const item of visibleLabels) {
    if (item.formattedValue) {
      const height = Math.min((item.offset + item.labelOffset) * topBoundFactor, (drawingArea.top + drawingArea.height + drawingArea.bottom - item.offset - item.labelOffset) * bottomBoundFactor);
      const doesTextFit = (text) => doesTextFitInRect(text, {
        width: maxWidth,
        height,
        angle,
        measureText: (string) => getStringSize(string, tickLabelStyle)
      });
      shortenedLabels.set(item, ellipsize(item.formattedValue.toString(), doesTextFit));
    }
  }
  return shortenedLabels;
}
var YAxisRoot = styled_default(AxisRoot, {
  name: "MuiChartsYAxis",
  slot: "Root"
})({});
var defaultProps2 = {
  disableLine: false,
  disableTicks: false,
  tickSize: 6
};
function ChartsYAxis(inProps) {
  const {
    yAxisIds,
    yAxis
  } = useYAxes();
  const _yAxis = yAxis[inProps.axisId ?? yAxisIds[0]], {
    scale: yScale,
    tickNumber
  } = _yAxis, settings = _objectWithoutPropertiesLoose(_yAxis, _excluded5);
  const themedProps = useThemeProps({
    props: _extends({}, settings, inProps),
    name: "MuiChartsYAxis"
  });
  const defaultizedProps = _extends({}, defaultProps2, themedProps);
  const {
    position,
    disableLine,
    disableTicks,
    label,
    labelStyle,
    tickLabelStyle,
    tickSize: tickSizeProp,
    valueFormatter,
    slots,
    slotProps,
    tickPlacement,
    tickLabelPlacement,
    tickInterval,
    tickLabelInterval,
    sx,
    offset: offset2,
    width: axisWidth
  } = defaultizedProps;
  const theme = useTheme();
  const isRtl = useRtl();
  const isHydrated = useIsHydrated();
  const classes = useUtilityClasses2(defaultizedProps);
  const {
    instance
  } = useChartContext();
  const drawingArea = useDrawingArea();
  const {
    left: left2,
    top: top2,
    width,
    height
  } = drawingArea;
  const tickSize = disableTicks ? 4 : tickSizeProp;
  const yTicks = useTicks({
    scale: yScale,
    tickNumber,
    valueFormatter,
    tickPlacement,
    tickLabelPlacement,
    tickInterval,
    direction: "y"
  });
  const positionSign = position === "right" ? 1 : -1;
  const tickFontSize = typeof (tickLabelStyle == null ? void 0 : tickLabelStyle.fontSize) === "number" ? tickLabelStyle.fontSize : 12;
  const Line = (slots == null ? void 0 : slots.axisLine) ?? "line";
  const Tick = (slots == null ? void 0 : slots.axisTick) ?? "line";
  const TickLabel = (slots == null ? void 0 : slots.axisTickLabel) ?? ChartsText;
  const Label = (slots == null ? void 0 : slots.axisLabel) ?? ChartsText;
  const defaultTextAnchor = getDefaultTextAnchor((position === "right" ? -90 : 90) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const defaultDominantBaseline = getDefaultBaseline((position === "right" ? -90 : 90) - ((tickLabelStyle == null ? void 0 : tickLabelStyle.angle) ?? 0));
  const axisTickLabelProps = useSlotProps_default({
    elementType: TickLabel,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisTickLabel,
    additionalProps: {
      style: _extends({}, theme.typography.caption, {
        fontSize: tickFontSize,
        textAnchor: isRtl ? invertTextAnchor(defaultTextAnchor) : defaultTextAnchor,
        dominantBaseline: defaultDominantBaseline
      }, tickLabelStyle)
    },
    className: classes.tickLabel,
    ownerState: {}
  });
  const axisLabelProps = useSlotProps_default({
    elementType: Label,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLabel,
    additionalProps: {
      style: _extends({}, theme.typography.body1, {
        lineHeight: 1,
        fontSize: 14,
        angle: positionSign * 90,
        textAnchor: "middle",
        dominantBaseline: "text-before-edge"
      }, labelStyle)
    },
    ownerState: {}
  });
  const lineSlotProps = useSlotProps_default({
    elementType: Line,
    externalSlotProps: slotProps == null ? void 0 : slotProps.axisLine,
    additionalProps: {
      strokeLinecap: "square"
    },
    ownerState: {}
  });
  const domain = yScale.domain();
  const ordinalAxis = isBandScale(yScale);
  if (ordinalAxis && domain.length === 0 || !ordinalAxis && domain.some(isInfinity) || position === "none") {
    return null;
  }
  const labelRefPoint = {
    x: positionSign * axisWidth,
    y: top2 + height / 2
  };
  const tickLabelsMaxWidth = Math.max(0, axisWidth - (label ? getStringSize(label, axisLabelProps.style).height + AXIS_LABEL_TICK_LABEL_GAP2 : 0) - tickSize - TICK_LABEL_GAP2);
  const tickLabels = isHydrated ? shortenLabels2(yTicks, drawingArea, tickLabelsMaxWidth, isRtl, axisTickLabelProps.style) : new Map(Array.from(yTicks).map((item) => [item, item.formattedValue]));
  return (0, import_jsx_runtime9.jsxs)(YAxisRoot, {
    transform: `translate(${position === "right" ? left2 + width + offset2 : left2 - offset2}, 0)`,
    className: classes.root,
    sx,
    children: [!disableLine && (0, import_jsx_runtime9.jsx)(Line, _extends({
      y1: top2,
      y2: top2 + height,
      className: classes.line
    }, lineSlotProps)), yTicks.map((item, index) => {
      const {
        offset: tickOffset,
        labelOffset,
        value
      } = item;
      const xTickLabel = positionSign * (tickSize + TICK_LABEL_GAP2);
      const yTickLabel = labelOffset;
      const skipLabel = typeof tickLabelInterval === "function" && !(tickLabelInterval == null ? void 0 : tickLabelInterval(value, index));
      const showLabel = instance.isYInside(tickOffset);
      const tickLabel = tickLabels.get(item);
      if (!showLabel) {
        return null;
      }
      return (0, import_jsx_runtime9.jsxs)("g", {
        transform: `translate(0, ${tickOffset})`,
        className: classes.tickContainer,
        children: [!disableTicks && (0, import_jsx_runtime9.jsx)(Tick, _extends({
          x2: positionSign * tickSize,
          className: classes.tick
        }, slotProps == null ? void 0 : slotProps.axisTick)), tickLabel !== void 0 && !skipLabel && (0, import_jsx_runtime9.jsx)(TickLabel, _extends({
          x: xTickLabel,
          y: yTickLabel,
          text: tickLabel
        }, axisTickLabelProps))]
      }, index);
    }), label && isHydrated && (0, import_jsx_runtime9.jsx)("g", {
      className: classes.label,
      children: (0, import_jsx_runtime9.jsx)(Label, _extends({}, labelRefPoint, axisLabelProps, {
        text: label
      }))
    })]
  });
}
true ? ChartsYAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  axis: import_prop_types6.default.oneOf(["y"]),
  /**
   * The id of the axis to render.
   * If undefined, it will be the first defined axis.
   */
  axisId: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types6.default.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: import_prop_types6.default.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: import_prop_types6.default.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: import_prop_types6.default.string,
  /**
   * The label of the axis.
   */
  label: import_prop_types6.default.string,
  /**
   * The style applied to the axis label.
   */
  labelStyle: import_prop_types6.default.object,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types6.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types6.default.object,
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: import_prop_types6.default.string,
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
  /**
   * Defines which ticks are displayed.
   * Its value can be:
   * - 'auto' In such case the ticks are computed based on axis scale and other parameters.
   * - a filtering function of the form `(value, index) => boolean` which is available only if the axis has "point" scale.
   * - an array containing the values where ticks should be displayed.
   * @see See {@link https://mui.com/x/react-charts/axis/#fixed-tick-positions}
   * @default 'auto'
   */
  tickInterval: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.array, import_prop_types6.default.func]),
  /**
   * Defines which ticks get its label displayed. Its value can be:
   * - 'auto' In such case, labels are displayed if they do not overlap with the previous one.
   * - a filtering function of the form (value, index) => boolean. Warning: the index is tick index, not data ones.
   * @default 'auto'
   */
  tickLabelInterval: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.func]),
  /**
   * The placement of ticks label. Can be the middle of the band, or the tick position.
   * Only used if scale is 'band'.
   * @default 'middle'
   */
  tickLabelPlacement: import_prop_types6.default.oneOf(["middle", "tick"]),
  /**
   * The style applied to ticks text.
   */
  tickLabelStyle: import_prop_types6.default.object,
  /**
   * Maximal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMaxStep: import_prop_types6.default.number,
  /**
   * Minimal step between two ticks.
   * When using time data, the value is assumed to be in ms.
   * Not supported by categorical axis (band, points).
   */
  tickMinStep: import_prop_types6.default.number,
  /**
   * The number of ticks. This number is not guaranteed.
   * Not supported by categorical axis (band, points).
   */
  tickNumber: import_prop_types6.default.number,
  /**
   * The placement of ticks in regard to the band interval.
   * Only used if scale is 'band'.
   * @default 'extremities'
   */
  tickPlacement: import_prop_types6.default.oneOf(["end", "extremities", "middle", "start"]),
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: import_prop_types6.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxis/ChartsAxis.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function ChartsAxis(props) {
  const {
    slots,
    slotProps
  } = props;
  const {
    xAxisIds,
    xAxis
  } = useXAxes();
  const {
    yAxisIds,
    yAxis
  } = useYAxes();
  return (0, import_jsx_runtime10.jsxs)(React31.Fragment, {
    children: [xAxisIds.map((axisId) => {
      if (!xAxis[axisId].position || xAxis[axisId].position === "none") {
        return null;
      }
      return (0, import_jsx_runtime10.jsx)(ChartsXAxis, {
        slots,
        slotProps,
        axisId
      }, axisId);
    }), yAxisIds.map((axisId) => {
      if (!yAxis[axisId].position || yAxis[axisId].position === "none") {
        return null;
      }
      return (0, import_jsx_runtime10.jsx)(ChartsYAxis, {
        slots,
        slotProps,
        axisId
      }, axisId);
    })]
  });
}
true ? ChartsAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types7.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types7.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsGrid.js
var React34 = __toESM(require_react(), 1);
var import_prop_types8 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsGrid/chartsGridClasses.js
function getChartsGridUtilityClass(slot) {
  return generateUtilityClass("MuiChartsGrid", slot);
}
var chartsGridClasses = generateUtilityClasses("MuiChartsGrid", ["root", "line", "horizontalLine", "verticalLine"]);

// node_modules/@mui/x-charts/esm/ChartsGrid/styledComponents.js
var GridRoot = styled_default("g", {
  name: "MuiChartsGrid",
  slot: "Root",
  overridesResolver: (props, styles) => [{
    [`&.${chartsGridClasses.verticalLine}`]: styles.verticalLine
  }, {
    [`&.${chartsGridClasses.horizontalLine}`]: styles.horizontalLine
  }, styles.root]
})({});
var GridLine = styled_default("line", {
  name: "MuiChartsGrid",
  slot: "Line"
})(({
  theme
}) => ({
  stroke: (theme.vars || theme).palette.divider,
  shapeRendering: "crispEdges",
  strokeWidth: 1
}));

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsVerticalGrid.js
var React32 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function ChartsGridVertical(props) {
  const {
    axis,
    start: start2,
    end: end2,
    classes
  } = props;
  const {
    scale: scale2,
    tickNumber,
    tickInterval
  } = axis;
  const xTicks = useTicks({
    scale: scale2,
    tickNumber,
    tickInterval,
    direction: "x"
  });
  return (0, import_jsx_runtime11.jsx)(React32.Fragment, {
    children: xTicks.map(({
      value,
      offset: offset2
    }) => {
      var _a;
      return (0, import_jsx_runtime11.jsx)(GridLine, {
        y1: start2,
        y2: end2,
        x1: offset2,
        x2: offset2,
        className: classes.verticalLine
      }, `vertical-${((_a = value.getTime) == null ? void 0 : _a.call(value)) ?? value}`);
    })
  });
}

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsHorizontalGrid.js
var React33 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
function ChartsGridHorizontal(props) {
  const {
    axis,
    start: start2,
    end: end2,
    classes
  } = props;
  const {
    scale: scale2,
    tickNumber,
    tickInterval
  } = axis;
  const yTicks = useTicks({
    scale: scale2,
    tickNumber,
    tickInterval,
    direction: "y"
  });
  return (0, import_jsx_runtime12.jsx)(React33.Fragment, {
    children: yTicks.map(({
      value,
      offset: offset2
    }) => {
      var _a;
      return (0, import_jsx_runtime12.jsx)(GridLine, {
        y1: offset2,
        y2: offset2,
        x1: start2,
        x2: end2,
        className: classes.horizontalLine
      }, `horizontal-${((_a = value.getTime) == null ? void 0 : _a.call(value)) ?? value}`);
    })
  });
}

// node_modules/@mui/x-charts/esm/ChartsGrid/ChartsGrid.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var _excluded6 = ["vertical", "horizontal"];
var useUtilityClasses3 = ({
  classes
}) => {
  const slots = {
    root: ["root"],
    verticalLine: ["line", "verticalLine"],
    horizontalLine: ["line", "horizontalLine"]
  };
  return composeClasses(slots, getChartsGridUtilityClass, classes);
};
function ChartsGrid(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiChartsGrid"
  });
  const drawingArea = useDrawingArea();
  const {
    vertical,
    horizontal
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const classes = useUtilityClasses3(props);
  const horizontalAxis = yAxis[yAxisIds[0]];
  const verticalAxis = xAxis[xAxisIds[0]];
  return (0, import_jsx_runtime13.jsxs)(GridRoot, _extends({}, other, {
    className: classes.root,
    children: [vertical && (0, import_jsx_runtime13.jsx)(ChartsGridVertical, {
      axis: verticalAxis,
      start: drawingArea.top,
      end: drawingArea.height + drawingArea.top,
      classes
    }), horizontal && (0, import_jsx_runtime13.jsx)(ChartsGridHorizontal, {
      axis: horizontalAxis,
      start: drawingArea.left,
      end: drawingArea.width + drawingArea.left,
      classes
    })]
  }));
}
true ? ChartsGrid.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types8.default.object,
  /**
   * Displays horizontal grid.
   */
  horizontal: import_prop_types8.default.bool,
  /**
   * Displays vertical grid.
   */
  vertical: import_prop_types8.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltip.js
var React52 = __toESM(require_react(), 1);
var import_prop_types21 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
function HTMLElementType(props, propName, componentName, location, propFullName) {
  if (false) {
    return null;
  }
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  if (propValue && propValue.nodeType !== 1) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
  }
  return null;
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsItemTooltipContent.js
var React41 = __toESM(require_react(), 1);
var import_prop_types13 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/node_modules/clsx/dist/clsx.mjs
function r2(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r2(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx2() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r2(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default2 = clsx2;

// node_modules/@mui/material/esm/Typography/Typography.js
var React38 = __toESM(require_react(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/node_modules/clsx/dist/clsx.mjs
function r3(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r3(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx3() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r3(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default3 = clsx3;

// node_modules/@mui/material/esm/zero-styled/index.js
var React36 = __toESM(require_react(), 1);

// node_modules/@mui/material/esm/GlobalStyles/GlobalStyles.js
var React35 = __toESM(require_react(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
function GlobalStyles(props) {
  return (0, import_jsx_runtime14.jsx)(GlobalStyles_default, {
    ...props,
    defaultTheme: defaultTheme_default,
    themeId: identifier_default
  });
}
true ? GlobalStyles.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: import_prop_types9.default.oneOfType([import_prop_types9.default.array, import_prop_types9.default.func, import_prop_types9.default.number, import_prop_types9.default.object, import_prop_types9.default.string, import_prop_types9.default.bool])
} : void 0;

// node_modules/@mui/material/esm/zero-styled/index.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
function internal_createExtendSxProp() {
  return extendSxProp;
}

// node_modules/@mui/material/esm/utils/memoTheme.js
var memoTheme = unstable_memoTheme;
var memoTheme_default = memoTheme;

// node_modules/@mui/material/esm/DefaultPropsProvider/DefaultPropsProvider.js
var React37 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function DefaultPropsProvider(props) {
  return (0, import_jsx_runtime16.jsx)(DefaultPropsProvider_default, {
    ...props
  });
}
true ? DefaultPropsProvider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types10.default.node,
  /**
   * @ignore
   */
  value: import_prop_types10.default.object.isRequired
} : void 0;
function useDefaultProps2(params) {
  return useDefaultProps(params);
}

// node_modules/@mui/material/esm/utils/capitalize.js
var capitalize_default = capitalize;

// node_modules/@mui/material/esm/utils/createSimplePaletteValueFilter.js
function hasCorrectMainProperty(obj) {
  return typeof obj.main === "string";
}
function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
  if (!hasCorrectMainProperty(obj)) {
    return false;
  }
  for (const value of additionalPropertiesToCheck) {
    if (!obj.hasOwnProperty(value) || typeof obj[value] !== "string") {
      return false;
    }
  }
  return true;
}
function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
}

// node_modules/@mui/material/esm/Typography/typographyClasses.js
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
var typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

// node_modules/@mui/material/esm/Typography/Typography.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var v6Colors = {
  primary: true,
  secondary: true,
  error: true,
  info: true,
  success: true,
  warning: true,
  textPrimary: true,
  textSecondary: true,
  textDisabled: true
};
var extendSxProp2 = internal_createExtendSxProp();
var useUtilityClasses4 = (ownerState) => {
  const {
    align,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
  };
  return composeClasses(slots, getTypographyUtilityClass, classes);
};
var TypographyRoot = styled_default("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
  }
})(memoTheme_default(({
  theme
}) => {
  var _a;
  return {
    margin: 0,
    variants: [{
      props: {
        variant: "inherit"
      },
      style: {
        // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
        font: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    }, ...Object.entries(theme.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
      props: {
        variant
      },
      style: value
    })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
      props: {
        color
      },
      style: {
        color: (theme.vars || theme).palette[color].main
      }
    })), ...Object.entries(((_a = theme.palette) == null ? void 0 : _a.text) || {}).filter(([, value]) => typeof value === "string").map(([color]) => ({
      props: {
        color: `text${capitalize_default(color)}`
      },
      style: {
        color: (theme.vars || theme).palette.text[color]
      }
    })), {
      props: ({
        ownerState
      }) => ownerState.align !== "inherit",
      style: {
        textAlign: "var(--Typography-textAlign)"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.noWrap,
      style: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.gutterBottom,
      style: {
        marginBottom: "0.35em"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.paragraph,
      style: {
        marginBottom: 16
      }
    }]
  };
}));
var defaultVariantMapping = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
};
var Typography = React38.forwardRef(function Typography2(inProps, ref) {
  const {
    color,
    ...themeProps
  } = useDefaultProps2({
    props: inProps,
    name: "MuiTypography"
  });
  const isSxColor = !v6Colors[color];
  const props = extendSxProp2({
    ...themeProps,
    ...isSxColor && {
      color
    }
  });
  const {
    align = "inherit",
    className,
    component,
    gutterBottom = false,
    noWrap = false,
    paragraph = false,
    variant = "body1",
    variantMapping = defaultVariantMapping,
    ...other
  } = props;
  const ownerState = {
    ...props,
    align,
    color,
    className,
    component,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    variantMapping
  };
  const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
  const classes = useUtilityClasses4(ownerState);
  return (0, import_jsx_runtime17.jsx)(TypographyRoot, {
    as: Component,
    ref,
    className: clsx_default3(classes.root, className),
    ...other,
    ownerState,
    style: {
      ...align !== "inherit" && {
        "--Typography-textAlign": align
      },
      ...other.style
    }
  });
});
true ? Typography.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: import_prop_types11.default.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: import_prop_types11.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types11.default.object,
  /**
   * @ignore
   */
  className: import_prop_types11.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), import_prop_types11.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types11.default.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: import_prop_types11.default.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: import_prop_types11.default.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   * @deprecated Use the `component` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  paragraph: import_prop_types11.default.bool,
  /**
   * @ignore
   */
  style: import_prop_types11.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types11.default.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: import_prop_types11.default.object
} : void 0;
var Typography_default = Typography;

// node_modules/@mui/x-charts/esm/ChartsTooltip/chartsTooltipClasses.js
function getChartsTooltipUtilityClass(slot) {
  return generateUtilityClass("MuiChartsTooltip", slot);
}
var chartsTooltipClasses = generateUtilityClasses("MuiChartsTooltip", ["root", "paper", "table", "row", "cell", "mark", "markContainer", "labelCell", "valueCell", "axisValueCell"]);
var useUtilityClasses5 = (classes) => {
  const slots = {
    root: ["root"],
    paper: ["paper"],
    table: ["table"],
    row: ["row"],
    cell: ["cell"],
    mark: ["mark"],
    markContainer: ["markContainer"],
    labelCell: ["labelCell"],
    valueCell: ["valueCell"],
    axisValueCell: ["axisValueCell"]
  };
  return composeClasses(slots, getChartsTooltipUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/ChartsTooltip/useItemTooltip.js
function useInternalItemTooltip() {
  var _a, _b, _c;
  const store = useStore();
  const identifier = useSelector(store, selectorChartsInteractionItem);
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  const series = useSeries();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const {
    rotationAxis,
    rotationAxisIds
  } = useRotationAxes();
  const {
    radiusAxis,
    radiusAxisIds
  } = useRadiusAxes();
  const xAxisId = series.xAxisId ?? xAxisIds[0];
  const yAxisId = series.yAxisId ?? yAxisIds[0];
  const zAxisId = series.zAxisId ?? zAxisIds[0];
  const rotationAxisId = series.rotationAxisId ?? rotationAxisIds[0];
  const radiusAxisId = series.radiusAxisId ?? radiusAxisIds[0];
  if (!identifier) {
    return null;
  }
  const itemSeries = (_a = series[identifier.type]) == null ? void 0 : _a.series[identifier.seriesId];
  if (!itemSeries) {
    return null;
  }
  const getColor6 = ((_c = (_b = seriesConfig5[itemSeries.type]).colorProcessor) == null ? void 0 : _c.call(_b, itemSeries, xAxisId && xAxis[xAxisId], yAxisId && yAxis[yAxisId], zAxisId && zAxis[zAxisId])) ?? (() => "");
  const axesConfig = {};
  if (xAxisId !== void 0) {
    axesConfig.x = xAxis[xAxisId];
  }
  if (yAxisId !== void 0) {
    axesConfig.y = yAxis[yAxisId];
  }
  if (rotationAxisId !== void 0) {
    axesConfig.rotation = rotationAxis[rotationAxisId];
  }
  if (radiusAxisId !== void 0) {
    axesConfig.radius = radiusAxis[radiusAxisId];
  }
  return seriesConfig5[itemSeries.type].tooltipGetter({
    series: itemSeries,
    axesConfig,
    getColor: getColor6,
    identifier
  });
}
var useItemTooltip = () => {
  return useInternalItemTooltip();
};
var useRadarItemTooltip = () => {
  return useInternalItemTooltip();
};

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipTable.js
var ChartsTooltipPaper = styled_default("div", {
  name: "MuiChartsTooltip",
  slot: "Container",
  overridesResolver: (props, styles) => styles.paper
  // FIXME: Inconsistent naming with slot
})(({
  theme
}) => {
  var _a;
  return {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    color: (theme.vars || theme).palette.text.primary,
    borderRadius: (_a = (theme.vars || theme).shape) == null ? void 0 : _a.borderRadius,
    border: `solid ${(theme.vars || theme).palette.divider} 1px`
  };
});
var ChartsTooltipTable = styled_default("table", {
  name: "MuiChartsTooltip",
  slot: "Table"
})(({
  theme
}) => ({
  borderSpacing: 0,
  [`& .${chartsTooltipClasses.markContainer}`]: {
    display: "inline-block",
    width: `calc(20px + ${theme.spacing(1.5)})`,
    verticalAlign: "middle"
  },
  "& caption": {
    borderBottom: `solid ${(theme.vars || theme).palette.divider} 1px`,
    padding: theme.spacing(0.5, 1.5),
    textAlign: "start",
    whiteSpace: "nowrap",
    "& span": {
      marginRight: theme.spacing(1.5)
    }
  }
}));
var ChartsTooltipRow = styled_default("tr", {
  name: "MuiChartsTooltip",
  slot: "Row"
})(({
  theme
}) => ({
  "tr:first-of-type& td": {
    paddingTop: theme.spacing(0.5)
  },
  "tr:last-of-type& td": {
    paddingBottom: theme.spacing(0.5)
  }
}));
var ChartsTooltipCell = styled_default(Typography_default, {
  name: "MuiChartsTooltip",
  slot: "Cell"
})(({
  theme
}) => ({
  verticalAlign: "middle",
  color: (theme.vars || theme).palette.text.secondary,
  textAlign: "start",
  [`&.${chartsTooltipClasses.cell}`]: {
    paddingLeft: theme.spacing(1),
    paddingRight: theme.spacing(1)
  },
  [`&.${chartsTooltipClasses.labelCell}`]: {
    fontWeight: theme.typography.fontWeightRegular
  },
  [`&.${chartsTooltipClasses.valueCell}, &.${chartsTooltipClasses.axisValueCell}`]: {
    color: (theme.vars || theme).palette.text.primary,
    fontWeight: theme.typography.fontWeightMedium
  },
  [`&.${chartsTooltipClasses.valueCell}`]: {
    paddingLeft: theme.spacing(1.5),
    paddingRight: theme.spacing(1.5)
  },
  "td:first-of-type&, th:first-of-type&": {
    paddingLeft: theme.spacing(1.5)
  },
  "td:last-of-type&, th:last-of-type&": {
    paddingRight: theme.spacing(1.5)
  }
}));

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelMark.js
var React40 = __toESM(require_react(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLabel/labelMarkClasses.js
function getLabelMarkUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabelMark", slot);
}
var labelMarkClasses = generateUtilityClasses("MuiChartsLabelMark", ["root", "line", "square", "circle", "mask", "fill"]);
var useUtilityClasses6 = (props) => {
  const {
    type
  } = props;
  const slots = {
    root: typeof type === "function" ? ["root"] : ["root", type],
    mask: ["mask"],
    fill: ["fill"]
  };
  return composeClasses(slots, getLabelMarkUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/internals/consumeThemeProps.js
var React39 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var consumeThemeProps = (name, options, InComponent) => React39.forwardRef(function ConsumeThemeInternal(props, ref) {
  var _a;
  const themedProps = useThemeProps({
    props,
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    name
  });
  const defaultProps3 = typeof options.defaultProps === "function" ? options.defaultProps(themedProps) : options.defaultProps ?? {};
  const outProps = resolveProps(defaultProps3, themedProps);
  const theme = useTheme();
  const classes = (_a = options.classesResolver) == null ? void 0 : _a.call(options, outProps, theme);
  const OutComponent = React39.forwardRef(InComponent);
  if (true)
    OutComponent.displayName = "OutComponent";
  if (true) {
    OutComponent.displayName = `consumeThemeProps(${name})`;
  }
  return (0, import_jsx_runtime18.jsx)(OutComponent, _extends({}, outProps, {
    classes,
    ref
  }));
});
if (true)
  consumeThemeProps.displayName = "consumeThemeProps";

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelMark.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var _excluded7 = ["type", "color", "className", "classes"];
var Root = styled_default("div", {
  name: "MuiChartsLabelMark",
  slot: "Root"
})(() => {
  return {
    display: "flex",
    width: 14,
    height: 14,
    [`&.${labelMarkClasses.line}`]: {
      width: 16,
      height: "unset",
      alignItems: "center",
      [`.${labelMarkClasses.mask}`]: {
        height: 4,
        width: "100%",
        borderRadius: 1,
        overflow: "hidden"
      }
    },
    [`&.${labelMarkClasses.square}`]: {
      height: 13,
      width: 13,
      borderRadius: 2,
      overflow: "hidden"
    },
    [`&.${labelMarkClasses.circle}`]: {
      height: 15,
      width: 15
    },
    svg: {
      display: "block"
    },
    [`& .${labelMarkClasses.mask} > *`]: {
      height: "100%",
      width: "100%"
    },
    [`& .${labelMarkClasses.mask}`]: {
      height: "100%",
      width: "100%"
    }
  };
});
var ChartsLabelMark = consumeThemeProps("MuiChartsLabelMark", {
  defaultProps: {
    type: "square"
  },
  classesResolver: useUtilityClasses6
}, function ChartsLabelMark2(props, ref) {
  const {
    type,
    color,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const Component = type;
  return (0, import_jsx_runtime19.jsx)(Root, _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ownerState: props,
    "aria-hidden": "true",
    ref
  }, other, {
    children: (0, import_jsx_runtime19.jsx)("div", {
      className: classes == null ? void 0 : classes.mask,
      children: typeof Component === "function" ? (0, import_jsx_runtime19.jsx)(Component, {
        className: classes == null ? void 0 : classes.fill,
        color
      }) : (0, import_jsx_runtime19.jsx)("svg", {
        viewBox: "0 0 24 24",
        preserveAspectRatio: type === "line" ? "none" : void 0,
        children: type === "circle" ? (0, import_jsx_runtime19.jsx)("circle", {
          className: classes == null ? void 0 : classes.fill,
          r: "12",
          cx: "12",
          cy: "12",
          fill: color
        }) : (0, import_jsx_runtime19.jsx)("rect", {
          className: classes == null ? void 0 : classes.fill,
          width: "24",
          height: "24",
          fill: color
        })
      })
    })
  }));
});
true ? ChartsLabelMark.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types12.default.object,
  /**
   * The color of the mark.
   */
  color: import_prop_types12.default.string,
  /**
   * The type of the mark.
   * @default 'square'
   */
  type: import_prop_types12.default.oneOf(["circle", "line", "square"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsItemTooltipContent.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function ChartsItemTooltipContent(props) {
  const {
    classes: propClasses,
    sx
  } = props;
  const tooltipData = useInternalItemTooltip();
  const classes = useUtilityClasses5(propClasses);
  if (!tooltipData) {
    return null;
  }
  if ("values" in tooltipData) {
    const {
      label: seriesLabel,
      color: color2,
      markType: markType2
    } = tooltipData;
    return (0, import_jsx_runtime20.jsx)(ChartsTooltipPaper, {
      sx,
      className: classes.paper,
      children: (0, import_jsx_runtime20.jsxs)(ChartsTooltipTable, {
        className: classes.table,
        children: [(0, import_jsx_runtime20.jsxs)(Typography_default, {
          component: "caption",
          children: [(0, import_jsx_runtime20.jsx)("div", {
            className: classes.markContainer,
            children: (0, import_jsx_runtime20.jsx)(ChartsLabelMark, {
              type: markType2,
              color: color2,
              className: classes.mark
            })
          }), seriesLabel]
        }), (0, import_jsx_runtime20.jsx)("tbody", {
          children: tooltipData.values.map(({
            formattedValue: formattedValue2,
            label: label2
          }) => (0, import_jsx_runtime20.jsxs)(ChartsTooltipRow, {
            className: classes.row,
            children: [(0, import_jsx_runtime20.jsx)(ChartsTooltipCell, {
              className: clsx_default2(classes.labelCell, classes.cell),
              component: "th",
              children: label2
            }), (0, import_jsx_runtime20.jsx)(ChartsTooltipCell, {
              className: clsx_default2(classes.valueCell, classes.cell),
              component: "td",
              children: formattedValue2
            })]
          }, label2))
        })]
      })
    });
  }
  const {
    color,
    label,
    formattedValue,
    markType
  } = tooltipData;
  return (0, import_jsx_runtime20.jsx)(ChartsTooltipPaper, {
    sx,
    className: classes.paper,
    children: (0, import_jsx_runtime20.jsx)(ChartsTooltipTable, {
      className: classes.table,
      children: (0, import_jsx_runtime20.jsx)("tbody", {
        children: (0, import_jsx_runtime20.jsxs)(ChartsTooltipRow, {
          className: classes.row,
          children: [(0, import_jsx_runtime20.jsxs)(ChartsTooltipCell, {
            className: clsx_default2(classes.labelCell, classes.cell),
            component: "th",
            children: [(0, import_jsx_runtime20.jsx)("div", {
              className: classes.markContainer,
              children: (0, import_jsx_runtime20.jsx)(ChartsLabelMark, {
                type: markType,
                color,
                className: classes.mark
              })
            }), label]
          }), (0, import_jsx_runtime20.jsx)(ChartsTooltipCell, {
            className: clsx_default2(classes.valueCell, classes.cell),
            component: "td",
            children: formattedValue
          })]
        })
      })
    })
  });
}
true ? ChartsItemTooltipContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types13.default.object,
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsAxisTooltipContent.js
var React44 = __toESM(require_react(), 1);
var import_prop_types14 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useColorProcessor.js
var React42 = __toESM(require_react(), 1);
function useColorProcessor(seriesType) {
  const store = useStore();
  const seriesConfig5 = useSelector(store, selectorChartSeriesConfig);
  const colorProcessors = React42.useMemo(() => {
    const rep = {};
    Object.keys(seriesConfig5).forEach((seriesT) => {
      rep[seriesT] = seriesConfig5[seriesT].colorProcessor;
    });
    return rep;
  }, [seriesConfig5]);
  if (!seriesType) {
    return colorProcessors;
  }
  return colorProcessors[seriesType];
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/utils.js
var React43 = __toESM(require_react(), 1);
function useMouseTracker() {
  const svgRef = useSvgRef();
  const [mousePosition, setMousePosition] = React43.useState(null);
  React43.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const controller = new AbortController();
    const handleOut = (event) => {
      if (event.pointerType !== "mouse") {
        setMousePosition(null);
      }
    };
    const handleMove = (event) => {
      setMousePosition({
        x: event.clientX,
        y: event.clientY,
        height: event.height,
        pointerType: event.pointerType
      });
    };
    element.addEventListener("pointerdown", handleMove, {
      signal: controller.signal
    });
    element.addEventListener("pointermove", handleMove, {
      signal: controller.signal
    });
    element.addEventListener("pointerup", handleOut, {
      signal: controller.signal
    });
    return () => {
      controller.abort();
    };
  }, [svgRef]);
  return mousePosition;
}
function usePointerType() {
  const svgRef = useSvgRef();
  const [pointerType, setPointerType] = React43.useState(null);
  React43.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const handleOut = (event) => {
      if (event.pointerType !== "mouse") {
        setPointerType(null);
      }
    };
    const handleEnter = (event) => {
      setPointerType({
        pointerType: event.pointerType
      });
    };
    element.addEventListener("pointerenter", handleEnter);
    element.addEventListener("pointerup", handleOut);
    return () => {
      element.removeEventListener("pointerenter", handleEnter);
      element.removeEventListener("pointerup", handleOut);
    };
  }, [svgRef]);
  return pointerType;
}
function utcFormatter(v2) {
  if (v2 instanceof Date) {
    return v2.toUTCString();
  }
  return v2.toLocaleString();
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/getAxisIndex.js
function getAxisIndex2(axisConfig, pointerValue) {
  const {
    scale: scale2,
    data: axisData,
    reverse
  } = axisConfig;
  if (!isBandScale(scale2)) {
    throw new Error("MUI X Charts: getAxisValue is not implemented for polare continuous axes.");
  }
  if (!axisData) {
    return -1;
  }
  const angleGap = clampAngleRad(pointerValue - Math.min(...scale2.range()));
  const dataIndex = scale2.bandwidth() === 0 ? Math.floor((angleGap + scale2.step() / 2) / scale2.step()) % axisData.length : Math.floor(angleGap / scale2.step());
  if (dataIndex < 0 || dataIndex >= axisData.length) {
    return -1;
  }
  return reverse ? axisData.length - 1 - dataIndex : dataIndex;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarInteraction.selectors.js
var optionalGetAxisId2 = (_, id) => id;
var optionalGetAxisIds = (_, ids) => ids;
function indexGetter2(value, axes, ids) {
  return Array.isArray(ids) ? ids.map((id) => getAxisIndex2(axes.axis[id], value)) : getAxisIndex2(axes.axis[ids], value);
}
var selectorChartsInteractionRotationAngle = createSelector2([selectorChartsInteractionPointerX, selectorChartsInteractionPointerY, selectorChartPolarCenter], (x, y, center) => {
  if (x === null || y === null) {
    return null;
  }
  return generateSvg2rotation(center)(x, y);
});
var selectorChartsInteractionRotationAxisIndex = createSelector2([selectorChartsInteractionRotationAngle, selectorChartRotationAxis, optionalGetAxisId2], (rotation, rotationAxis, id = rotationAxis.axisIds[0]) => rotation === null ? null : indexGetter2(rotation, rotationAxis, id));
var selectorChartsInteractionRotationAxisIndexes = createSelector2([selectorChartsInteractionRotationAngle, selectorChartRotationAxis, optionalGetAxisIds], (rotation, rotationAxis, ids = rotationAxis.axisIds) => rotation === null ? null : indexGetter2(rotation, rotationAxis, ids));
var selectorChartsInteractionRotationAxisValue = createSelector2([selectorChartRotationAxis, selectorChartsInteractionRotationAxisIndex, optionalGetAxisId2], (rotationAxis, rotationIndex, id = rotationAxis.axisIds[0]) => {
  var _a;
  if (rotationIndex === null || rotationIndex === -1 || rotationAxis.axisIds.length === 0) {
    return null;
  }
  const data = (_a = rotationAxis.axis[id]) == null ? void 0 : _a.data;
  if (!data) {
    return null;
  }
  return data[rotationIndex];
});
var selectorChartsInteractionRotationAxisValues = createSelector2([selectorChartRotationAxis, selectorChartsInteractionRotationAxisIndexes, optionalGetAxisIds], (rotationAxis, rotationIndexes, ids = rotationAxis.axisIds) => {
  if (rotationIndexes === null) {
    return null;
  }
  return ids.map((id, axisIndex) => {
    var _a;
    const rotationIndex = rotationIndexes[axisIndex];
    if (rotationIndex === -1) {
      return null;
    }
    return (_a = rotationAxis.axis[id].data) == null ? void 0 : _a[rotationIndex];
  });
});
var selectorChartsInteractionTooltipRotationAxes = createSelector2([selectorChartsInteractionRotationAxisIndexes, selectorChartRotationAxis], (indexes, axes) => {
  if (indexes === null) {
    return [];
  }
  return axes.axisIds.map((axisId, axisIndex) => ({
    axisId,
    dataIndex: indexes[axisIndex]
  })).filter(({
    axisId,
    dataIndex
  }) => axes.axis[axisId].triggerTooltip && dataIndex >= 0);
}, {
  memoizeOptions: {
    // Keep the same reference if array content is the same.
    // If possible, avoid this pattern by creating selectors that
    // uses string/number as arguments.
    resultEqualityCheck: isDeepEqual
  }
});
var selectorChartsInteractionTooltipRadiusAxes = createSelector2([], () => {
  return [];
});
var selectorChartsInteractionPolarAxisTooltip = createSelector2([selectorChartsInteractionTooltipRotationAxes], (rotationTooltip) => rotationTooltip.length > 0);

// node_modules/@mui/x-charts/esm/ChartsTooltip/useAxisTooltip.js
function defaultAxisTooltipConfig(axis, dataIndex, axisDirection) {
  var _a;
  const axisValue = ((_a = axis.data) == null ? void 0 : _a[dataIndex]) ?? null;
  const axisFormatter = axis.valueFormatter ?? ((v2) => axis.scaleType === "utc" ? utcFormatter(v2) : v2.toLocaleString());
  const axisFormattedValue = axisFormatter(axisValue, {
    location: "tooltip",
    scale: axis.scale
  });
  return {
    axisDirection,
    axisId: axis.id,
    mainAxis: axis,
    dataIndex,
    axisValue,
    axisFormattedValue,
    seriesItems: []
  };
}
function useAxisTooltip(params = {}) {
  const {
    multipleAxes,
    directions
  } = params;
  const defaultXAxis = useXAxis();
  const defaultYAxis = useYAxis();
  const defaultRotationAxis = useRotationAxis();
  const store = useStore();
  const tooltipXAxes = useSelector(store, selectorChartsInteractionTooltipXAxes);
  const tooltipYAxes = useSelector(store, selectorChartsInteractionTooltipYAxes);
  const tooltipRotationAxes = useSelector(store, selectorChartsInteractionTooltipRotationAxes);
  const series = useSeries();
  const {
    xAxis
  } = useXAxes();
  const {
    yAxis
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const {
    rotationAxis
  } = useRotationAxes();
  const colorProcessors = useColorProcessor();
  if (tooltipXAxes.length === 0 && tooltipYAxes.length === 0 && tooltipRotationAxes.length === 0) {
    return null;
  }
  const tooltipAxes = [];
  if (directions === void 0 || directions.includes("x")) {
    tooltipXAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(xAxis[axisId], dataIndex, "x"));
    });
  }
  if (directions === void 0 || directions.includes("y")) {
    tooltipYAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(yAxis[axisId], dataIndex, "y"));
    });
  }
  if (directions === void 0 || directions.includes("rotation")) {
    tooltipRotationAxes.forEach(({
      axisId,
      dataIndex
    }) => {
      if (!multipleAxes && tooltipAxes.length > 1) {
        return;
      }
      tooltipAxes.push(defaultAxisTooltipConfig(rotationAxis[axisId], dataIndex, "rotation"));
    });
  }
  Object.keys(series).filter(isCartesianSeriesType).forEach((seriesType) => {
    const seriesOfType = series[seriesType];
    if (!seriesOfType) {
      return [];
    }
    return seriesOfType.seriesOrder.forEach((seriesId) => {
      var _a;
      const seriesToAdd = seriesOfType.series[seriesId];
      const providedXAxisId = seriesToAdd.xAxisId ?? defaultXAxis.id;
      const providedYAxisId = seriesToAdd.yAxisId ?? defaultYAxis.id;
      const tooltipItemIndex = tooltipAxes.findIndex(({
        axisDirection,
        axisId
      }) => axisDirection === "x" && axisId === providedXAxisId || axisDirection === "y" && axisId === providedYAxisId);
      if (tooltipItemIndex >= 0) {
        const zAxisId = "zAxisId" in seriesToAdd ? seriesToAdd.zAxisId : zAxisIds[0];
        const {
          dataIndex
        } = tooltipAxes[tooltipItemIndex];
        const color = ((_a = colorProcessors[seriesType]) == null ? void 0 : _a.call(colorProcessors, seriesToAdd, xAxis[providedXAxisId], yAxis[providedYAxisId], zAxisId ? zAxis[zAxisId] : void 0)(dataIndex)) ?? "";
        const value = seriesToAdd.data[dataIndex] ?? null;
        const formattedValue = seriesToAdd.valueFormatter(value, {
          dataIndex
        });
        const formattedLabel = getLabel(seriesToAdd.label, "tooltip") ?? null;
        tooltipAxes[tooltipItemIndex].seriesItems.push({
          seriesId,
          color,
          value,
          formattedValue,
          formattedLabel,
          markType: seriesToAdd.labelMarkType
        });
      }
    });
  });
  Object.keys(series).filter(isPolarSeriesType).forEach((seriesType) => {
    const seriesOfType = series[seriesType];
    if (!seriesOfType) {
      return [];
    }
    return seriesOfType.seriesOrder.forEach((seriesId) => {
      var _a;
      const seriesToAdd = seriesOfType.series[seriesId];
      const providedRotationAxisId = (
        // @ts-expect-error Should be fixed when we introduce a polar series with a rotationAxisId
        seriesToAdd.rotationAxisId ?? (defaultRotationAxis == null ? void 0 : defaultRotationAxis.id)
      );
      const tooltipItemIndex = tooltipAxes.findIndex(({
        axisDirection,
        axisId
      }) => axisDirection === "rotation" && axisId === providedRotationAxisId);
      if (tooltipItemIndex >= 0) {
        const {
          dataIndex
        } = tooltipAxes[tooltipItemIndex];
        const color = ((_a = colorProcessors[seriesType]) == null ? void 0 : _a.call(colorProcessors, seriesToAdd)(dataIndex)) ?? "";
        const value = seriesToAdd.data[dataIndex] ?? null;
        const formattedValue = seriesToAdd.valueFormatter(value, {
          dataIndex
        });
        const formattedLabel = getLabel(seriesToAdd.label, "tooltip") ?? null;
        tooltipAxes[tooltipItemIndex].seriesItems.push({
          seriesId,
          color,
          value,
          formattedValue,
          formattedLabel,
          markType: seriesToAdd.labelMarkType
        });
      }
    });
  });
  if (!multipleAxes) {
    return tooltipAxes.length === 0 ? tooltipAxes[0] : null;
  }
  return tooltipAxes;
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/useAxesTooltip.js
function useAxesTooltip(params) {
  return useAxisTooltip(_extends({}, params, {
    multipleAxes: true
  }));
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsAxisTooltipContent.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
function ChartsAxisTooltipContent(props) {
  const classes = useUtilityClasses5(props.classes);
  const tooltipData = useAxesTooltip();
  if (tooltipData === null) {
    return null;
  }
  return (0, import_jsx_runtime21.jsx)(ChartsTooltipPaper, {
    sx: props.sx,
    className: classes.paper,
    children: tooltipData.map(({
      axisId,
      mainAxis,
      axisValue,
      axisFormattedValue,
      seriesItems
    }) => {
      return (0, import_jsx_runtime21.jsxs)(ChartsTooltipTable, {
        className: classes.table,
        children: [axisValue != null && !mainAxis.hideTooltip && (0, import_jsx_runtime21.jsx)(Typography_default, {
          component: "caption",
          children: axisFormattedValue
        }), (0, import_jsx_runtime21.jsx)("tbody", {
          children: seriesItems.map(({
            seriesId,
            color,
            formattedValue,
            formattedLabel,
            markType
          }) => {
            if (formattedValue == null) {
              return null;
            }
            return (0, import_jsx_runtime21.jsxs)(ChartsTooltipRow, {
              className: classes.row,
              children: [(0, import_jsx_runtime21.jsxs)(ChartsTooltipCell, {
                className: clsx_default2(classes.labelCell, classes.cell),
                component: "th",
                children: [(0, import_jsx_runtime21.jsx)("div", {
                  className: classes.markContainer,
                  children: (0, import_jsx_runtime21.jsx)(ChartsLabelMark, {
                    type: markType,
                    color,
                    className: classes.mark
                  })
                }), formattedLabel || null]
              }), (0, import_jsx_runtime21.jsx)(ChartsTooltipCell, {
                className: clsx_default2(classes.valueCell, classes.cell),
                component: "td",
                children: formattedValue
              })]
            }, seriesId);
          })
        })]
      }, axisId);
    })
  });
}
true ? ChartsAxisTooltipContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types14.default.object,
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipContainer.js
var React51 = __toESM(require_react(), 1);
var import_prop_types20 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
var React45 = __toESM(require_react(), 1);
var UNINITIALIZED = {};
function useLazyRef(init, initArg) {
  const ref = React45.useRef(UNINITIALIZED);
  if (ref.current === UNINITIALIZED) {
    ref.current = init(initArg);
  }
  return ref;
}

// node_modules/@mui/utils/esm/refType/refType.js
var import_prop_types15 = __toESM(require_prop_types(), 1);
var refType = import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]);
var refType_default = refType;

// node_modules/@mui/material/esm/Popper/Popper.js
var import_prop_types18 = __toESM(require_prop_types(), 1);
var React49 = __toESM(require_react(), 1);

// node_modules/@mui/material/esm/Popper/BasePopper.js
var React48 = __toESM(require_react(), 1);

// node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js
function chainPropTypes(propType1, propType2) {
  if (false) {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument2 = node.ownerDocument;
    return ownerDocument2 ? ownerDocument2.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v2 = within(min2, value, max2);
  return v2 > max2 ? max2 : v2;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/@mui/material/esm/Popper/BasePopper.js
var import_prop_types17 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/esm/Portal/Portal.js
var React47 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var import_prop_types16 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/setRef/setRef.js
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

// node_modules/@mui/utils/esm/getReactElementRef/getReactElementRef.js
var React46 = __toESM(require_react(), 1);
function getReactElementRef(element) {
  var _a;
  if (parseInt(React46.version, 10) >= 19) {
    return ((_a = element == null ? void 0 : element.props) == null ? void 0 : _a.ref) || null;
  }
  return (element == null ? void 0 : element.ref) || null;
}

// node_modules/@mui/material/esm/Portal/Portal.js
function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
var Portal = React47.forwardRef(function Portal2(props, forwardedRef) {
  const {
    children,
    container,
    disablePortal = false
  } = props;
  const [mountNode, setMountNode] = React47.useState(null);
  const handleRef = useForkRef(React47.isValidElement(children) ? getReactElementRef(children) : null, forwardedRef);
  useEnhancedEffect_default(() => {
    if (!disablePortal) {
      setMountNode(getContainer(container) || document.body);
    }
  }, [container, disablePortal]);
  useEnhancedEffect_default(() => {
    if (mountNode && !disablePortal) {
      setRef(forwardedRef, mountNode);
      return () => {
        setRef(forwardedRef, null);
      };
    }
    return void 0;
  }, [forwardedRef, mountNode, disablePortal]);
  if (disablePortal) {
    if (React47.isValidElement(children)) {
      const newProps = {
        ref: handleRef
      };
      return React47.cloneElement(children, newProps);
    }
    return children;
  }
  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;
});
true ? Portal.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: import_prop_types16.default.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types16.default.oneOfType([HTMLElementType, import_prop_types16.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types16.default.bool
} : void 0;
if (true) {
  Portal["propTypes"] = exactProp(Portal.propTypes);
}
var Portal_default = Portal;

// node_modules/@mui/material/esm/Popper/popperClasses.js
function getPopperUtilityClass(slot) {
  return generateUtilityClass("MuiPopper", slot);
}
var popperClasses = generateUtilityClasses("MuiPopper", ["root"]);

// node_modules/@mui/material/esm/Popper/BasePopper.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
function flipPlacement(placement, direction) {
  if (direction === "ltr") {
    return placement;
  }
  switch (placement) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return placement;
  }
}
function resolveAnchorEl(anchorEl) {
  return typeof anchorEl === "function" ? anchorEl() : anchorEl;
}
function isHTMLElement2(element) {
  return element.nodeType !== void 0;
}
function isVirtualElement(element) {
  return !isHTMLElement2(element);
}
var useUtilityClasses7 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getPopperUtilityClass, classes);
};
var defaultPopperOptions = {};
var PopperTooltip = React48.forwardRef(function PopperTooltip2(props, forwardedRef) {
  const {
    anchorEl,
    children,
    direction,
    disablePortal,
    modifiers,
    open,
    placement: initialPlacement,
    popperOptions,
    popperRef: popperRefProp,
    slotProps = {},
    slots = {},
    TransitionProps,
    // @ts-ignore internal logic
    ownerState: ownerStateProp,
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    ...other
  } = props;
  const tooltipRef = React48.useRef(null);
  const ownRef = useForkRef(tooltipRef, forwardedRef);
  const popperRef = React48.useRef(null);
  const handlePopperRef = useForkRef(popperRef, popperRefProp);
  const handlePopperRefRef = React48.useRef(handlePopperRef);
  useEnhancedEffect_default(() => {
    handlePopperRefRef.current = handlePopperRef;
  }, [handlePopperRef]);
  React48.useImperativeHandle(popperRefProp, () => popperRef.current, []);
  const rtlPlacement = flipPlacement(initialPlacement, direction);
  const [placement, setPlacement] = React48.useState(rtlPlacement);
  const [resolvedAnchorElement, setResolvedAnchorElement] = React48.useState(resolveAnchorEl(anchorEl));
  React48.useEffect(() => {
    if (popperRef.current) {
      popperRef.current.forceUpdate();
    }
  });
  React48.useEffect(() => {
    if (anchorEl) {
      setResolvedAnchorElement(resolveAnchorEl(anchorEl));
    }
  }, [anchorEl]);
  useEnhancedEffect_default(() => {
    if (!resolvedAnchorElement || !open) {
      return void 0;
    }
    const handlePopperUpdate = (data) => {
      setPlacement(data.placement);
    };
    if (true) {
      if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
        const box = resolvedAnchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
    }
    let popperModifiers = [{
      name: "preventOverflow",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "flip",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "onUpdate",
      enabled: true,
      phase: "afterWrite",
      fn: ({
        state
      }) => {
        handlePopperUpdate(state);
      }
    }];
    if (modifiers != null) {
      popperModifiers = popperModifiers.concat(modifiers);
    }
    if (popperOptions && popperOptions.modifiers != null) {
      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
    }
    const popper2 = createPopper3(resolvedAnchorElement, tooltipRef.current, {
      placement: rtlPlacement,
      ...popperOptions,
      modifiers: popperModifiers
    });
    handlePopperRefRef.current(popper2);
    return () => {
      popper2.destroy();
      handlePopperRefRef.current(null);
    };
  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
  const childProps = {
    placement
  };
  if (TransitionProps !== null) {
    childProps.TransitionProps = TransitionProps;
  }
  const classes = useUtilityClasses7(props);
  const Root4 = slots.root ?? "div";
  const rootProps = useSlotProps_default({
    elementType: Root4,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      role: "tooltip",
      ref: ownRef
    },
    ownerState: props,
    className: classes.root
  });
  return (0, import_jsx_runtime22.jsx)(Root4, {
    ...rootProps,
    children: typeof children === "function" ? children(childProps) : children
  });
});
var Popper = React48.forwardRef(function Popper2(props, forwardedRef) {
  const {
    anchorEl,
    children,
    container: containerProp,
    direction = "ltr",
    disablePortal = false,
    keepMounted = false,
    modifiers,
    open,
    placement = "bottom",
    popperOptions = defaultPopperOptions,
    popperRef,
    style,
    transition = false,
    slotProps = {},
    slots = {},
    ...other
  } = props;
  const [exited, setExited] = React48.useState(true);
  const handleEnter = () => {
    setExited(false);
  };
  const handleExited = () => {
    setExited(true);
  };
  if (!keepMounted && !open && (!transition || exited)) {
    return null;
  }
  let container;
  if (containerProp) {
    container = containerProp;
  } else if (anchorEl) {
    const resolvedAnchorEl = resolveAnchorEl(anchorEl);
    container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
  }
  const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
  const transitionProps = transition ? {
    in: open,
    onEnter: handleEnter,
    onExited: handleExited
  } : void 0;
  return (0, import_jsx_runtime22.jsx)(Portal_default, {
    disablePortal,
    container,
    children: (0, import_jsx_runtime22.jsx)(PopperTooltip, {
      anchorEl,
      direction,
      disablePortal,
      modifiers,
      ref: forwardedRef,
      open: transition ? !exited : open,
      placement,
      popperOptions,
      popperRef,
      slotProps,
      slots,
      ...other,
      style: {
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        display,
        ...style
      },
      TransitionProps: transitionProps,
      children
    })
  });
});
true ? Popper.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: chainPropTypes(import_prop_types17.default.oneOfType([HTMLElementType, import_prop_types17.default.object, import_prop_types17.default.func]), (props) => {
    if (props.open) {
      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
      if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
        const box = resolvedAnchorEl.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
      }
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: import_prop_types17.default.oneOfType([import_prop_types17.default.node, import_prop_types17.default.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types17.default.oneOfType([HTMLElementType, import_prop_types17.default.func]),
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types17.default.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types17.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types17.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types17.default.arrayOf(import_prop_types17.default.shape({
    data: import_prop_types17.default.object,
    effect: import_prop_types17.default.func,
    enabled: import_prop_types17.default.bool,
    fn: import_prop_types17.default.func,
    name: import_prop_types17.default.any,
    options: import_prop_types17.default.object,
    phase: import_prop_types17.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types17.default.arrayOf(import_prop_types17.default.string),
    requiresIfExists: import_prop_types17.default.arrayOf(import_prop_types17.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types17.default.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types17.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types17.default.shape({
    modifiers: import_prop_types17.default.array,
    onFirstUpdate: import_prop_types17.default.func,
    placement: import_prop_types17.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types17.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: refType_default,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types17.default.shape({
    root: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types17.default.shape({
    root: import_prop_types17.default.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types17.default.bool
} : void 0;
var BasePopper_default = Popper;

// node_modules/@mui/material/esm/Popper/Popper.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var PopperRoot = styled_default(BasePopper_default, {
  name: "MuiPopper",
  slot: "Root"
})({});
var Popper3 = React49.forwardRef(function Popper4(inProps, ref) {
  const isRtl = useRtl();
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiPopper"
  });
  const {
    anchorEl,
    component,
    components,
    componentsProps,
    container,
    disablePortal,
    keepMounted,
    modifiers,
    open,
    placement,
    popperOptions,
    popperRef,
    transition,
    slots,
    slotProps,
    ...other
  } = props;
  const RootComponent = (slots == null ? void 0 : slots.root) ?? (components == null ? void 0 : components.Root);
  const otherProps = {
    anchorEl,
    container,
    disablePortal,
    keepMounted,
    modifiers,
    open,
    placement,
    popperOptions,
    popperRef,
    transition,
    ...other
  };
  return (0, import_jsx_runtime23.jsx)(PopperRoot, {
    as: component,
    direction: isRtl ? "rtl" : "ltr",
    slots: {
      root: RootComponent
    },
    slotProps: slotProps ?? componentsProps,
    ...otherProps,
    ref
  });
});
true ? Popper3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types18.default.oneOfType([HTMLElementType, import_prop_types18.default.object, import_prop_types18.default.func]),
  /**
   * Popper render function or node.
   */
  children: import_prop_types18.default.oneOfType([import_prop_types18.default.node, import_prop_types18.default.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types18.default.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: import_prop_types18.default.shape({
    Root: import_prop_types18.default.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: import_prop_types18.default.shape({
    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types18.default.oneOfType([HTMLElementType, import_prop_types18.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types18.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types18.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types18.default.arrayOf(import_prop_types18.default.shape({
    data: import_prop_types18.default.object,
    effect: import_prop_types18.default.func,
    enabled: import_prop_types18.default.bool,
    fn: import_prop_types18.default.func,
    name: import_prop_types18.default.any,
    options: import_prop_types18.default.object,
    phase: import_prop_types18.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types18.default.arrayOf(import_prop_types18.default.string),
    requiresIfExists: import_prop_types18.default.arrayOf(import_prop_types18.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types18.default.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types18.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types18.default.shape({
    modifiers: import_prop_types18.default.array,
    onFirstUpdate: import_prop_types18.default.func,
    placement: import_prop_types18.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types18.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: refType_default,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types18.default.shape({
    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types18.default.shape({
    root: import_prop_types18.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types18.default.bool
} : void 0;
var Popper_default = Popper3;

// node_modules/@mui/material/esm/NoSsr/NoSsr.js
var React50 = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);
function NoSsr(props) {
  const {
    children,
    defer = false,
    fallback = null
  } = props;
  const [mountedState, setMountedState] = React50.useState(false);
  useEnhancedEffect_default(() => {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React50.useEffect(() => {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return mountedState ? children : fallback;
}
true ? NoSsr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: import_prop_types19.default.node,
  /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   * @default false
   */
  defer: import_prop_types19.default.bool,
  /**
   * The fallback content to display.
   * @default null
   */
  fallback: import_prop_types19.default.node
} : void 0;
if (true) {
  NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
}
var NoSsr_default = NoSsr;

// node_modules/@mui/x-charts/esm/hooks/useAxisSystem.js
function useAxisSystem() {
  const store = useStore();
  const rawRotationAxis = useSelector(store, selectorChartRawRotationAxis);
  const rawXAxis = useSelector(store, selectorChartRawXAxis);
  if (rawRotationAxis !== void 0) {
    return "polar";
  }
  if (rawXAxis !== void 0) {
    return "cartesian";
  }
  return "none";
}

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltipContainer.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var _excluded8 = ["trigger", "classes", "children"];
var noAxis = () => false;
var ChartsTooltipRoot = styled_default(Popper_default, {
  name: "MuiChartsTooltip",
  slot: "Root"
})(({
  theme
}) => ({
  pointerEvents: "none",
  zIndex: theme.zIndex.modal
}));
function ChartsTooltipContainer(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiChartsTooltipContainer"
  });
  const {
    trigger = "axis",
    classes,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const svgRef = useSvgRef();
  const pointerType = usePointerType();
  const popperRef = React51.useRef(null);
  const positionRef = useLazyRef(() => ({
    x: 0,
    y: 0
  }));
  const axisSystem = useAxisSystem();
  const store = useStore();
  const isOpen = useSelector(store, trigger === "axis" ? axisSystem === "polar" && selectorChartsInteractionPolarAxisTooltip || axisSystem === "cartesian" && selectorChartsInteractionAxisTooltip || noAxis : selectorChartsInteractionItemIsDefined);
  const popperOpen = pointerType !== null && isOpen;
  React51.useEffect(() => {
    const element = svgRef.current;
    if (element === null) {
      return () => {
      };
    }
    const handleMove = (event) => {
      var _a;
      positionRef.current = {
        x: event.clientX,
        y: event.clientY
      };
      (_a = popperRef.current) == null ? void 0 : _a.update();
    };
    element.addEventListener("pointermove", handleMove);
    return () => {
      element.removeEventListener("pointermove", handleMove);
    };
  }, [svgRef, positionRef]);
  const anchorEl = React51.useMemo(() => ({
    getBoundingClientRect: () => ({
      x: positionRef.current.x,
      y: positionRef.current.y,
      top: positionRef.current.y,
      left: positionRef.current.x,
      right: positionRef.current.x,
      bottom: positionRef.current.y,
      width: 0,
      height: 0,
      toJSON: () => ""
    })
  }), [positionRef]);
  const modifiers = React51.useMemo(() => [{
    name: "offset",
    options: {
      offset: () => {
        if ((pointerType == null ? void 0 : pointerType.pointerType) !== "touch") {
          return [0, 8];
        }
        return [0, 64];
      }
    }
  }, ...(pointerType == null ? void 0 : pointerType.pointerType) === "mouse" ? [] : [{
    name: "flip",
    options: {
      fallbackPlacements: ["top-end", "top-start", "bottom-end", "bottom"]
    }
  }]], [pointerType]);
  if (trigger === "none") {
    return null;
  }
  return (0, import_jsx_runtime24.jsx)(NoSsr_default, {
    children: popperOpen && (0, import_jsx_runtime24.jsx)(ChartsTooltipRoot, _extends({
      className: classes == null ? void 0 : classes.root,
      open: popperOpen,
      placement: (pointerType == null ? void 0 : pointerType.pointerType) === "mouse" ? "right-start" : "top",
      popperRef,
      anchorEl,
      modifiers
    }, other, {
      children
    }))
  });
}
true ? ChartsTooltipContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types20.default.oneOfType([HTMLElementType, import_prop_types20.default.object, import_prop_types20.default.func]),
  /**
   * Popper render function or node.
   */
  children: import_prop_types20.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types20.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types20.default.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: import_prop_types20.default.shape({
    Root: import_prop_types20.default.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: import_prop_types20.default.shape({
    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types20.default.oneOfType([(props, propName) => {
    if (props[propName] == null) {
      return new Error(`Prop '${propName}' is required but wasn't specified`);
    }
    if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
      return new Error(`Expected prop '${propName}' to be of type Element`);
    }
    return null;
  }, import_prop_types20.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types20.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types20.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
    data: import_prop_types20.default.object,
    effect: import_prop_types20.default.func,
    enabled: import_prop_types20.default.bool,
    fn: import_prop_types20.default.func,
    name: import_prop_types20.default.any,
    options: import_prop_types20.default.object,
    phase: import_prop_types20.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types20.default.arrayOf(import_prop_types20.default.string),
    requiresIfExists: import_prop_types20.default.arrayOf(import_prop_types20.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types20.default.bool,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types20.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types20.default.shape({
    modifiers: import_prop_types20.default.array,
    onFirstUpdate: import_prop_types20.default.func,
    placement: import_prop_types20.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types20.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.shape({
    current: import_prop_types20.default.shape({
      destroy: import_prop_types20.default.func.isRequired,
      forceUpdate: import_prop_types20.default.func.isRequired,
      setOptions: import_prop_types20.default.func.isRequired,
      state: import_prop_types20.default.shape({
        attributes: import_prop_types20.default.object.isRequired,
        elements: import_prop_types20.default.object.isRequired,
        modifiersData: import_prop_types20.default.object.isRequired,
        options: import_prop_types20.default.object.isRequired,
        orderedModifiers: import_prop_types20.default.arrayOf(import_prop_types20.default.object).isRequired,
        placement: import_prop_types20.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]).isRequired,
        rects: import_prop_types20.default.object.isRequired,
        reset: import_prop_types20.default.bool.isRequired,
        scrollParents: import_prop_types20.default.object.isRequired,
        strategy: import_prop_types20.default.oneOf(["absolute", "fixed"]).isRequired,
        styles: import_prop_types20.default.object.isRequired
      }).isRequired,
      update: import_prop_types20.default.func.isRequired
    })
  })]),
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types20.default.object,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types20.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types20.default.bool,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'axis'
   */
  trigger: import_prop_types20.default.oneOf(["axis", "item", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsTooltip/ChartsTooltip.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
function ChartsTooltip(props) {
  const {
    classes: propClasses,
    trigger = "axis"
  } = props;
  const classes = useUtilityClasses5(propClasses);
  return (0, import_jsx_runtime25.jsx)(ChartsTooltipContainer, _extends({}, props, {
    classes,
    children: trigger === "axis" ? (0, import_jsx_runtime25.jsx)(ChartsAxisTooltipContent, {
      classes
    }) : (0, import_jsx_runtime25.jsx)(ChartsItemTooltipContent, {
      classes
    })
  }));
}
true ? ChartsTooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types21.default.oneOfType([HTMLElementType, import_prop_types21.default.object, import_prop_types21.default.func]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types21.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types21.default.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: import_prop_types21.default.shape({
    Root: import_prop_types21.default.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: import_prop_types21.default.shape({
    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types21.default.oneOfType([(props, propName) => {
    if (props[propName] == null) {
      return new Error(`Prop '${propName}' is required but wasn't specified`);
    }
    if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
      return new Error(`Expected prop '${propName}' to be of type Element`);
    }
    return null;
  }, import_prop_types21.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types21.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types21.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types21.default.arrayOf(import_prop_types21.default.shape({
    data: import_prop_types21.default.object,
    effect: import_prop_types21.default.func,
    enabled: import_prop_types21.default.bool,
    fn: import_prop_types21.default.func,
    name: import_prop_types21.default.any,
    options: import_prop_types21.default.object,
    phase: import_prop_types21.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types21.default.arrayOf(import_prop_types21.default.string),
    requiresIfExists: import_prop_types21.default.arrayOf(import_prop_types21.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types21.default.bool,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types21.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types21.default.shape({
    modifiers: import_prop_types21.default.array,
    onFirstUpdate: import_prop_types21.default.func,
    placement: import_prop_types21.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types21.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.shape({
    current: import_prop_types21.default.shape({
      destroy: import_prop_types21.default.func.isRequired,
      forceUpdate: import_prop_types21.default.func.isRequired,
      setOptions: import_prop_types21.default.func.isRequired,
      state: import_prop_types21.default.shape({
        attributes: import_prop_types21.default.object.isRequired,
        elements: import_prop_types21.default.object.isRequired,
        modifiersData: import_prop_types21.default.object.isRequired,
        options: import_prop_types21.default.object.isRequired,
        orderedModifiers: import_prop_types21.default.arrayOf(import_prop_types21.default.object).isRequired,
        placement: import_prop_types21.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]).isRequired,
        rects: import_prop_types21.default.object.isRequired,
        reset: import_prop_types21.default.bool.isRequired,
        scrollParents: import_prop_types21.default.object.isRequired,
        strategy: import_prop_types21.default.oneOf(["absolute", "fixed"]).isRequired,
        styles: import_prop_types21.default.object.isRequired
      }).isRequired,
      update: import_prop_types21.default.func.isRequired
    })
  })]),
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types21.default.object,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types21.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types21.default.bool,
  /**
   * Select the kind of tooltip to display
   * - 'item': Shows data about the item below the mouse.
   * - 'axis': Shows values associated with the hovered x value
   * - 'none': Does not display tooltip
   * @default 'axis'
   */
  trigger: import_prop_types21.default.oneOf(["axis", "item", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLabel/labelClasses.js
function getLabelUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabel", slot);
}
var labelClasses = generateUtilityClasses("MuiChartsLabel", ["root"]);
var useUtilityClasses8 = (props) => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getLabelUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/ChartsLabel/labelGradientClasses.js
function getLabelGradientUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLabelGradient", slot);
}
var labelGradientClasses = generateUtilityClasses("MuiChartsLabelGradient", ["root", "vertical", "horizontal", "mask", "fill"]);
var useUtilityClasses9 = (props) => {
  const {
    direction
  } = props;
  const slots = {
    root: ["root", direction],
    mask: ["mask"],
    fill: ["fill"]
  };
  return composeClasses(slots, getLabelGradientUtilityClass, props.classes);
};

// node_modules/@mui/x-charts/esm/ChartsLegend/ChartsLegend.js
var React55 = __toESM(require_react(), 1);
var import_prop_types23 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/onClickContextBuilder.js
var seriesContextBuilder = (context) => ({
  type: "series",
  color: context.color,
  label: context.label,
  seriesId: context.seriesId,
  itemId: context.itemId
});

// node_modules/@mui/x-charts/esm/ChartsLegend/chartsLegendClasses.js
function getLegendUtilityClass(slot) {
  return generateUtilityClass("MuiChartsLegend", slot);
}
var useUtilityClasses10 = (props) => {
  const {
    classes,
    direction
  } = props;
  const slots = {
    root: ["root", direction],
    mark: ["mark"],
    label: ["label"],
    series: ["series"]
  };
  return composeClasses(slots, getLegendUtilityClass, classes);
};
var legendClasses = generateUtilityClasses("MuiChartsLegend", ["root", "series", "mark", "label", "vertical", "horizontal"]);

// node_modules/@mui/x-charts/esm/internals/consumeSlots.js
var React53 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var _excluded9 = ["slots", "slotProps"];
var _excluded23 = ["ownerState"];
var consumeSlots = (name, slotPropName, options, InComponent) => {
  function ConsumeSlotsInternal(props, ref) {
    var _a;
    const themedProps = useThemeProps({
      props,
      // eslint-disable-next-line material-ui/mui-name-matches-component-name
      name
    });
    const defaultProps3 = typeof options.defaultProps === "function" ? options.defaultProps(themedProps) : options.defaultProps ?? {};
    const defaultizedProps = resolveProps(defaultProps3, themedProps);
    const _ref = defaultizedProps, {
      slots,
      slotProps
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded9);
    const theme = useTheme();
    const classes = (_a = options.classesResolver) == null ? void 0 : _a.call(options, defaultizedProps, theme);
    const Component = (slots == null ? void 0 : slots[slotPropName]) ?? InComponent;
    const propagateSlots = options.propagateSlots && !(slots == null ? void 0 : slots[slotPropName]);
    const _useSlotProps = useSlotProps_default({
      elementType: Component,
      externalSlotProps: slotProps == null ? void 0 : slotProps[slotPropName],
      additionalProps: _extends({}, other, {
        classes
      }, propagateSlots && {
        slots,
        slotProps
      }),
      ownerState: {}
    }), originalOutProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded23);
    const outProps = _extends({}, originalOutProps);
    for (const prop of options.omitProps ?? []) {
      delete outProps[prop];
    }
    if (true) {
      Component.displayName = `${name}.slots.${slotPropName}`;
    }
    return (0, import_jsx_runtime26.jsx)(Component, _extends({}, outProps, {
      ref
    }));
  }
  return React53.forwardRef(ConsumeSlotsInternal);
};
if (true)
  consumeSlots.displayName = "consumeSlots";

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabel.js
var React54 = __toESM(require_react(), 1);
var import_prop_types22 = __toESM(require_prop_types(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var _excluded10 = ["children", "className", "classes"];
var ChartsLabel = consumeThemeProps("MuiChartsLabel", {
  classesResolver: useUtilityClasses8
}, function ChartsLabel2(props, ref) {
  const {
    children,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  return (0, import_jsx_runtime27.jsx)("span", _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    children
  }));
});
true ? ChartsLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types22.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types22.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/ChartsLegend.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var _excluded11 = ["direction", "onItemClick", "className", "classes"];
var RootElement = styled_default("ul", {
  name: "MuiChartsLegend",
  slot: "Root"
})(({
  ownerState,
  theme
}) => _extends({}, theme.typography.caption, {
  color: (theme.vars || theme).palette.text.primary,
  lineHeight: "100%",
  display: "flex",
  flexDirection: ownerState.direction === "vertical" ? "column" : "row",
  alignItems: ownerState.direction === "vertical" ? void 0 : "center",
  flexShrink: 0,
  gap: theme.spacing(2),
  listStyleType: "none",
  paddingInlineStart: 0,
  marginBlock: theme.spacing(1),
  marginInline: theme.spacing(1),
  flexWrap: "wrap",
  li: {
    display: ownerState.direction === "horizontal" ? "inline-flex" : void 0
  },
  [`button.${legendClasses.series}`]: {
    // Reset button styles
    background: "none",
    border: "none",
    padding: 0,
    fontFamily: "inherit",
    fontWeight: "inherit",
    fontSize: "inherit",
    letterSpacing: "inherit",
    color: "inherit"
  },
  [`& .${legendClasses.series}`]: {
    display: ownerState.direction === "vertical" ? "flex" : "inline-flex",
    alignItems: "center",
    gap: theme.spacing(1)
  }
}));
var ChartsLegend = consumeSlots("MuiChartsLegend", "legend", {
  defaultProps: {
    direction: "horizontal"
  },
  // @ts-expect-error position is used only in the slots, but it is passed to the SVG wrapper.
  // We omit it here to avoid passing to slots.
  omitProps: ["position"],
  classesResolver: useUtilityClasses10
}, React55.forwardRef(function ChartsLegend2(props, ref) {
  const data = useLegend();
  const {
    onItemClick,
    className,
    classes
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  if (data.items.length === 0) {
    return null;
  }
  const Element2 = onItemClick ? "button" : "div";
  return (0, import_jsx_runtime28.jsx)(RootElement, _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: data.items.map((item, i) => {
      return (0, import_jsx_runtime28.jsx)("li", {
        children: (0, import_jsx_runtime28.jsxs)(Element2, {
          className: classes == null ? void 0 : classes.series,
          role: onItemClick ? "button" : void 0,
          type: onItemClick ? "button" : void 0,
          onClick: onItemClick ? (
            // @ts-ignore onClick is only attached to a button
            (event) => onItemClick(event, seriesContextBuilder(item), i)
          ) : void 0,
          children: [(0, import_jsx_runtime28.jsx)(ChartsLabelMark, {
            className: classes == null ? void 0 : classes.mark,
            color: item.color,
            type: item.markType
          }), (0, import_jsx_runtime28.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: item.label
          })]
        })
      }, item.id);
    })
  }));
}));
if (true)
  ChartsLegend.displayName = "ChartsLegend";
true ? ChartsLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types23.default.object,
  className: import_prop_types23.default.string,
  /**
   * The direction of the legend layout.
   * The default depends on the chart.
   */
  direction: import_prop_types23.default.oneOf(["horizontal", "vertical"]),
  /**
   * Callback fired when a legend item is clicked.
   * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event The click event.
   * @param {SeriesLegendItemContext} legendItem The legend item data.
   * @param {number} index The index of the clicked legend item.
   */
  onItemClick: import_prop_types23.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types23.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types23.default.object,
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/ContinuousColorLegend.js
var React57 = __toESM(require_react(), 1);
var import_prop_types25 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/useAxis.js
function useAxis({
  axisDirection,
  axisId
}) {
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  switch (axisDirection) {
    case "x": {
      const id = typeof axisId === "string" ? axisId : xAxisIds[axisId ?? 0];
      return xAxis[id];
    }
    case "y": {
      const id = typeof axisId === "string" ? axisId : yAxisIds[axisId ?? 0];
      return yAxis[id];
    }
    case "z":
    default: {
      const id = typeof axisId === "string" ? axisId : zAxisIds[axisId ?? 0];
      return zAxis[id];
    }
  }
}

// node_modules/@mui/x-charts/esm/ChartsLabel/ChartsLabelGradient.js
var React56 = __toESM(require_react(), 1);
var import_prop_types24 = __toESM(require_prop_types(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var _excluded12 = ["gradientId", "direction", "classes", "className", "rotate", "reverse", "thickness"];
var getRotation = (direction, reverse, rotate, isRtl) => {
  const angle = (direction === "vertical" ? -90 : 0) + (rotate ? 90 : 0) + (reverse ? 180 : 0);
  if (isRtl && direction !== "vertical") {
    return angle + 180;
  }
  return angle;
};
var Root2 = styled_default("div", {
  name: "MuiChartsLabelGradient",
  slot: "Root"
})(({
  ownerState
}) => {
  const rotation = getRotation(ownerState.direction, ownerState.reverse, ownerState.rotate, ownerState.isRtl);
  return {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    [`.${labelGradientClasses.mask}`]: {
      borderRadius: 2,
      overflow: "hidden"
    },
    [`&.${labelGradientClasses.horizontal}`]: {
      width: "100%",
      [`.${labelGradientClasses.mask}`]: {
        height: ownerState.thickness,
        width: "100%"
      }
    },
    [`&.${labelGradientClasses.vertical}`]: {
      height: "100%",
      [`.${labelGradientClasses.mask}`]: {
        width: ownerState.thickness,
        height: "100%",
        "> svg": {
          height: "100%"
        }
      }
    },
    svg: {
      transform: `rotate(${rotation}deg)`,
      display: "block"
    }
  };
});
var ChartsLabelGradient = consumeThemeProps("MuiChartsLabelGradient", {
  defaultProps: {
    direction: "horizontal",
    thickness: 12
  },
  classesResolver: useUtilityClasses9
}, function ChartsLabelGradient2(props, ref) {
  const {
    gradientId,
    classes,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const isRtl = useRtl();
  return (0, import_jsx_runtime29.jsx)(Root2, _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ownerState: _extends({}, props, {
      isRtl
    }),
    "aria-hidden": "true",
    ref
  }, other, {
    children: (0, import_jsx_runtime29.jsx)("div", {
      className: classes == null ? void 0 : classes.mask,
      children: (0, import_jsx_runtime29.jsx)("svg", {
        viewBox: "0 0 24 24",
        children: (0, import_jsx_runtime29.jsx)("rect", {
          className: classes == null ? void 0 : classes.fill,
          width: "24",
          height: "24",
          fill: `url(#${gradientId})`
        })
      })
    })
  }));
});
true ? ChartsLabelGradient.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types24.default.object,
  /**
   * The direction of the gradient.
   * @default 'horizontal'
   */
  direction: import_prop_types24.default.oneOf(["vertical", "horizontal"]),
  /**
   * A unique identifier for the gradient.
   * The `gradientId` will be used as `fill="url(#gradientId)"`.
   */
  gradientId: import_prop_types24.default.string.isRequired,
  /**
   * If `true`, the gradient will be reversed.
   */
  reverse: import_prop_types24.default.bool,
  /**
   * If provided, the gradient will be rotated by 90deg.
   * Useful for linear gradients that are not in the correct orientation.
   */
  rotate: import_prop_types24.default.bool,
  /**
   * The thickness of the gradient
   * @default 12
   */
  thickness: import_prop_types24.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/continuousColorLegendClasses.js
function getLegendUtilityClass2(slot) {
  return generateUtilityClass("MuiContinuousColorLegend", slot);
}
var useUtilityClasses11 = (props) => {
  const {
    classes,
    direction,
    labelPosition
  } = props;
  const slots = {
    root: ["root", direction, labelPosition],
    minLabel: ["minLabel"],
    maxLabel: ["maxLabel"],
    gradient: ["gradient"],
    mark: ["mark"],
    label: ["label"]
  };
  return composeClasses(slots, getLegendUtilityClass2, classes);
};
var continuousColorLegendClasses = generateUtilityClasses("MuiContinuousColorLegend", ["root", "minLabel", "maxLabel", "gradient", "vertical", "horizontal", "start", "end", "extremes", "label"]);

// node_modules/@mui/x-charts/esm/ChartsLegend/ContinuousColorLegend.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var _excluded13 = ["minLabel", "maxLabel", "direction", "axisDirection", "axisId", "rotateGradient", "reverse", "classes", "className", "gradientId", "labelPosition", "thickness"];
var templateAreas = (reverse) => {
  const startLabel = reverse ? "max-label" : "min-label";
  const endLabel = reverse ? "min-label" : "max-label";
  return {
    row: {
      start: `
    '${startLabel} . ${endLabel}'
    'gradient gradient gradient'
  `,
      end: `
      'gradient gradient gradient'
      '${startLabel} . ${endLabel}'
    `,
      extremes: `
      '${startLabel} gradient ${endLabel}'
    `
    },
    column: {
      start: `
      '${endLabel} gradient'
      '. gradient'
      '${startLabel} gradient'
    `,
      end: `
      'gradient ${endLabel}'
      'gradient .'
      'gradient ${startLabel}'
    `,
      extremes: `
      '${endLabel}'
      'gradient'
      '${startLabel}'
    `
    }
  };
};
var RootElement2 = styled_default("ul", {
  name: "MuiContinuousColorLegend",
  slot: "Root"
})(({
  theme,
  ownerState
}) => _extends({}, theme.typography.caption, {
  color: (theme.vars || theme).palette.text.primary,
  lineHeight: "100%",
  display: "grid",
  flexShrink: 0,
  gap: theme.spacing(0.5),
  listStyleType: "none",
  paddingInlineStart: 0,
  marginBlock: theme.spacing(1),
  marginInline: theme.spacing(1),
  [`&.${continuousColorLegendClasses.horizontal}`]: {
    gridTemplateRows: "min-content min-content",
    gridTemplateColumns: "min-content auto min-content",
    [`&.${continuousColorLegendClasses.start}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.start
    },
    [`&.${continuousColorLegendClasses.end}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.end
    },
    [`&.${continuousColorLegendClasses.extremes}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).row.extremes,
      gridTemplateRows: "min-content",
      alignItems: "center"
    }
  },
  [`&.${continuousColorLegendClasses.vertical}`]: {
    gridTemplateRows: "min-content auto min-content",
    gridTemplateColumns: "min-content min-content",
    [`&.${continuousColorLegendClasses.start}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.start,
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "end"
      }
    },
    [`&.${continuousColorLegendClasses.end}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.end,
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "start"
      }
    },
    [`&.${continuousColorLegendClasses.extremes}`]: {
      gridTemplateAreas: templateAreas(ownerState.reverse).column.extremes,
      gridTemplateColumns: "min-content",
      [`.${continuousColorLegendClasses.maxLabel}, .${continuousColorLegendClasses.minLabel}`]: {
        justifySelf: "center"
      }
    }
  },
  [`.${continuousColorLegendClasses.gradient}`]: {
    gridArea: "gradient"
  },
  [`.${continuousColorLegendClasses.maxLabel}`]: {
    gridArea: "max-label"
  },
  [`.${continuousColorLegendClasses.minLabel}`]: {
    gridArea: "min-label"
  }
}));
var getText = (label, value, formattedValue) => {
  if (typeof label === "string") {
    return label;
  }
  return (label == null ? void 0 : label({
    value,
    formattedValue
  })) ?? formattedValue;
};
var isZAxis = (axis) => axis.scale === void 0;
var ContinuousColorLegend = consumeThemeProps("MuiContinuousColorLegend", {
  defaultProps: {
    direction: "horizontal",
    labelPosition: "end",
    axisDirection: "z"
  },
  classesResolver: useUtilityClasses11
}, function ContinuousColorLegend2(props, ref) {
  const {
    minLabel,
    maxLabel,
    direction,
    axisDirection,
    axisId,
    rotateGradient,
    reverse,
    classes,
    className,
    gradientId,
    thickness
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const generateGradientId = useChartGradientIdObjectBoundBuilder();
  const axisItem = useAxis({
    axisDirection,
    axisId
  });
  const colorMap = axisItem == null ? void 0 : axisItem.colorMap;
  if (!colorMap || !colorMap.type || colorMap.type !== "continuous") {
    return null;
  }
  const minValue = colorMap.min ?? 0;
  const maxValue = colorMap.max ?? 100;
  const valueFormatter = isZAxis(axisItem) ? void 0 : axisItem.valueFormatter;
  const formattedMin = valueFormatter ? valueFormatter(minValue, {
    location: "legend"
  }) : minValue.toLocaleString();
  const formattedMax = valueFormatter ? valueFormatter(maxValue, {
    location: "legend"
  }) : maxValue.toLocaleString();
  const minText = getText(minLabel, minValue, formattedMin);
  const maxText = getText(maxLabel, maxValue, formattedMax);
  const minComponent = (0, import_jsx_runtime30.jsx)("li", {
    className: classes == null ? void 0 : classes.minLabel,
    children: (0, import_jsx_runtime30.jsx)(ChartsLabel, {
      className: classes == null ? void 0 : classes.label,
      children: minText
    })
  });
  const maxComponent = (0, import_jsx_runtime30.jsx)("li", {
    className: classes == null ? void 0 : classes.maxLabel,
    children: (0, import_jsx_runtime30.jsx)(ChartsLabel, {
      className: classes == null ? void 0 : classes.label,
      children: maxText
    })
  });
  return (0, import_jsx_runtime30.jsxs)(RootElement2, _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: [reverse ? maxComponent : minComponent, (0, import_jsx_runtime30.jsx)("li", {
      className: classes == null ? void 0 : classes.gradient,
      children: (0, import_jsx_runtime30.jsx)(ChartsLabelGradient, {
        direction,
        rotate: rotateGradient,
        reverse,
        thickness,
        gradientId: gradientId ?? generateGradientId(axisItem.id)
      })
    }), reverse ? minComponent : maxComponent]
  }));
});
true ? ContinuousColorLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The axis direction containing the color configuration to represent.
   * @default 'z'
   */
  axisDirection: import_prop_types25.default.oneOf(["x", "y", "z"]),
  /**
   * The id of the axis item with the color configuration to represent.
   * @default The first axis item.
   */
  axisId: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types25.default.object,
  className: import_prop_types25.default.string,
  /**
   * The direction of the legend layout.
   * @default 'horizontal'
   */
  direction: import_prop_types25.default.oneOf(["horizontal", "vertical"]),
  /**
   * The id for the gradient to use.
   * If not provided, it will use the generated gradient from the axis configuration.
   * The `gradientId` will be used as `fill="url(#gradientId)"`.
   * @default auto-generated id
   */
  gradientId: import_prop_types25.default.string,
  /**
   * Where to position the labels relative to the gradient.
   * @default 'end'
   */
  labelPosition: import_prop_types25.default.oneOf(["start", "end", "extremes"]),
  /**
   * The label to display at the maximum side of the gradient.
   * Can either be a string, or a function.
   * If not defined, the formatted maximal value is display.
   * @default formattedValue
   */
  maxLabel: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.string]),
  /**
   * The label to display at the minimum side of the gradient.
   * Can either be a string, or a function.
   * @default formattedValue
   */
  minLabel: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.string]),
  /**
   * If `true`, the gradient and labels will be reversed.
   * @default false
   */
  reverse: import_prop_types25.default.bool,
  /**
   * If provided, the gradient will be rotated by 90deg.
   * Useful for linear gradients that are not in the correct orientation.
   */
  rotateGradient: import_prop_types25.default.bool,
  /**
   * The thickness of the gradient
   * @default 12
   */
  thickness: import_prop_types25.default.number,
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsLegend/PiecewiseColorLegend.js
var React58 = __toESM(require_react(), 1);
var import_prop_types26 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsLegend/piecewiseColorLegendClasses.js
function getLegendUtilityClass3(slot) {
  return generateUtilityClass("MuiPiecewiseColorLegendClasses", slot);
}
var useUtilityClasses12 = (props) => {
  const {
    classes,
    direction,
    labelPosition
  } = props;
  const slots = {
    root: ["root", direction, labelPosition],
    minLabel: ["minLabel"],
    maxLabel: ["maxLabel"],
    item: ["item"],
    mark: ["mark"],
    label: ["label"]
  };
  return composeClasses(slots, getLegendUtilityClass3, classes);
};
var piecewiseColorLegendClasses = generateUtilityClasses("MuiPiecewiseColorLegendClasses", ["root", "minLabel", "maxLabel", "item", "vertical", "horizontal", "start", "end", "extremes", "mark", "label"]);

// node_modules/@mui/x-charts/esm/ChartsLegend/piecewiseColorDefaultLabelFormatter.js
function piecewiseColorDefaultLabelFormatter(params) {
  if (params.min === null) {
    return `<${params.formattedMax}`;
  }
  if (params.max === null) {
    return `>${params.formattedMin}`;
  }
  return `${params.formattedMin}-${params.formattedMax}`;
}

// node_modules/@mui/x-charts/esm/ChartsLegend/PiecewiseColorLegend.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var _excluded14 = ["direction", "classes", "className", "markType", "labelPosition", "axisDirection", "axisId", "labelFormatter", "onItemClick"];
var RootElement3 = styled_default("ul", {
  name: "MuiPiecewiseColorLegend",
  slot: "Root"
})(({
  theme,
  ownerState
}) => {
  var _a;
  return _extends({}, theme.typography.caption, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "100%",
    display: "flex",
    flexDirection: ownerState.direction === "vertical" ? "column" : "row",
    flexShrink: 0,
    gap: theme.spacing(0.5),
    listStyleType: "none",
    paddingInlineStart: 0,
    marginBlock: theme.spacing(1),
    marginInline: theme.spacing(1),
    width: "max-content",
    [`button.${piecewiseColorLegendClasses.item}`]: {
      // Reset button styles
      background: "none",
      border: "none",
      padding: 0,
      cursor: ownerState.onItemClick ? "pointer" : "unset",
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      letterSpacing: "inherit",
      color: "inherit"
    },
    [`.${piecewiseColorLegendClasses.item}`]: {
      display: "flex",
      gap: theme.spacing(0.5)
    },
    [`li :not(.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}) .${(_a = piecewiseColorLegendClasses) == null ? void 0 : _a.mark}`]: {
      alignSelf: "center"
    },
    [`&.${piecewiseColorLegendClasses.start}`]: {
      alignItems: "end"
    },
    [`&.${piecewiseColorLegendClasses.end}`]: {
      alignItems: "start"
    },
    [`&.${piecewiseColorLegendClasses.horizontal}`]: {
      alignItems: "center",
      [`.${piecewiseColorLegendClasses.item}`]: {
        flexDirection: "column"
      },
      [`&.${piecewiseColorLegendClasses.start}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.end}`]: {
        alignItems: "start"
      },
      [`.${piecewiseColorLegendClasses.minLabel}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.extremes}`]: {
        [`.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}`]: {
          alignItems: "center",
          display: "flex",
          flexDirection: "row"
        }
      }
    },
    [`&.${piecewiseColorLegendClasses.vertical}`]: {
      [`.${piecewiseColorLegendClasses.item}`]: {
        flexDirection: "row",
        alignItems: "center"
      },
      [`&.${piecewiseColorLegendClasses.start}`]: {
        alignItems: "end"
      },
      [`&.${piecewiseColorLegendClasses.end}`]: {
        alignItems: "start"
      },
      [`&.${piecewiseColorLegendClasses.extremes}`]: {
        alignItems: "center",
        [`.${piecewiseColorLegendClasses.minLabel}, .${piecewiseColorLegendClasses.maxLabel}`]: {
          alignItems: "center",
          display: "flex",
          flexDirection: "column"
        }
      }
    }
  });
});
var PiecewiseColorLegend = consumeThemeProps("MuiPiecewiseColorLegend", {
  defaultProps: {
    direction: "horizontal",
    labelPosition: "extremes",
    labelFormatter: piecewiseColorDefaultLabelFormatter
  },
  classesResolver: useUtilityClasses12
}, function PiecewiseColorLegend2(props, ref) {
  const {
    direction,
    classes,
    className,
    markType,
    labelPosition,
    axisDirection,
    axisId,
    labelFormatter,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const isVertical = direction === "vertical";
  const isReverse = isVertical;
  const axisItem = useAxis({
    axisDirection,
    axisId
  });
  const colorMap = axisItem == null ? void 0 : axisItem.colorMap;
  if (!colorMap || !colorMap.type || colorMap.type !== "piecewise") {
    return null;
  }
  const valueFormatter = (v2) => {
    var _a;
    return ((_a = axisItem.valueFormatter) == null ? void 0 : _a.call(axisItem, v2, {
      location: "legend"
    })) ?? v2.toLocaleString();
  };
  const formattedLabels = colorMap.thresholds.map(valueFormatter);
  const startClass = isReverse ? classes == null ? void 0 : classes.maxLabel : classes == null ? void 0 : classes.minLabel;
  const endClass = isReverse ? classes == null ? void 0 : classes.minLabel : classes == null ? void 0 : classes.maxLabel;
  const colors = colorMap.colors.map((color, colorIndex) => ({
    color,
    colorIndex
  }));
  const orderedColors = isReverse ? colors.reverse() : colors;
  const isStart = labelPosition === "start";
  const isEnd = labelPosition === "end";
  const isExtremes = labelPosition === "extremes";
  return (0, import_jsx_runtime31.jsx)(RootElement3, _extends({
    className: clsx_default2(classes == null ? void 0 : classes.root, className),
    ref
  }, other, {
    ownerState: props,
    children: orderedColors.map(({
      color,
      colorIndex
    }, index) => {
      const isFirst = index === 0;
      const isLast = index === colorMap.colors.length - 1;
      const isFirstColor = colorIndex === 0;
      const isLastColor = colorIndex === colorMap.colors.length - 1;
      const data = _extends({
        index: colorIndex,
        length: formattedLabels.length
      }, isFirstColor ? {
        min: null,
        formattedMin: null
      } : {
        min: colorMap.thresholds[colorIndex - 1],
        formattedMin: formattedLabels[colorIndex - 1]
      }, isLastColor ? {
        max: null,
        formattedMax: null
      } : {
        max: colorMap.thresholds[colorIndex],
        formattedMax: formattedLabels[colorIndex]
      });
      const label = labelFormatter == null ? void 0 : labelFormatter(data);
      if (label === null || label === void 0) {
        return null;
      }
      const isTextBefore = isStart || isExtremes && isFirst;
      const isTextAfter = isEnd || isExtremes && isLast;
      const clickObject = {
        type: "piecewiseColor",
        color,
        label,
        minValue: data.min,
        maxValue: data.max
      };
      const Element2 = onItemClick ? "button" : "div";
      return (0, import_jsx_runtime31.jsx)("li", {
        children: (0, import_jsx_runtime31.jsxs)(Element2, {
          role: onItemClick ? "button" : void 0,
          type: onItemClick ? "button" : void 0,
          onClick: (
            // @ts-ignore onClick is only attached to a button
            onItemClick ? (event) => onItemClick(event, clickObject, index) : void 0
          ),
          className: clsx_default2(classes == null ? void 0 : classes.item, index === 0 && `${startClass}`, index === orderedColors.length - 1 && `${endClass}`),
          children: [isTextBefore && (0, import_jsx_runtime31.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: label
          }), (0, import_jsx_runtime31.jsx)(ChartsLabelMark, {
            className: classes == null ? void 0 : classes.mark,
            type: markType,
            color
          }), isTextAfter && (0, import_jsx_runtime31.jsx)(ChartsLabel, {
            className: classes == null ? void 0 : classes.label,
            children: label
          })]
        })
      }, colorIndex);
    })
  }));
});
true ? PiecewiseColorLegend.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The axis direction containing the color configuration to represent.
   * @default 'z'
   */
  axisDirection: import_prop_types26.default.oneOf(["x", "y", "z"]),
  /**
   * The id of the axis item with the color configuration to represent.
   * @default The first axis item.
   */
  axisId: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types26.default.object,
  className: import_prop_types26.default.string,
  /**
   * The direction of the legend layout.
   * @default 'horizontal'
   */
  direction: import_prop_types26.default.oneOf(["horizontal", "vertical"]),
  /**
   * Format the legend labels.
   * @param {PiecewiseLabelFormatterParams} params The bound of the piece to format.
   * @returns {string|null} The displayed label, `''` to skip the label but show the color mark, or `null` to skip it entirely.
   */
  labelFormatter: import_prop_types26.default.func,
  /**
   * Where to position the labels relative to the gradient.
   * @default 'extremes'
   */
  labelPosition: import_prop_types26.default.oneOf(["start", "end", "extremes"]),
  /**
   * The type of the mark.
   * @default 'square'
   */
  markType: import_prop_types26.default.oneOf(["square", "circle", "line"]),
  /**
   * Callback fired when a legend item is clicked.
   * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event The click event.
   * @param {PiecewiseColorLegendItemContext} legendItem The legend item data.
   * @param {number} index The index of the clicked legend item.
   */
  onItemClick: import_prop_types26.default.func,
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlight.js
var React61 = __toESM(require_react(), 1);
var import_prop_types27 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/chartsAxisHighlightClasses.js
function getAxisHighlightUtilityClass(slot) {
  return generateUtilityClass("MuiChartsAxisHighlight", slot);
}
var chartsAxisHighlightClasses = generateUtilityClasses("MuiChartsAxisHighlight", ["root"]);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsYAxisHighlight.js
var React59 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlightPath.js
var ChartsAxisHighlightPath = styled_default("path", {
  name: "MuiChartsAxisHighlight",
  slot: "Root"
})(({
  theme
}) => ({
  pointerEvents: "none",
  variants: [{
    props: {
      axisHighlight: "band"
    },
    style: _extends({
      fill: "white",
      fillOpacity: 0.1
    }, theme.applyStyles("light", {
      fill: "gray"
    }))
  }, {
    props: {
      axisHighlight: "line"
    },
    style: _extends({
      strokeDasharray: "5 2",
      stroke: "#ffffff"
    }, theme.applyStyles("light", {
      stroke: "#000000"
    }))
  }]
}));

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsYAxisHighlight.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
function ChartsYHighlight(props) {
  const {
    type,
    classes
  } = props;
  const {
    left: left2,
    width
  } = useDrawingArea();
  const yScale = useYScale();
  const store = useStore();
  const axisYValue = useSelector(store, selectorChartsInteractionYAxisValue);
  const getYPosition = getValueToPositionMapper(yScale);
  const isBandScaleY = type === "band" && axisYValue !== null && isBandScale(yScale);
  if (true) {
    const isError = isBandScaleY && yScale(axisYValue) === void 0;
    if (isError) {
      console.error([`MUI X Charts: The position value provided for the axis is not valid for the current scale.`, `This probably means something is wrong with the data passed to the chart.`, `The ChartsAxisHighlight component will not be displayed.`].join("\n"));
    }
  }
  return (0, import_jsx_runtime32.jsxs)(React59.Fragment, {
    children: [isBandScaleY && yScale(axisYValue) !== void 0 && (0, import_jsx_runtime32.jsx)(ChartsAxisHighlightPath, {
      d: `M ${left2} ${// @ts-expect-error, yScale value is checked in the statement above
      yScale(axisYValue) - (yScale.step() - yScale.bandwidth()) / 2} l 0 ${yScale.step()} l ${width} 0 l 0 ${-yScale.step()} Z`,
      className: classes.root,
      ownerState: {
        axisHighlight: "band"
      }
    }), type === "line" && axisYValue !== null && (0, import_jsx_runtime32.jsx)(ChartsAxisHighlightPath, {
      d: `M ${left2} ${getYPosition(axisYValue)} L ${left2 + width} ${getYPosition(axisYValue)}`,
      className: classes.root,
      ownerState: {
        axisHighlight: "line"
      }
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsXAxisHighlight.js
var React60 = __toESM(require_react(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
function ChartsXHighlight(props) {
  const {
    type,
    classes
  } = props;
  const {
    top: top2,
    height
  } = useDrawingArea();
  const xScale = useXScale();
  const store = useStore();
  const axisXValue = useSelector(store, selectorChartsInteractionXAxisValue);
  const getXPosition = getValueToPositionMapper(xScale);
  const isBandScaleX = type === "band" && axisXValue !== null && isBandScale(xScale);
  if (true) {
    const isError = isBandScaleX && xScale(axisXValue) === void 0;
    if (isError) {
      console.error([`MUI X Charts: The position value provided for the axis is not valid for the current scale.`, `This probably means something is wrong with the data passed to the chart.`, `The ChartsAxisHighlight component will not be displayed.`].join("\n"));
    }
  }
  return (0, import_jsx_runtime33.jsxs)(React60.Fragment, {
    children: [isBandScaleX && xScale(axisXValue) !== void 0 && (0, import_jsx_runtime33.jsx)(
      ChartsAxisHighlightPath,
      {
        d: `M ${xScale(axisXValue) - (xScale.step() - xScale.bandwidth()) / 2} ${top2} l ${xScale.step()} 0 l 0 ${height} l ${-xScale.step()} 0 Z`,
        className: classes.root,
        ownerState: {
          axisHighlight: "band"
        }
      }
    ), type === "line" && axisXValue !== null && (0, import_jsx_runtime33.jsx)(ChartsAxisHighlightPath, {
      d: `M ${getXPosition(axisXValue)} ${top2} L ${getXPosition(axisXValue)} ${top2 + height}`,
      className: classes.root,
      ownerState: {
        axisHighlight: "line"
      }
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsAxisHighlight/ChartsAxisHighlight.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses13 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAxisHighlightUtilityClass);
};
function ChartsAxisHighlight(props) {
  const {
    x: xAxisHighlight,
    y: yAxisHighlight
  } = props;
  const classes = useUtilityClasses13();
  return (0, import_jsx_runtime34.jsxs)(React61.Fragment, {
    children: [xAxisHighlight && (0, import_jsx_runtime34.jsx)(ChartsXHighlight, {
      type: xAxisHighlight,
      classes
    }), yAxisHighlight && (0, import_jsx_runtime34.jsx)(ChartsYHighlight, {
      type: yAxisHighlight,
      classes
    })]
  });
}
true ? ChartsAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  x: import_prop_types27.default.oneOf(["band", "line", "none"]),
  y: import_prop_types27.default.oneOf(["band", "line", "none"])
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarChart.js
var React93 = __toESM(require_react(), 1);
var import_prop_types41 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarPlot.js
var React69 = __toESM(require_react(), 1);
var import_prop_types31 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/barElementClasses.js
function getBarElementUtilityClass(slot) {
  return generateUtilityClass("MuiBarElement", slot);
}
var barElementClasses = generateUtilityClasses("MuiBarElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses14 = (ownerState) => {
  const {
    classes,
    id,
    isHighlighted,
    isFaded
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getBarElementUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/BarChart/BarElement.js
var React64 = __toESM(require_react(), 1);
var import_prop_types28 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/useInteractionItemProps.js
var React62 = __toESM(require_react(), 1);
var onPointerDown = (event) => {
  if ("hasPointerCapture" in event.currentTarget && event.currentTarget.hasPointerCapture(event.pointerId)) {
    event.currentTarget.releasePointerCapture(event.pointerId);
  }
};
var useInteractionItemProps = (data, skip) => {
  const {
    instance
  } = useChartContext();
  const interactionActive = React62.useRef(false);
  const onPointerEnter = React62.useCallback(() => {
    interactionActive.current = true;
    instance.setItemInteraction({
      type: data.type,
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
    instance.setHighlight({
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
  }, [instance, data.type, data.seriesId, data.dataIndex]);
  const onPointerLeave = React62.useCallback(() => {
    interactionActive.current = false;
    instance.removeItemInteraction({
      type: data.type,
      seriesId: data.seriesId,
      dataIndex: data.dataIndex
    });
    instance.clearHighlight();
  }, [instance, data.type, data.seriesId, data.dataIndex]);
  React62.useEffect(() => {
    return () => {
      if (interactionActive.current) {
        onPointerLeave();
      }
    };
  }, [onPointerLeave]);
  if (skip) {
    return {};
  }
  return {
    onPointerEnter,
    onPointerLeave,
    onPointerDown
  };
};
var useInteractionAllItemProps = (data, skip) => {
  const {
    instance
  } = useChartContext();
  const results = React62.useMemo(() => {
    return data.map((item) => {
      if (skip) {
        return {};
      }
      const onPointerEnter = () => {
        if (!item) {
          return;
        }
        instance.setItemInteraction(item);
        instance.setHighlight({
          seriesId: item.seriesId,
          dataIndex: item.dataIndex
        });
      };
      const onPointerLeave = () => {
        if (!item) {
          return;
        }
        instance.removeItemInteraction(item);
        instance.clearHighlight();
      };
      return {
        onPointerEnter,
        onPointerLeave,
        onPointerDown
      };
    });
  }, [data, instance, skip]);
  return results;
};

// node_modules/@mui/x-charts/esm/BarChart/AnimatedBarElement.js
var React63 = __toESM(require_react(), 1);
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var _excluded15 = ["ownerState", "skipAnimation", "id", "dataIndex", "xOrigin", "yOrigin"];
function AnimatedBarElement(props) {
  const {
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const animatedProps = useAnimateBar(props);
  return (0, import_jsx_runtime35.jsx)("rect", _extends({}, other, {
    filter: ownerState.isHighlighted ? "brightness(120%)" : void 0,
    opacity: ownerState.isFaded ? 0.3 : 1
  }, animatedProps));
}

// node_modules/@mui/x-charts/esm/BarChart/BarElement.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var _excluded16 = ["id", "dataIndex", "classes", "color", "slots", "slotProps", "style", "onClick", "skipAnimation", "layout", "x", "xOrigin", "y", "yOrigin", "width", "height"];
function BarElement(props) {
  const {
    id,
    dataIndex,
    classes: innerClasses,
    color,
    slots,
    slotProps,
    style,
    onClick,
    skipAnimation,
    layout,
    x,
    xOrigin,
    y,
    yOrigin,
    width,
    height
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const interactionProps = useInteractionItemProps({
    type: "bar",
    seriesId: id,
    dataIndex
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id,
    dataIndex
  });
  const ownerState = {
    id,
    dataIndex,
    classes: innerClasses,
    color,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses14(ownerState);
  const Bar = (slots == null ? void 0 : slots.bar) ?? AnimatedBarElement;
  const barProps = useSlotProps_default({
    elementType: Bar,
    externalSlotProps: slotProps == null ? void 0 : slotProps.bar,
    externalForwardedProps: other,
    additionalProps: _extends({}, interactionProps, {
      id,
      dataIndex,
      color,
      x,
      xOrigin,
      y,
      yOrigin,
      width,
      height,
      style,
      onClick,
      cursor: onClick ? "pointer" : "unset",
      stroke: "none",
      fill: color,
      skipAnimation,
      layout
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime36.jsx)(Bar, _extends({}, barProps));
}
true ? BarElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types28.default.object,
  dataIndex: import_prop_types28.default.number.isRequired,
  id: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]).isRequired,
  layout: import_prop_types28.default.oneOf(["horizontal", "vertical"]).isRequired,
  skipAnimation: import_prop_types28.default.bool.isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types28.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types28.default.object,
  xOrigin: import_prop_types28.default.number.isRequired,
  yOrigin: import_prop_types28.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarClipPath.js
var React65 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/getRadius.js
var getRadius = (corner, {
  hasNegative,
  hasPositive,
  borderRadius,
  layout
}) => {
  if (!borderRadius) {
    return 0;
  }
  const isVertical = layout === "vertical";
  if (corner === "top-left" && (isVertical && hasPositive || !isVertical && hasNegative)) {
    return borderRadius;
  }
  if (corner === "top-right" && (isVertical && hasPositive || !isVertical && hasPositive)) {
    return borderRadius;
  }
  if (corner === "bottom-right" && (isVertical && hasNegative || !isVertical && hasPositive)) {
    return borderRadius;
  }
  if (corner === "bottom-left" && (isVertical && hasNegative || !isVertical && hasNegative)) {
    return borderRadius;
  }
  return 0;
};

// node_modules/@mui/x-charts/esm/BarChart/BarClipPath.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var _excluded17 = ["maskId", "x", "y", "width", "height", "skipAnimation"];
function buildClipPath(size, borderRadius, ownerState) {
  const radiusData = _extends({}, ownerState, {
    borderRadius
  });
  const topLeft = Math.min(size, getRadius("top-left", radiusData));
  const topRight = Math.min(size, getRadius("top-right", radiusData));
  const bottomRight = Math.min(size, getRadius("bottom-right", radiusData));
  const bottomLeft = Math.min(size, getRadius("bottom-left", radiusData));
  return `inset(0px round ${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px)`;
}
function barClipRectPropsInterpolator(from, to) {
  const interpolateX = number_default(from.x, to.x);
  const interpolateY = number_default(from.y, to.y);
  const interpolateWidth = number_default(from.width, to.width);
  const interpolateHeight = number_default(from.height, to.height);
  const interpolateBorderRadius = number_default(from.borderRadius, to.borderRadius);
  return (t) => {
    return {
      x: interpolateX(t),
      y: interpolateY(t),
      width: interpolateWidth(t),
      height: interpolateHeight(t),
      borderRadius: interpolateBorderRadius(t)
    };
  };
}
function useAnimateBarClipRect(props) {
  const initialProps = {
    x: props.x,
    y: props.y + (props.ownerState.layout === "vertical" ? props.height : 0),
    width: props.ownerState.layout === "vertical" ? props.width : 0,
    height: props.ownerState.layout === "vertical" ? 0 : props.height,
    borderRadius: props.borderRadius
  };
  return useAnimate({
    x: props.x,
    y: props.y,
    width: props.width,
    height: props.height,
    borderRadius: props.borderRadius
  }, {
    createInterpolator: barClipRectPropsInterpolator,
    transformProps: (p) => ({
      x: p.x,
      y: p.y,
      width: p.width,
      height: p.height,
      style: {
        clipPath: buildClipPath(props.ownerState.layout === "vertical" ? p.height : p.width, p.borderRadius, props.ownerState)
      }
    }),
    applyProps(element, animatedProps) {
      element.setAttribute("x", animatedProps.x.toString());
      element.setAttribute("y", animatedProps.y.toString());
      element.setAttribute("width", animatedProps.width.toString());
      element.setAttribute("height", animatedProps.height.toString());
      element.style.clipPath = animatedProps.style.clipPath;
    },
    initialProps,
    skip: props.skipAnimation,
    ref: props.ref
  });
}
function BarClipRect(props) {
  const animatedProps = useAnimateBarClipRect(_extends({}, props, {
    borderRadius: props.ownerState.borderRadius ?? 0
  }));
  return (0, import_jsx_runtime37.jsx)("rect", _extends({}, animatedProps));
}
function BarClipPath(props) {
  const {
    maskId,
    x,
    y,
    width,
    height,
    skipAnimation
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded17);
  if (!props.borderRadius || props.borderRadius <= 0) {
    return null;
  }
  return (0, import_jsx_runtime37.jsx)("clipPath", {
    id: maskId,
    children: (0, import_jsx_runtime37.jsx)(BarClipRect, {
      ownerState: rest,
      x,
      y,
      width,
      height,
      skipAnimation
    })
  });
}

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelPlot.js
var React68 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelItem.js
var React67 = __toESM(require_react(), 1);
var import_prop_types30 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/barLabelClasses.js
function getBarLabelUtilityClass(slot) {
  return generateUtilityClass("MuiBarLabel", slot);
}
var barLabelClasses = generateUtilityClasses("MuiBarLabel", ["root", "highlighted", "faded", "animate"]);
var useUtilityClasses15 = (ownerState) => {
  const {
    classes,
    seriesId,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${seriesId}`, isHighlighted && "highlighted", isFaded && "faded", !skipAnimation && "animate"]
  };
  return composeClasses(slots, getBarLabelUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/getBarLabel.js
var getBarLabel = (options) => {
  const {
    barLabel,
    value,
    dataIndex,
    seriesId,
    height,
    width
  } = options;
  if (barLabel === "value") {
    return value ? value == null ? void 0 : value.toString() : null;
  }
  return barLabel({
    seriesId,
    dataIndex,
    value
  }, {
    bar: {
      height,
      width
    }
  });
};

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabel.js
var React66 = __toESM(require_react(), 1);
var import_prop_types29 = __toESM(require_prop_types(), 1);
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var _excluded18 = ["seriesId", "dataIndex", "color", "isFaded", "isHighlighted", "classes", "skipAnimation", "layout", "xOrigin", "yOrigin"];
var BarLabelComponent = styled_default("text", {
  name: "MuiBarLabel",
  slot: "Root",
  overridesResolver: (_, styles) => [{
    [`&.${barLabelClasses.faded}`]: styles.faded
  }, {
    [`&.${barLabelClasses.highlighted}`]: styles.highlighted
  }, styles.root]
})(({
  theme
}) => {
  var _a, _b, _c, _d;
  return _extends({}, (_a = theme == null ? void 0 : theme.typography) == null ? void 0 : _a.body2, {
    stroke: "none",
    fill: (_d = (_c = (_b = theme.vars || theme) == null ? void 0 : _b.palette) == null ? void 0 : _c.text) == null ? void 0 : _d.primary,
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in",
    textAnchor: "middle",
    dominantBaseline: "central",
    pointerEvents: "none",
    opacity: 1,
    [`&.${barLabelClasses.faded}`]: {
      opacity: 0.3
    }
  });
});
function BarLabel(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiBarLabel"
  });
  const otherProps = _objectWithoutPropertiesLoose(props, _excluded18);
  const animatedProps = useAnimateBarLabel(props);
  return (0, import_jsx_runtime38.jsx)(BarLabelComponent, _extends({}, otherProps, animatedProps));
}
true ? BarLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types29.default.object,
  dataIndex: import_prop_types29.default.number.isRequired,
  /**
   * Height of the bar this label belongs to.
   */
  height: import_prop_types29.default.number.isRequired,
  isFaded: import_prop_types29.default.bool.isRequired,
  isHighlighted: import_prop_types29.default.bool.isRequired,
  layout: import_prop_types29.default.oneOf(["horizontal", "vertical"]).isRequired,
  seriesId: import_prop_types29.default.oneOfType([import_prop_types29.default.number, import_prop_types29.default.string]).isRequired,
  skipAnimation: import_prop_types29.default.bool.isRequired,
  /**
   * Width of the bar this label belongs to.
   */
  width: import_prop_types29.default.number.isRequired,
  /**
   * Position in the x-axis of the bar this label belongs to.
   */
  x: import_prop_types29.default.number.isRequired,
  /**
   * The x-coordinate of the stack this bar label belongs to.
   */
  xOrigin: import_prop_types29.default.number.isRequired,
  /**
   * Position in the y-axis of the bar this label belongs to.
   */
  y: import_prop_types29.default.number.isRequired,
  /**
   * The y-coordinate of the stack this bar label belongs to.
   */
  yOrigin: import_prop_types29.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelItem.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var _excluded19 = ["seriesId", "classes", "color", "dataIndex", "barLabel", "slots", "slotProps", "xOrigin", "yOrigin", "x", "y", "width", "height", "value", "skipAnimation", "layout"];
var _excluded24 = ["ownerState"];
function BarLabelItem(props) {
  const {
    seriesId,
    classes: innerClasses,
    color,
    dataIndex,
    barLabel,
    slots,
    slotProps,
    xOrigin,
    yOrigin,
    x,
    y,
    width,
    height,
    value,
    skipAnimation,
    layout
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId,
    dataIndex
  });
  const ownerState = {
    seriesId,
    classes: innerClasses,
    color,
    isFaded,
    isHighlighted,
    dataIndex,
    skipAnimation,
    layout
  };
  const classes = useUtilityClasses15(ownerState);
  const Component = (slots == null ? void 0 : slots.barLabel) ?? BarLabel;
  const _useSlotProps = useSlotProps_default({
    elementType: Component,
    externalSlotProps: slotProps == null ? void 0 : slotProps.barLabel,
    additionalProps: _extends({}, other, {
      xOrigin,
      yOrigin,
      x,
      y,
      width,
      height,
      className: classes.root
    }),
    ownerState
  }), {
    ownerState: barLabelOwnerState
  } = _useSlotProps, barLabelProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded24);
  if (!barLabel) {
    return null;
  }
  const formattedLabelText = getBarLabel({
    barLabel,
    value,
    dataIndex,
    seriesId,
    height,
    width
  });
  if (!formattedLabelText) {
    return null;
  }
  return (0, import_jsx_runtime39.jsx)(Component, _extends({}, barLabelProps, barLabelOwnerState, {
    children: formattedLabelText
  }));
}
true ? BarLabelItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["value"]), import_prop_types30.default.func]),
  classes: import_prop_types30.default.object,
  color: import_prop_types30.default.string.isRequired,
  dataIndex: import_prop_types30.default.number.isRequired,
  /**
   * The height of the bar.
   */
  height: import_prop_types30.default.number.isRequired,
  seriesId: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types30.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types30.default.object,
  /**
   * The value of the data point.
   */
  value: import_prop_types30.default.number,
  /**
   * The width of the bar.
   */
  width: import_prop_types30.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/BarChart/BarLabel/BarLabelPlot.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var _excluded20 = ["bars", "skipAnimation"];
function BarLabelPlot(props) {
  const {
    bars,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  return (0, import_jsx_runtime40.jsx)(React68.Fragment, {
    children: bars.map(({
      xOrigin,
      yOrigin,
      x,
      y,
      seriesId,
      dataIndex,
      color,
      value,
      width,
      height,
      layout
    }) => (0, import_jsx_runtime40.jsx)(BarLabelItem, _extends({
      seriesId,
      dataIndex,
      value,
      color,
      xOrigin,
      yOrigin,
      x,
      y,
      width,
      height,
      skipAnimation: skipAnimation ?? false,
      layout: layout ?? "vertical"
    }, other), `${seriesId}-${dataIndex}`))
  });
}

// node_modules/@mui/x-charts/esm/BarChart/checkScaleErrors.js
var getAxisMessage = (axisDirection, axisId) => {
  const axisName = `${axisDirection}-axis`;
  const axisIdName = `${axisDirection}Axis`;
  const axisDefaultKey = axisDirection === "x" ? DEFAULT_X_AXIS_KEY : DEFAULT_Y_AXIS_KEY;
  return axisId === axisDefaultKey ? `The first \`${axisIdName}\`` : `The ${axisName} with id "${axisId}"`;
};
function checkScaleErrors(verticalLayout, seriesId, series, xAxisId, xAxis, yAxisId, yAxis) {
  const xAxisConfig = xAxis[xAxisId];
  const yAxisConfig = yAxis[yAxisId];
  const discreteAxisConfig = verticalLayout ? xAxisConfig : yAxisConfig;
  const continuousAxisConfig = verticalLayout ? yAxisConfig : xAxisConfig;
  const discreteAxisId = verticalLayout ? xAxisId : yAxisId;
  const continuousAxisId = verticalLayout ? yAxisId : xAxisId;
  const discreteAxisDirection = verticalLayout ? "x" : "y";
  const continuousAxisDirection = verticalLayout ? "y" : "x";
  if (!isBandScaleConfig(discreteAxisConfig)) {
    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} should be of type "band" to display the bar series of id "${seriesId}".`);
  }
  if (discreteAxisConfig.data === void 0) {
    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} should have data property.`);
  }
  if (isBandScaleConfig(continuousAxisConfig) || isPointScaleConfig(continuousAxisConfig)) {
    throw new Error(`MUI X Charts: ${getAxisMessage(continuousAxisDirection, continuousAxisId)} should be a continuous type to display the bar series of id "${seriesId}".`);
  }
  if (true) {
    if (discreteAxisConfig.data.length < series.stackedData.length) {
      warnOnce([`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisId)} has less data (${discreteAxisConfig.data.length} values) than the bar series of id "${seriesId}" (${series.stackedData.length} values).`, "The axis data should have at least the same length than the series using it."], "error");
    }
  }
}

// node_modules/@mui/x-charts/esm/hooks/useSkipAnimation.js
function useSkipAnimation(skipAnimation) {
  const store = useStore();
  const storeSkipAnimation = useSelector(store, selectorChartSkipAnimation);
  return skipAnimation || storeSkipAnimation;
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useInternalIsZoomInteracting.js
function useInternalIsZoomInteracting() {
  const store = useStore();
  const isInteracting = useSelector(store, selectorChartZoomIsInteracting);
  return isInteracting;
}

// node_modules/@mui/x-charts/esm/BarChart/BarPlot.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var _excluded21 = ["skipAnimation", "onItemClick", "borderRadius", "barLabel"];
function getBandSize({
  bandWidth: W,
  numberOfGroups: N,
  gapRatio: r4
}) {
  if (r4 === 0) {
    return {
      barWidth: W / N,
      offset: 0
    };
  }
  const barWidth = W / (N + (N - 1) * r4);
  const offset2 = r4 * barWidth;
  return {
    barWidth,
    offset: offset2
  };
}
var useAggregatedData = () => {
  const seriesData = useBarSeriesContext() ?? {
    series: {},
    stackingGroups: [],
    seriesOrder: []
  };
  const drawingArea = useDrawingArea();
  const chartId = useChartId2();
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const masks = {};
  const data = stackingGroups.flatMap(({
    ids: groupIds
  }, groupIndex) => {
    const xMin = drawingArea.left;
    const xMax = drawingArea.left + drawingArea.width;
    const yMin = drawingArea.top;
    const yMax = drawingArea.top + drawingArea.height;
    return groupIds.flatMap((seriesId) => {
      const xAxisId = series[seriesId].xAxisId ?? defaultXAxisId;
      const yAxisId = series[seriesId].yAxisId ?? defaultYAxisId;
      const xAxisConfig = xAxis[xAxisId];
      const yAxisConfig = yAxis[yAxisId];
      const verticalLayout = series[seriesId].layout === "vertical";
      checkScaleErrors(verticalLayout, seriesId, series[seriesId], xAxisId, xAxis, yAxisId, yAxis);
      const baseScaleConfig = verticalLayout ? xAxisConfig : yAxisConfig;
      const xScale = xAxisConfig.scale;
      const yScale = yAxisConfig.scale;
      const colorGetter = getColor_default(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
      const bandWidth = baseScaleConfig.scale.bandwidth();
      const {
        barWidth,
        offset: offset2
      } = getBandSize({
        bandWidth,
        numberOfGroups: stackingGroups.length,
        gapRatio: baseScaleConfig.barGapRatio
      });
      const barOffset = groupIndex * (barWidth + offset2);
      const {
        stackedData,
        data: currentSeriesData,
        layout
      } = series[seriesId];
      return baseScaleConfig.data.map((baseValue, dataIndex) => {
        if (currentSeriesData[dataIndex] == null) {
          return null;
        }
        const values = stackedData[dataIndex];
        const valueCoordinates = values.map((v2) => verticalLayout ? yScale(v2) : xScale(v2));
        const minValueCoord = Math.round(Math.min(...valueCoordinates));
        const maxValueCoord = Math.round(Math.max(...valueCoordinates));
        const stackId = series[seriesId].stack;
        const result = {
          seriesId,
          dataIndex,
          layout,
          x: verticalLayout ? xScale(baseValue) + barOffset : minValueCoord,
          y: verticalLayout ? minValueCoord : yScale(baseValue) + barOffset,
          xOrigin: xScale(0) ?? 0,
          yOrigin: yScale(0) ?? 0,
          height: verticalLayout ? maxValueCoord - minValueCoord : barWidth,
          width: verticalLayout ? barWidth : maxValueCoord - minValueCoord,
          color: colorGetter(dataIndex),
          value: currentSeriesData[dataIndex],
          maskId: `${chartId}_${stackId || seriesId}_${groupIndex}_${dataIndex}`
        };
        if (result.x > xMax || result.x + result.width < xMin || result.y > yMax || result.y + result.height < yMin) {
          return null;
        }
        if (!masks[result.maskId]) {
          masks[result.maskId] = {
            id: result.maskId,
            width: 0,
            height: 0,
            hasNegative: false,
            hasPositive: false,
            layout: result.layout,
            xOrigin: xScale(0),
            yOrigin: yScale(0),
            x: 0,
            y: 0
          };
        }
        const mask = masks[result.maskId];
        mask.width = result.layout === "vertical" ? result.width : mask.width + result.width;
        mask.height = result.layout === "vertical" ? mask.height + result.height : result.height;
        mask.x = Math.min(mask.x === 0 ? Infinity : mask.x, result.x);
        mask.y = Math.min(mask.y === 0 ? Infinity : mask.y, result.y);
        mask.hasNegative = mask.hasNegative || (result.value ?? 0) < 0;
        mask.hasPositive = mask.hasPositive || (result.value ?? 0) > 0;
        return result;
      }).filter((rectangle) => rectangle !== null);
    });
  });
  return {
    completedData: data,
    masksData: Object.values(masks)
  };
};
var BarPlotRoot = styled_default("g", {
  name: "MuiBarPlot",
  slot: "Root"
})({
  [`& .${barElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
function BarPlot(props) {
  const {
    completedData,
    masksData
  } = useAggregatedData();
  const {
    skipAnimation: inSkipAnimation,
    onItemClick,
    borderRadius,
    barLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const withoutBorderRadius = !borderRadius || borderRadius <= 0;
  return (0, import_jsx_runtime41.jsxs)(BarPlotRoot, {
    children: [!withoutBorderRadius && masksData.map(({
      id,
      x,
      y,
      width,
      height,
      hasPositive,
      hasNegative,
      layout
    }) => {
      return (0, import_jsx_runtime41.jsx)(BarClipPath, {
        maskId: id,
        borderRadius,
        hasNegative,
        hasPositive,
        layout,
        x,
        y,
        width,
        height,
        skipAnimation: skipAnimation ?? false
      }, id);
    }), completedData.map(({
      seriesId,
      dataIndex,
      color,
      maskId,
      layout,
      x,
      xOrigin,
      y,
      yOrigin,
      width,
      height
    }) => {
      const barElement = (0, import_jsx_runtime41.jsx)(BarElement, _extends({
        id: seriesId,
        dataIndex,
        color,
        skipAnimation: skipAnimation ?? false,
        layout: layout ?? "vertical",
        x,
        xOrigin,
        y,
        yOrigin,
        width,
        height
      }, other, {
        onClick: onItemClick && ((event) => {
          onItemClick(event, {
            type: "bar",
            seriesId,
            dataIndex
          });
        })
      }), `${seriesId}-${dataIndex}`);
      if (withoutBorderRadius) {
        return barElement;
      }
      return (0, import_jsx_runtime41.jsx)("g", {
        clipPath: `url(#${maskId})`,
        children: barElement
      }, `${seriesId}-${dataIndex}`);
    }), barLabel && (0, import_jsx_runtime41.jsx)(BarLabelPlot, _extends({
      bars: completedData,
      skipAnimation,
      barLabel
    }, other))]
  });
}
true ? BarPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["value"]), import_prop_types31.default.func]),
  /**
   * Defines the border radius of the bar element.
   */
  borderRadius: import_prop_types31.default.number,
  /**
   * Callback fired when a bar item is clicked.
   * @param {React.MouseEvent<SVGElement, MouseEvent>} event The event source of the callback.
   * @param {BarItemIdentifier} barItemIdentifier The bar item identifier.
   */
  onItemClick: import_prop_types31.default.func,
  /**
   * If `true`, animations are skipped.
   * @default undefined
   */
  skipAnimation: import_prop_types31.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types31.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types31.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsOverlay.js
var React72 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsLoadingOverlay.js
var React70 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var _excluded25 = ["message"];
var StyledText = styled_default("text")(({
  theme
}) => _extends({}, theme.typography.body2, {
  stroke: "none",
  fill: (theme.vars || theme).palette.text.primary,
  shapeRendering: "crispEdges",
  textAnchor: "middle",
  dominantBaseline: "middle"
}));
function ChartsLoadingOverlay(props) {
  const {
    message
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const {
    top: top2,
    left: left2,
    height,
    width
  } = useDrawingArea();
  const {
    localeText
  } = useChartsLocalization();
  return (0, import_jsx_runtime42.jsx)(StyledText, _extends({
    x: left2 + width / 2,
    y: top2 + height / 2
  }, other, {
    children: message ?? localeText.loading
  }));
}

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsNoDataOverlay.js
var React71 = __toESM(require_react(), 1);
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var _excluded26 = ["message"];
var StyledText2 = styled_default("text")(({
  theme
}) => _extends({}, theme.typography.body2, {
  stroke: "none",
  fill: (theme.vars || theme).palette.text.primary,
  shapeRendering: "crispEdges",
  textAnchor: "middle",
  dominantBaseline: "middle"
}));
function ChartsNoDataOverlay(props) {
  const {
    message
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const {
    top: top2,
    left: left2,
    height,
    width
  } = useDrawingArea();
  const {
    localeText
  } = useChartsLocalization();
  return (0, import_jsx_runtime43.jsx)(StyledText2, _extends({
    x: left2 + width / 2,
    y: top2 + height / 2
  }, other, {
    children: message ?? localeText.noData
  }));
}

// node_modules/@mui/x-charts/esm/ChartsOverlay/ChartsOverlay.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
function useNoData() {
  const seriesPerType = useSeries();
  return Object.values(seriesPerType).every((seriesOfGivenType) => {
    if (!seriesOfGivenType) {
      return true;
    }
    const {
      series,
      seriesOrder
    } = seriesOfGivenType;
    return seriesOrder.every((seriesId) => series[seriesId].data.length === 0);
  });
}
function ChartsOverlay(props) {
  var _a, _b, _c, _d;
  const noData = useNoData();
  if (props.loading) {
    const LoadingOverlay = ((_a = props.slots) == null ? void 0 : _a.loadingOverlay) ?? ChartsLoadingOverlay;
    return (0, import_jsx_runtime44.jsx)(LoadingOverlay, _extends({}, (_b = props.slotProps) == null ? void 0 : _b.loadingOverlay));
  }
  if (noData) {
    const NoDataOverlay = ((_c = props.slots) == null ? void 0 : _c.noDataOverlay) ?? ChartsNoDataOverlay;
    return (0, import_jsx_runtime44.jsx)(NoDataOverlay, _extends({}, (_d = props.slotProps) == null ? void 0 : _d.noDataOverlay));
  }
  return null;
}

// node_modules/@mui/x-charts/esm/BarChart/useBarChartProps.js
var React73 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/BarChart/BarChart.plugins.js
var BAR_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/BarChart/useBarChartProps.js
var _excluded27 = ["xAxis", "yAxis", "series", "width", "height", "margin", "colors", "dataset", "sx", "axisHighlight", "grid", "children", "slots", "slotProps", "skipAnimation", "loading", "layout", "onItemClick", "highlightedItem", "onHighlightChange", "borderRadius", "barLabel", "className", "hideLegend", "showToolbar"];
var useBarChartProps = (props) => {
  var _a, _b, _c, _d, _e;
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    axisHighlight,
    grid,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    layout,
    onItemClick,
    highlightedItem,
    onHighlightChange,
    borderRadius,
    barLabel,
    className
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded27);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const hasHorizontalSeries = layout === "horizontal" || layout === void 0 && series.some((item) => item.layout === "horizontal");
  const defaultBandXAxis = React73.useMemo(() => [{
    id: DEFAULT_X_AXIS_KEY,
    scaleType: "band",
    data: Array.from({
      length: Math.max(...series.map((s) => (s.data ?? dataset ?? []).length))
    }, (_, index) => index)
  }], [dataset, series]);
  const defaultBandYAxis = React73.useMemo(() => [{
    id: DEFAULT_Y_AXIS_KEY,
    scaleType: "band",
    data: Array.from({
      length: Math.max(...series.map((s) => (s.data ?? dataset ?? []).length))
    }, (_, index) => index)
  }], [dataset, series]);
  const seriesWithDefault = React73.useMemo(() => series.map((s) => _extends({
    type: "bar"
  }, s, {
    layout: hasHorizontalSeries ? "horizontal" : "vertical"
  })), [hasHorizontalSeries, series]);
  const defaultXAxis = hasHorizontalSeries ? void 0 : defaultBandXAxis;
  const processedXAxis = React73.useMemo(() => {
    if (!xAxis) {
      return defaultXAxis;
    }
    return hasHorizontalSeries ? xAxis : xAxis.map((axis) => _extends({
      scaleType: "band"
    }, axis));
  }, [defaultXAxis, hasHorizontalSeries, xAxis]);
  const defaultYAxis = hasHorizontalSeries ? defaultBandYAxis : void 0;
  const processedYAxis = React73.useMemo(() => {
    if (!yAxis) {
      return defaultYAxis;
    }
    return hasHorizontalSeries ? yAxis.map((axis) => _extends({
      scaleType: "band"
    }, axis)) : yAxis;
  }, [defaultYAxis, hasHorizontalSeries, yAxis]);
  const chartContainerProps = _extends({}, rest, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    dataset,
    xAxis: processedXAxis,
    yAxis: processedYAxis,
    highlightedItem,
    onHighlightChange,
    disableAxisListener: ((_a = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _a.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    className,
    skipAnimation,
    plugins: BAR_CHART_PLUGINS
  });
  const barPlotProps = {
    onItemClick,
    slots,
    slotProps,
    borderRadius,
    barLabel
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const clipPathGroupProps = {
    clipPath: `url(#${clipPathId})`
  };
  const clipPathProps = {
    id: clipPathId
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({}, hasHorizontalSeries ? {
    y: "band"
  } : {
    x: "band"
  }, axisHighlight);
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx,
    legendPosition: (_c = (_b = props.slotProps) == null ? void 0 : _b.legend) == null ? void 0 : _c.position,
    legendDirection: (_e = (_d = props.slotProps) == null ? void 0 : _d.legend) == null ? void 0 : _e.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    barPlotProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/ChartDataProvider/ChartDataProvider.js
var React86 = __toESM(require_react(), 1);
var import_prop_types39 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/esm/IconButton/IconButton.js
var React83 = __toESM(require_react(), 1);
var import_prop_types38 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/esm/utils/createSvgIcon.js
var React75 = __toESM(require_react(), 1);

// node_modules/@mui/material/esm/SvgIcon/SvgIcon.js
var React74 = __toESM(require_react(), 1);
var import_prop_types32 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/esm/SvgIcon/svgIconClasses.js
function getSvgIconUtilityClass(slot) {
  return generateUtilityClass("MuiSvgIcon", slot);
}
var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

// node_modules/@mui/material/esm/SvgIcon/SvgIcon.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses16 = (ownerState) => {
  const {
    color,
    fontSize,
    classes
  } = ownerState;
  const slots = {
    root: ["root", color !== "inherit" && `color${capitalize_default(color)}`, `fontSize${capitalize_default(fontSize)}`]
  };
  return composeClasses(slots, getSvgIconUtilityClass, classes);
};
var SvgIconRoot = styled_default("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.color !== "inherit" && styles[`color${capitalize_default(ownerState.color)}`], styles[`fontSize${capitalize_default(ownerState.fontSize)}`]];
  }
})(memoTheme_default(({
  theme
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: (_d = (_a = theme.transitions) == null ? void 0 : _a.create) == null ? void 0 : _d.call(_a, "fill", {
      duration: (_c = (_b = (theme.vars ?? theme).transitions) == null ? void 0 : _b.duration) == null ? void 0 : _c.shorter
    }),
    variants: [
      {
        props: (props) => !props.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: ((_f = (_e = theme.typography) == null ? void 0 : _e.pxToRem) == null ? void 0 : _f.call(_e, 20)) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: ((_h = (_g = theme.typography) == null ? void 0 : _g.pxToRem) == null ? void 0 : _h.call(_g, 24)) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
          fontSize: ((_j = (_i = theme.typography) == null ? void 0 : _i.pxToRem) == null ? void 0 : _j.call(_i, 35)) || "2.1875rem"
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color]) => {
        var _a2, _b2;
        return {
          props: {
            color
          },
          style: {
            color: (_b2 = (_a2 = (theme.vars ?? theme).palette) == null ? void 0 : _a2[color]) == null ? void 0 : _b2.main
          }
        };
      }),
      {
        props: {
          color: "action"
        },
        style: {
          color: (_l = (_k = (theme.vars ?? theme).palette) == null ? void 0 : _k.action) == null ? void 0 : _l.active
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (_n = (_m = (theme.vars ?? theme).palette) == null ? void 0 : _m.action) == null ? void 0 : _n.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  };
}));
var SvgIcon = React74.forwardRef(function SvgIcon2(inProps, ref) {
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiSvgIcon"
  });
  const {
    children,
    className,
    color = "inherit",
    component = "svg",
    fontSize = "medium",
    htmlColor,
    inheritViewBox = false,
    titleAccess,
    viewBox = "0 0 24 24",
    ...other
  } = props;
  const hasSvgAsChild = React74.isValidElement(children) && children.type === "svg";
  const ownerState = {
    ...props,
    color,
    component,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox,
    hasSvgAsChild
  };
  const more = {};
  if (!inheritViewBox) {
    more.viewBox = viewBox;
  }
  const classes = useUtilityClasses16(ownerState);
  return (0, import_jsx_runtime45.jsxs)(SvgIconRoot, {
    as: component,
    className: clsx_default3(classes.root, className),
    focusable: "false",
    color: htmlColor,
    "aria-hidden": titleAccess ? void 0 : true,
    role: titleAccess ? "img" : void 0,
    ref,
    ...more,
    ...other,
    ...hasSvgAsChild && children.props,
    ownerState,
    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? (0, import_jsx_runtime45.jsx)("title", {
      children: titleAccess
    }) : null]
  });
});
true ? SvgIcon.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: import_prop_types32.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types32.default.object,
  /**
   * @ignore
   */
  className: import_prop_types32.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types32.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types32.default.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types32.default.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: import_prop_types32.default.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: import_prop_types32.default.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: import_prop_types32.default.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: import_prop_types32.default.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: import_prop_types32.default.string
} : void 0;
SvgIcon.muiName = "SvgIcon";

// node_modules/@mui/material/esm/utils/createSvgIcon.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mui/material/esm/utils/useId.js
var useId_default = useId;

// node_modules/@mui/utils/esm/useControlled/useControlled.js
var React76 = __toESM(require_react(), 1);

// node_modules/@mui/material/esm/utils/useEventCallback.js
var useEventCallback_default2 = useEventCallback_default;

// node_modules/@mui/material/esm/utils/useForkRef.js
var useForkRef_default = useForkRef;

// node_modules/@mui/material/esm/ButtonBase/ButtonBase.js
var React81 = __toESM(require_react(), 1);
var import_prop_types36 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/elementTypeAcceptingRef/elementTypeAcceptingRef.js
var import_prop_types33 = __toESM(require_prop_types(), 1);
function isClassComponent(elementType) {
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === "undefined") {
    return null;
  }
  let warningHint;
  if (typeof propValue === "function" && !isClassComponent(propValue)) {
    warningHint = "Did you accidentally provide a plain function component instead?";
  }
  if (warningHint !== void 0) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
  }
  return null;
}
var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types33.default.elementType, elementTypeAcceptingRef);

// node_modules/@mui/utils/esm/isFocusVisible/isFocusVisible.js
function isFocusVisible(element) {
  try {
    return element.matches(":focus-visible");
  } catch (error) {
    if (!/jsdom/.test(window.navigator.userAgent)) {
      console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join("\n"));
    }
  }
  return false;
}

// node_modules/@mui/material/esm/useLazyRipple/useLazyRipple.js
var React77 = __toESM(require_react(), 1);
var LazyRipple = class _LazyRipple {
  constructor() {
    __publicField(this, "mountEffect", () => {
      if (this.shouldMount && !this.didMount) {
        if (this.ref.current !== null) {
          this.didMount = true;
          this.mounted.resolve();
        }
      }
    });
    this.ref = {
      current: null
    };
    this.mounted = null;
    this.didMount = false;
    this.shouldMount = false;
    this.setShouldMount = null;
  }
  /** React ref to the ripple instance */
  /** If the ripple component should be mounted */
  /** Promise that resolves when the ripple component is mounted */
  /** If the ripple component has been mounted */
  /** React state hook setter */
  static create() {
    return new _LazyRipple();
  }
  static use() {
    const ripple = useLazyRef(_LazyRipple.create).current;
    const [shouldMount, setShouldMount] = React77.useState(false);
    ripple.shouldMount = shouldMount;
    ripple.setShouldMount = setShouldMount;
    React77.useEffect(ripple.mountEffect, [shouldMount]);
    return ripple;
  }
  mount() {
    if (!this.mounted) {
      this.mounted = createControlledPromise();
      this.shouldMount = true;
      this.setShouldMount(this.shouldMount);
    }
    return this.mounted;
  }
  /* Ripple API */
  start(...args) {
    this.mount().then(() => {
      var _a;
      return (_a = this.ref.current) == null ? void 0 : _a.start(...args);
    });
  }
  stop(...args) {
    this.mount().then(() => {
      var _a;
      return (_a = this.ref.current) == null ? void 0 : _a.stop(...args);
    });
  }
  pulsate(...args) {
    this.mount().then(() => {
      var _a;
      return (_a = this.ref.current) == null ? void 0 : _a.pulsate(...args);
    });
  }
};
function useLazyRipple() {
  return LazyRipple.use();
}
function createControlledPromise() {
  let resolve;
  let reject;
  const p = new Promise((resolveFn, rejectFn) => {
    resolve = resolveFn;
    reject = rejectFn;
  });
  p.resolve = resolve;
  p.reject = reject;
  return p;
}

// node_modules/@mui/material/esm/ButtonBase/TouchRipple.js
var React80 = __toESM(require_react(), 1);
var import_prop_types35 = __toESM(require_prop_types(), 1);

// node_modules/@mui/utils/esm/useOnMount/useOnMount.js
var React78 = __toESM(require_react(), 1);
var EMPTY = [];
function useOnMount(fn2) {
  React78.useEffect(fn2, EMPTY);
}

// node_modules/@mui/utils/esm/useTimeout/useTimeout.js
var Timeout = class _Timeout {
  constructor() {
    __publicField(this, "currentId", null);
    __publicField(this, "clear", () => {
      if (this.currentId !== null) {
        clearTimeout(this.currentId);
        this.currentId = null;
      }
    });
    __publicField(this, "disposeEffect", () => {
      return this.clear;
    });
  }
  static create() {
    return new _Timeout();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(delay, fn2) {
    this.clear();
    this.currentId = setTimeout(() => {
      this.currentId = null;
      fn2();
    }, delay);
  }
};
function useTimeout() {
  const timeout2 = useLazyRef(Timeout.create).current;
  useOnMount(timeout2.disposeEffect);
  return timeout2;
}

// node_modules/@mui/material/esm/ButtonBase/Ripple.js
var React79 = __toESM(require_react(), 1);
var import_prop_types34 = __toESM(require_prop_types(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
function Ripple(props) {
  const {
    className,
    classes,
    pulsate = false,
    rippleX,
    rippleY,
    rippleSize,
    in: inProp,
    onExited,
    timeout: timeout2
  } = props;
  const [leaving, setLeaving] = React79.useState(false);
  const rippleClassName = clsx_default3(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
  const rippleStyles = {
    width: rippleSize,
    height: rippleSize,
    top: -(rippleSize / 2) + rippleY,
    left: -(rippleSize / 2) + rippleX
  };
  const childClassName = clsx_default3(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
  if (!inProp && !leaving) {
    setLeaving(true);
  }
  React79.useEffect(() => {
    if (!inProp && onExited != null) {
      const timeoutId = setTimeout(onExited, timeout2);
      return () => {
        clearTimeout(timeoutId);
      };
    }
    return void 0;
  }, [onExited, inProp, timeout2]);
  return (0, import_jsx_runtime47.jsx)("span", {
    className: rippleClassName,
    style: rippleStyles,
    children: (0, import_jsx_runtime47.jsx)("span", {
      className: childClassName
    })
  });
}
true ? Ripple.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types34.default.object.isRequired,
  className: import_prop_types34.default.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: import_prop_types34.default.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: import_prop_types34.default.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: import_prop_types34.default.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: import_prop_types34.default.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: import_prop_types34.default.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: import_prop_types34.default.number,
  /**
   * exit delay
   */
  timeout: import_prop_types34.default.number.isRequired
} : void 0;
var Ripple_default = Ripple;

// node_modules/@mui/material/esm/ButtonBase/touchRippleClasses.js
var touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
var touchRippleClasses_default = touchRippleClasses;

// node_modules/@mui/material/esm/ButtonBase/TouchRipple.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var DURATION = 550;
var DELAY_RIPPLE = 80;
var enterKeyframe = keyframes`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
var exitKeyframe = keyframes`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
var pulsateKeyframe = keyframes`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
var TouchRippleRoot = styled_default("span", {
  name: "MuiTouchRipple",
  slot: "Root"
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
});
var TouchRippleRipple = styled_default(Ripple_default, {
  name: "MuiTouchRipple",
  slot: "Ripple"
})`
  opacity: 0;
  position: absolute;

  &.${touchRippleClasses_default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
  }

  &.${touchRippleClasses_default.ripplePulsate} {
    animation-duration: ${({
  theme
}) => theme.transitions.duration.shorter}ms;
  }

  & .${touchRippleClasses_default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${touchRippleClasses_default.childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
  }

  & .${touchRippleClasses_default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
var TouchRipple = React80.forwardRef(function TouchRipple2(inProps, ref) {
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiTouchRipple"
  });
  const {
    center: centerProp = false,
    classes = {},
    className,
    ...other
  } = props;
  const [ripples, setRipples] = React80.useState([]);
  const nextKey = React80.useRef(0);
  const rippleCallback = React80.useRef(null);
  React80.useEffect(() => {
    if (rippleCallback.current) {
      rippleCallback.current();
      rippleCallback.current = null;
    }
  }, [ripples]);
  const ignoringMouseDown = React80.useRef(false);
  const startTimer = useTimeout();
  const startTimerCommit = React80.useRef(null);
  const container = React80.useRef(null);
  const startCommit = React80.useCallback((params) => {
    const {
      pulsate: pulsate2,
      rippleX,
      rippleY,
      rippleSize,
      cb
    } = params;
    setRipples((oldRipples) => [...oldRipples, (0, import_jsx_runtime48.jsx)(TouchRippleRipple, {
      classes: {
        ripple: clsx_default3(classes.ripple, touchRippleClasses_default.ripple),
        rippleVisible: clsx_default3(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
        ripplePulsate: clsx_default3(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
        child: clsx_default3(classes.child, touchRippleClasses_default.child),
        childLeaving: clsx_default3(classes.childLeaving, touchRippleClasses_default.childLeaving),
        childPulsate: clsx_default3(classes.childPulsate, touchRippleClasses_default.childPulsate)
      },
      timeout: DURATION,
      pulsate: pulsate2,
      rippleX,
      rippleY,
      rippleSize
    }, nextKey.current)]);
    nextKey.current += 1;
    rippleCallback.current = cb;
  }, [classes]);
  const start2 = React80.useCallback((event = {}, options = {}, cb = () => {
  }) => {
    const {
      pulsate: pulsate2 = false,
      center = centerProp || options.pulsate,
      fakeElement = false
      // For test purposes
    } = options;
    if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
      ignoringMouseDown.current = false;
      return;
    }
    if ((event == null ? void 0 : event.type) === "touchstart") {
      ignoringMouseDown.current = true;
    }
    const element = fakeElement ? null : container.current;
    const rect = element ? element.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    let rippleX;
    let rippleY;
    let rippleSize;
    if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
      rippleX = Math.round(rect.width / 2);
      rippleY = Math.round(rect.height / 2);
    } else {
      const {
        clientX,
        clientY
      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
      rippleX = Math.round(clientX - rect.left);
      rippleY = Math.round(clientY - rect.top);
    }
    if (center) {
      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
      if (rippleSize % 2 === 0) {
        rippleSize += 1;
      }
    } else {
      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
    }
    if (event == null ? void 0 : event.touches) {
      if (startTimerCommit.current === null) {
        startTimerCommit.current = () => {
          startCommit({
            pulsate: pulsate2,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        };
        startTimer.start(DELAY_RIPPLE, () => {
          if (startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
          }
        });
      }
    } else {
      startCommit({
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      });
    }
  }, [centerProp, startCommit, startTimer]);
  const pulsate = React80.useCallback(() => {
    start2({}, {
      pulsate: true
    });
  }, [start2]);
  const stop = React80.useCallback((event, cb) => {
    startTimer.clear();
    if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
      startTimerCommit.current();
      startTimerCommit.current = null;
      startTimer.start(0, () => {
        stop(event, cb);
      });
      return;
    }
    startTimerCommit.current = null;
    setRipples((oldRipples) => {
      if (oldRipples.length > 0) {
        return oldRipples.slice(1);
      }
      return oldRipples;
    });
    rippleCallback.current = cb;
  }, [startTimer]);
  React80.useImperativeHandle(ref, () => ({
    pulsate,
    start: start2,
    stop
  }), [pulsate, start2, stop]);
  return (0, import_jsx_runtime48.jsx)(TouchRippleRoot, {
    className: clsx_default3(touchRippleClasses_default.root, classes.root, className),
    ref: container,
    ...other,
    children: (0, import_jsx_runtime48.jsx)(TransitionGroup_default, {
      component: null,
      exit: true,
      children: ripples
    })
  });
});
true ? TouchRipple.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: import_prop_types35.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types35.default.object,
  /**
   * @ignore
   */
  className: import_prop_types35.default.string
} : void 0;
var TouchRipple_default = TouchRipple;

// node_modules/@mui/material/esm/ButtonBase/buttonBaseClasses.js
function getButtonBaseUtilityClass(slot) {
  return generateUtilityClass("MuiButtonBase", slot);
}
var buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
var buttonBaseClasses_default = buttonBaseClasses;

// node_modules/@mui/material/esm/ButtonBase/ButtonBase.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses17 = (ownerState) => {
  const {
    disabled,
    focusVisible,
    focusVisibleClassName,
    classes
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
  };
  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var ButtonBaseRoot = styled_default("button", {
  name: "MuiButtonBase",
  slot: "Root"
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  textDecoration: "none",
  // So we take precedent over the style of a native <a /> element.
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
  [`&.${buttonBaseClasses_default.disabled}`]: {
    pointerEvents: "none",
    // Disable link interactions
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
});
var ButtonBase = React81.forwardRef(function ButtonBase2(inProps, ref) {
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiButtonBase"
  });
  const {
    action,
    centerRipple = false,
    children,
    className,
    component = "button",
    disabled = false,
    disableRipple = false,
    disableTouchRipple = false,
    focusRipple = false,
    focusVisibleClassName,
    LinkComponent = "a",
    onBlur,
    onClick,
    onContextMenu,
    onDragLeave,
    onFocus,
    onFocusVisible,
    onKeyDown,
    onKeyUp,
    onMouseDown,
    onMouseLeave,
    onMouseUp,
    onTouchEnd,
    onTouchMove,
    onTouchStart,
    tabIndex = 0,
    TouchRippleProps,
    touchRippleRef,
    type,
    ...other
  } = props;
  const buttonRef = React81.useRef(null);
  const ripple = useLazyRipple();
  const handleRippleRef = useForkRef_default(ripple.ref, touchRippleRef);
  const [focusVisible, setFocusVisible] = React81.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React81.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), []);
  const enableTouchRipple = ripple.shouldMount && !disableRipple && !disabled;
  React81.useEffect(() => {
    if (focusVisible && focusRipple && !disableRipple) {
      ripple.pulsate();
    }
  }, [disableRipple, focusRipple, focusVisible, ripple]);
  const handleMouseDown = useRippleHandler(ripple, "start", onMouseDown, disableTouchRipple);
  const handleContextMenu = useRippleHandler(ripple, "stop", onContextMenu, disableTouchRipple);
  const handleDragLeave = useRippleHandler(ripple, "stop", onDragLeave, disableTouchRipple);
  const handleMouseUp = useRippleHandler(ripple, "stop", onMouseUp, disableTouchRipple);
  const handleMouseLeave = useRippleHandler(ripple, "stop", (event) => {
    if (focusVisible) {
      event.preventDefault();
    }
    if (onMouseLeave) {
      onMouseLeave(event);
    }
  }, disableTouchRipple);
  const handleTouchStart = useRippleHandler(ripple, "start", onTouchStart, disableTouchRipple);
  const handleTouchEnd = useRippleHandler(ripple, "stop", onTouchEnd, disableTouchRipple);
  const handleTouchMove = useRippleHandler(ripple, "stop", onTouchMove, disableTouchRipple);
  const handleBlur = useRippleHandler(ripple, "stop", (event) => {
    if (!isFocusVisible(event.target)) {
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  }, false);
  const handleFocus = useEventCallback_default2((event) => {
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }
    if (isFocusVisible(event.target)) {
      setFocusVisible(true);
      if (onFocusVisible) {
        onFocusVisible(event);
      }
    }
    if (onFocus) {
      onFocus(event);
    }
  });
  const isNonNativeButton = () => {
    const button = buttonRef.current;
    return component && component !== "button" && !(button.tagName === "A" && button.href);
  };
  const handleKeyDown = useEventCallback_default2((event) => {
    if (focusRipple && !event.repeat && focusVisible && event.key === " ") {
      ripple.stop(event, () => {
        ripple.start(event);
      });
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
      event.preventDefault();
      if (onClick) {
        onClick(event);
      }
    }
  });
  const handleKeyUp = useEventCallback_default2((event) => {
    if (focusRipple && event.key === " " && focusVisible && !event.defaultPrevented) {
      ripple.stop(event, () => {
        ripple.pulsate(event);
      });
    }
    if (onKeyUp) {
      onKeyUp(event);
    }
    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
      onClick(event);
    }
  });
  let ComponentProp = component;
  if (ComponentProp === "button" && (other.href || other.to)) {
    ComponentProp = LinkComponent;
  }
  const buttonProps = {};
  if (ComponentProp === "button") {
    buttonProps.type = type === void 0 ? "button" : type;
    buttonProps.disabled = disabled;
  } else {
    if (!other.href && !other.to) {
      buttonProps.role = "button";
    }
    if (disabled) {
      buttonProps["aria-disabled"] = disabled;
    }
  }
  const handleRef = useForkRef_default(ref, buttonRef);
  const ownerState = {
    ...props,
    centerRipple,
    component,
    disabled,
    disableRipple,
    disableTouchRipple,
    focusRipple,
    tabIndex,
    focusVisible
  };
  const classes = useUtilityClasses17(ownerState);
  return (0, import_jsx_runtime49.jsxs)(ButtonBaseRoot, {
    as: ComponentProp,
    className: clsx_default3(classes.root, className),
    ownerState,
    onBlur: handleBlur,
    onClick,
    onContextMenu: handleContextMenu,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onMouseDown: handleMouseDown,
    onMouseLeave: handleMouseLeave,
    onMouseUp: handleMouseUp,
    onDragLeave: handleDragLeave,
    onTouchEnd: handleTouchEnd,
    onTouchMove: handleTouchMove,
    onTouchStart: handleTouchStart,
    ref: handleRef,
    tabIndex: disabled ? -1 : tabIndex,
    type,
    ...buttonProps,
    ...other,
    children: [children, enableTouchRipple ? (0, import_jsx_runtime49.jsx)(TouchRipple_default, {
      ref: handleRippleRef,
      center: centerRipple,
      ...TouchRippleProps
    }) : null]
  });
});
function useRippleHandler(ripple, rippleAction, eventCallback, skipRippleAction = false) {
  return useEventCallback_default2((event) => {
    if (eventCallback) {
      eventCallback(event);
    }
    if (!skipRippleAction) {
      ripple[rippleAction](event);
    }
    return true;
  });
}
true ? ButtonBase.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: refType_default,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: import_prop_types36.default.bool,
  /**
   * The content of the component.
   */
  children: import_prop_types36.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types36.default.object,
  /**
   * @ignore
   */
  className: import_prop_types36.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: elementTypeAcceptingRef_default,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types36.default.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: import_prop_types36.default.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: import_prop_types36.default.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: import_prop_types36.default.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: import_prop_types36.default.string,
  /**
   * @ignore
   */
  href: import_prop_types36.default.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: import_prop_types36.default.elementType,
  /**
   * @ignore
   */
  onBlur: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onContextMenu: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onDragLeave: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types36.default.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onKeyUp: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onMouseDown: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onMouseLeave: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onMouseUp: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onTouchEnd: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onTouchMove: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onTouchStart: import_prop_types36.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types36.default.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: import_prop_types36.default.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.shape({
    current: import_prop_types36.default.shape({
      pulsate: import_prop_types36.default.func.isRequired,
      start: import_prop_types36.default.func.isRequired,
      stop: import_prop_types36.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["button", "reset", "submit"]), import_prop_types36.default.string])
} : void 0;
var ButtonBase_default = ButtonBase;

// node_modules/@mui/material/esm/CircularProgress/CircularProgress.js
var React82 = __toESM(require_react(), 1);
var import_prop_types37 = __toESM(require_prop_types(), 1);

// node_modules/@mui/material/esm/CircularProgress/circularProgressClasses.js
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass("MuiCircularProgress", slot);
}
var circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

// node_modules/@mui/material/esm/CircularProgress/CircularProgress.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var SIZE = 44;
var circularRotateKeyframe = keyframes`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
var circularDashKeyframe = keyframes`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`;
var rotateAnimation = typeof circularRotateKeyframe !== "string" ? css`
        animation: ${circularRotateKeyframe} 1.4s linear infinite;
      ` : null;
var dashAnimation = typeof circularDashKeyframe !== "string" ? css`
        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
      ` : null;
var useUtilityClasses18 = (ownerState) => {
  const {
    classes,
    variant,
    color,
    disableShrink
  } = ownerState;
  const slots = {
    root: ["root", variant, `color${capitalize_default(color)}`],
    svg: ["svg"],
    circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
  };
  return composeClasses(slots, getCircularProgressUtilityClass, classes);
};
var CircularProgressRoot = styled_default("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`color${capitalize_default(ownerState.color)}`]];
  }
})(memoTheme_default(({
  theme
}) => ({
  display: "inline-block",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: theme.transitions.create("transform")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: rotateAnimation || {
      animation: `${circularRotateKeyframe} 1.4s linear infinite`
    }
  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
    props: {
      color
    },
    style: {
      color: (theme.vars || theme).palette[color].main
    }
  }))]
})));
var CircularProgressSVG = styled_default("svg", {
  name: "MuiCircularProgress",
  slot: "Svg"
})({
  display: "block"
  // Keeps the progress centered
});
var CircularProgressCircle = styled_default("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.circle, styles[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
  }
})(memoTheme_default(({
  theme
}) => ({
  stroke: "currentColor",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: theme.transitions.create("stroke-dashoffset")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
      // Add the unit to fix a Edge 16 and below bug.
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink,
    style: dashAnimation || {
      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
      animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`
    }
  }]
})));
var CircularProgress = React82.forwardRef(function CircularProgress2(inProps, ref) {
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiCircularProgress"
  });
  const {
    className,
    color = "primary",
    disableShrink = false,
    size = 40,
    style,
    thickness = 3.6,
    value = 0,
    variant = "indeterminate",
    ...other
  } = props;
  const ownerState = {
    ...props,
    color,
    disableShrink,
    size,
    thickness,
    value,
    variant
  };
  const classes = useUtilityClasses18(ownerState);
  const circleStyle = {};
  const rootStyle = {};
  const rootProps = {};
  if (variant === "determinate") {
    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps["aria-valuenow"] = Math.round(value);
    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
    rootStyle.transform = "rotate(-90deg)";
  }
  return (0, import_jsx_runtime50.jsx)(CircularProgressRoot, {
    className: clsx_default3(classes.root, className),
    style: {
      width: size,
      height: size,
      ...rootStyle,
      ...style
    },
    ownerState,
    ref,
    role: "progressbar",
    ...rootProps,
    ...other,
    children: (0, import_jsx_runtime50.jsx)(CircularProgressSVG, {
      className: classes.svg,
      ownerState,
      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
      children: (0, import_jsx_runtime50.jsx)(CircularProgressCircle, {
        className: classes.circle,
        style: circleStyle,
        ownerState,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })
    })
  });
});
true ? CircularProgress.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types37.default.object,
  /**
   * @ignore
   */
  className: import_prop_types37.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types37.default.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  disableShrink: chainPropTypes(import_prop_types37.default.bool, (props) => {
    if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
      return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
    }
    return null;
  }),
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */
  size: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.string]),
  /**
   * @ignore
   */
  style: import_prop_types37.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: import_prop_types37.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: import_prop_types37.default.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: import_prop_types37.default.oneOf(["determinate", "indeterminate"])
} : void 0;
var CircularProgress_default = CircularProgress;

// node_modules/@mui/material/esm/IconButton/iconButtonClasses.js
function getIconButtonUtilityClass(slot) {
  return generateUtilityClass("MuiIconButton", slot);
}
var iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge", "loading", "loadingIndicator", "loadingWrapper"]);
var iconButtonClasses_default = iconButtonClasses;

// node_modules/@mui/material/esm/IconButton/IconButton.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses19 = (ownerState) => {
  const {
    classes,
    disabled,
    color,
    edge,
    size,
    loading
  } = ownerState;
  const slots = {
    root: ["root", loading && "loading", disabled && "disabled", color !== "default" && `color${capitalize_default(color)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  };
  return composeClasses(slots, getIconButtonUtilityClass, classes);
};
var IconButtonRoot = styled_default(ButtonBase_default, {
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.loading && styles.loading, ownerState.color !== "default" && styles[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize_default(ownerState.edge)}`], styles[`size${capitalize_default(ownerState.size)}`]];
  }
})(memoTheme_default(({
  theme
}) => ({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: theme.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  color: (theme.vars || theme).palette.action.active,
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  variants: [{
    props: (props) => !props.disableRipple,
    style: {
      "--IconButton-hoverBg": theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      "&:hover": {
        backgroundColor: "var(--IconButton-hoverBg)",
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }]
})), memoTheme_default(({
  theme
}) => ({
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
    props: {
      color
    },
    style: {
      color: (theme.vars || theme).palette[color].main
    }
  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
    props: {
      color
    },
    style: {
      "--IconButton-hoverBg": theme.vars ? `rgba(${(theme.vars || theme).palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha((theme.vars || theme).palette[color].main, theme.palette.action.hoverOpacity)
    }
  })), {
    props: {
      size: "small"
    },
    style: {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }
  }],
  [`&.${iconButtonClasses_default.disabled}`]: {
    backgroundColor: "transparent",
    color: (theme.vars || theme).palette.action.disabled
  },
  [`&.${iconButtonClasses_default.loading}`]: {
    color: "transparent"
  }
})));
var IconButtonLoadingIndicator = styled_default("span", {
  name: "MuiIconButton",
  slot: "LoadingIndicator"
})(({
  theme
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  color: (theme.vars || theme).palette.action.disabled,
  variants: [{
    props: {
      loading: true
    },
    style: {
      display: "flex"
    }
  }]
}));
var IconButton = React83.forwardRef(function IconButton2(inProps, ref) {
  const props = useDefaultProps2({
    props: inProps,
    name: "MuiIconButton"
  });
  const {
    edge = false,
    children,
    className,
    color = "default",
    disabled = false,
    disableFocusRipple = false,
    size = "medium",
    id: idProp,
    loading = null,
    loadingIndicator: loadingIndicatorProp,
    ...other
  } = props;
  const loadingId = useId_default(idProp);
  const loadingIndicator = loadingIndicatorProp ?? (0, import_jsx_runtime51.jsx)(CircularProgress_default, {
    "aria-labelledby": loadingId,
    color: "inherit",
    size: 16
  });
  const ownerState = {
    ...props,
    edge,
    color,
    disabled,
    disableFocusRipple,
    loading,
    loadingIndicator,
    size
  };
  const classes = useUtilityClasses19(ownerState);
  return (0, import_jsx_runtime51.jsxs)(IconButtonRoot, {
    id: loading ? loadingId : idProp,
    className: clsx_default3(classes.root, className),
    centerRipple: true,
    focusRipple: !disableFocusRipple,
    disabled: disabled || loading,
    ref,
    ...other,
    ownerState,
    children: [typeof loading === "boolean" && // use plain HTML span to minimize the runtime overhead
    (0, import_jsx_runtime51.jsx)("span", {
      className: classes.loadingWrapper,
      style: {
        display: "contents"
      },
      children: (0, import_jsx_runtime51.jsx)(IconButtonLoadingIndicator, {
        className: classes.loadingIndicator,
        ownerState,
        children: loading && loadingIndicator
      })
    }), children]
  });
});
true ? IconButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
  children: chainPropTypes(import_prop_types38.default.node, (props) => {
    const found = React83.Children.toArray(props.children).some((child) => React83.isValidElement(child) && child.props.onClick);
    if (found) {
      return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
    }
    return null;
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types38.default.object,
  /**
   * @ignore
   */
  className: import_prop_types38.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types38.default.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types38.default.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: import_prop_types38.default.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: import_prop_types38.default.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: import_prop_types38.default.oneOf(["end", "start", false]),
  /**
   * @ignore
   */
  id: import_prop_types38.default.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: import_prop_types38.default.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: import_prop_types38.default.node,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["small", "medium", "large"]), import_prop_types38.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
} : void 0;
var IconButton_default = IconButton;

// node_modules/@mui/x-charts/esm/internals/material/index.js
var baseSlots = {
  baseIconButton: IconButton_default
};
var iconSlots = {};
var defaultSlotsMaterial = _extends({}, baseSlots, iconSlots);

// node_modules/@mui/x-charts/esm/context/ChartsSlotsContext.js
var React84 = __toESM(require_react(), 1);
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var ChartsSlotsContext = React84.createContext(null);
if (true)
  ChartsSlotsContext.displayName = "ChartsSlotsContext";
function useChartsSlots() {
  const context = React84.useContext(ChartsSlotsContext);
  if (context == null) {
    throw new Error(["MUI X Charts: Could not find the Charts Slots context.", "It looks like you rendered your component outside of a ChartDataProvider.", "This can also happen if you are bundling multiple versions of the library."].join("\n"));
  }
  return context;
}
function ChartsSlotsProvider(props) {
  const {
    slots,
    slotProps = {},
    defaultSlots,
    children
  } = props;
  const value = React84.useMemo(() => ({
    slots: _extends({}, defaultSlots, slots),
    slotProps
  }), [defaultSlots, slots, slotProps]);
  return (0, import_jsx_runtime52.jsx)(ChartsSlotsContext.Provider, {
    value,
    children
  });
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.js
var React85 = __toESM(require_react(), 1);

// node_modules/robust-predicates/esm/util.js
var epsilon = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon) * epsilon;
function sum(elen, e, flen, f, h) {
  let Q, Qnew, hh, bvirt;
  let enow = e[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e[++eindex];
  } else {
    Q = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e) {
  let Q = e[0];
  for (let i = 1; i < elen; i++)
    Q += e[i];
  return Q;
}
function vec(n) {
  return new Float64Array(n);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon) * epsilon;
var ccwerrboundB = (2 + 12 * epsilon) * epsilon;
var ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;
var B = vec(4);
var C1 = vec(8);
var C2 = vec(12);
var D = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t1 = acy * bcx;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t0;
  bvirt = s0 - _i;
  B[0] = s0 - (_i + bvirt) + (bvirt - t0);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t1;
  bvirt = _0 - _i;
  B[1] = _0 - (_i + bvirt) + (bvirt - t1);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B[3] = u32;
  let det = estimate(4, B);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound)
    return det;
  s1 = acxtail * bcy;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t1 = acytail * bcx;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t0;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t0);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t1;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t1);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum(4, B, 4, u, C1);
  s1 = acx * bcytail;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t1 = acy * bcxtail;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t0;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t0);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t1;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t1);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum(C1len, C1, 4, u, C2);
  s1 = acxtail * bcytail;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t1 = acytail * bcxtail;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t0;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t0);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t1;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t1);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum(C2len, C2, 4, u, D);
  return D[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum)
    return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon) * epsilon;
var o3derrboundB = (3 + 28 * epsilon) * epsilon;
var o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon) * epsilon;
var iccerrboundB = (4 + 48 * epsilon) * epsilon;
var iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon) * epsilon;
var isperrboundB = (5 + 72 * epsilon) * epsilon;
var isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n = points.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < n; i++) {
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i2;
    for (let i = 0, minDist = Infinity; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i = 0, minDist = Infinity; i < n; i++) {
      if (i === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1)
        continue;
      const r4 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r4 < minRadius) {
        i2 = i;
        minRadius = r4;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];
        const d = this._dists[id];
        if (d > d0) {
          hull[j++] = id;
          d0 = d;
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i = i1;
      const x = i1x;
      const y = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k = 0, xp, yp; k < this._ids.length; k++) {
      const i = this._ids[k];
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
        continue;
      xp = x;
      yp = y;
      if (i === i0 || i === i1 || i === i2)
        continue;
      let start2 = 0;
      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
        start2 = hullHash[(key + j) % this._hashSize];
        if (start2 !== -1 && start2 !== hullNext[start2])
          break;
      }
      start2 = hullPrev[start2];
      let e = start2, q;
      while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e = q;
        if (e === start2) {
          e = -1;
          break;
        }
      }
      if (e === -1)
        continue;
      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q = hullNext[n2], orient2d(x, y, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e === start2) {
        while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
          this._legalize(t + 2);
          hullTri[q] = t;
          hullNext[e] = e;
          hullSize--;
          e = q;
        }
      }
      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x, y)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a];
      const a0 = a - a % 3;
      ar = a0 + (a + 2) % 3;
      if (b === -1) {
        if (i === 0)
          break;
        a = EDGE_STACK[--i];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p0 = triangles[ar];
      const pr = triangles[a];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a] = p1;
        triangles[b] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br;
        }
      } else {
        if (i === 0)
          break;
        a = EDGE_STACK[--i];
      }
    }
    return ar;
  }
  _link(a, b) {
    this._halfedges[a] = b;
    if (b !== -1)
      this._halfedges[b] = a;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i2, a, b, c) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a);
    this._link(t + 1, b);
    this._link(t + 2, c);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort(ids, dists, left2, right2) {
  if (right2 - left2 <= 20) {
    for (let i = left2 + 1; i <= right2; i++) {
      const temp = ids[i];
      const tempDist = dists[temp];
      let j = i - 1;
      while (j >= left2 && dists[ids[j]] > tempDist)
        ids[j + 1] = ids[j--];
      ids[j + 1] = temp;
    }
  } else {
    const median = left2 + right2 >> 1;
    let i = left2 + 1;
    let j = right2;
    swap(ids, median, i);
    if (dists[ids[left2]] > dists[ids[right2]])
      swap(ids, left2, right2);
    if (dists[ids[i]] > dists[ids[right2]])
      swap(ids, i, right2);
    if (dists[ids[left2]] > dists[ids[i]])
      swap(ids, left2, i);
    const temp = ids[i];
    const tempDist = dists[temp];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i)
        break;
      swap(ids, i, j);
    }
    ids[left2 + 1] = ids[j];
    ids[j] = temp;
    if (right2 - i + 1 >= j - left2) {
      quicksort(ids, dists, i, right2);
      quicksort(ids, dists, left2, j - 1);
    } else {
      quicksort(ids, dists, left2, j - 1);
      quicksort(ids, dists, i, right2);
    }
  }
}
function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p) {
  return p[0];
}
function defaultGetY(p) {
  return p[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon2 = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }
  arc(x, y, r4) {
    x = +x, y = +y, r4 = +r4;
    const x0 = x + r4;
    const y0 = y;
    if (r4 < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2)
      this._ += "L" + x0 + "," + y0;
    if (!r4)
      return;
    this._ += `A${r4},${r4},0,1,1,${x - r4},${y}A${r4},${r4},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x, y, w, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x, y) {
    this._.push([x, y]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x, y) {
    this._.push([x, y]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
      const t1 = triangles[i] * 2;
      const t2 = triangles[i + 1] * 2;
      const t3 = triangles[i + 2] * 2;
      const x12 = points[t1];
      const y12 = points[t1 + 1];
      const x2 = points[t2];
      const y2 = points[t2 + 1];
      const x3 = points[t3];
      const y3 = points[t3 + 1];
      const dx = x2 - x12;
      const dy = y2 - y12;
      const ex = x3 - x12;
      const ey = y3 - y12;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i2 of hull)
            bx += points[i2 * 2], by += points[i2 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a = 1e9 * Math.sign((bx - x12) * ey - (by - y12) * ex);
        x = (x12 + x3) / 2 - a * ey;
        y = (y12 + y3) / 2 + a * ex;
      } else {
        const d = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x = x12 + (ey * bl - dy * cl) * d;
        y = y12 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j] = x;
      circumcenters[j + 1] = y;
    }
    let h = hull[hull.length - 1];
    let p0, p1 = h * 4;
    let x0, x1 = points[2 * h];
    let y0, y1 = points[2 * h + 1];
    vectors.fill(0);
    for (let i = 0; i < hull.length; ++i) {
      h = hull[i];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t];
      const y = circumcenters[t + 1];
      const v2 = h0 * 4;
      const p = this._project(x, y, vectors[v2 + 2], vectors[v2 + 3]);
      if (p)
        this._renderSegment(x, y, p[0], p[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i);
    if (points === null || !points.length)
      return;
    context.moveTo(points[0], points[1]);
    let n = points.length;
    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)
      n -= 2;
    for (let i2 = 2; i2 < n; i2 += 2) {
      if (points[i2] !== points[i2 - 2] || points[i2 + 1] !== points[i2 - 1])
        context.lineTo(points[i2], points[i2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i = 0, n = points.length / 2; i < n; ++i) {
      const cell = this.cellPolygon(i);
      if (cell)
        cell.index = i, yield cell;
    }
  }
  cellPolygon(i) {
    const polygon = new Polygon();
    this.renderCell(i, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S;
    const c0 = this._regioncode(x0, y0);
    const c1 = this._regioncode(x1, y1);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S[0], S[1]);
      context.lineTo(S[2], S[3]);
    }
  }
  contains(i, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return false;
    return this.delaunay._step(i, x, y) === i;
  }
  *neighbors(i) {
    const ci = this._clip(i);
    if (ci)
      for (const j of this.delaunay.neighbors(i)) {
        const cj = this._clip(j);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                  yield j;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i];
    if (e0 === -1)
      return null;
    const points = [];
    let e = e0;
    do {
      const t = Math.floor(e / 3);
      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        break;
      e = halfedges[e];
    } while (e !== e0 && e !== -1);
    return points;
  }
  _clip(i) {
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i);
    if (points === null)
      return null;
    const { vectors: V } = this;
    const v2 = i * 4;
    return this._simplify(V[v2] || V[v2 + 1] ? this._clipInfinite(i, points, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i, points));
  }
  _clipFinite(i, points) {
    const n = points.length;
    let P = null;
    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
    let c0, c1 = this._regioncode(x1, y1);
    let e0, e1 = 0;
    for (let j = 0; j < n; j += 2) {
      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P)
          P.push(x1, y1);
        else
          P = [x1, y1];
      } else {
        let S, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i, e0, e1, P, P.length);
          if (P)
            P.push(sx0, sy0);
          else
            P = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i, e0, e1, P, P.length);
        if (P)
          P.push(sx1, sy1);
        else
          P = [sx1, sy1];
      }
    }
    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1)
        this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P;
  }
  _clipSegment(x0, y0, x1, y1, c0, c1) {
    const flip2 = c0 < c1;
    if (flip2)
      [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0)
        return flip2 ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
      if (c0 & c1)
        return null;
      let x, y, c = c0 || c1;
      if (c & 8)
        x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
      else if (c & 4)
        x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
      else if (c & 2)
        y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
      else
        y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
      if (c0)
        x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
      else
        x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
    let P = Array.from(points), p;
    if (p = this._project(P[0], P[1], vx0, vy0))
      P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn))
      P.push(p[0], p[1]);
    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1)
          j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P;
  }
  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x, y;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x = this.xmax, y = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x = this.xmax, y = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x = this.xmin, y = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x = this.xmin, y = this.ymin;
          break;
      }
      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
        P.splice(j, 0, x, y), j += 2;
      }
    }
    return j;
  }
  _project(x0, y0, vx, vy) {
    let t = Infinity, c, x, y;
    if (vy < 0) {
      if (y0 <= this.ymin)
        return null;
      if ((c = (this.ymin - y0) / vy) < t)
        y = this.ymin, x = x0 + (t = c) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax)
        return null;
      if ((c = (this.ymax - y0) / vy) < t)
        y = this.ymax, x = x0 + (t = c) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax)
        return null;
      if ((c = (this.xmax - x0) / vx) < t)
        x = this.xmax, y = y0 + (t = c) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin)
        return null;
      if ((c = (this.xmin - x0) / vx) < t)
        x = this.xmin, y = y0 + (t = c) * vy;
    }
    return [x, y];
  }
  _edgecode(x, y) {
    return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
  }
  _regioncode(x, y) {
    return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
  }
  _simplify(P) {
    if (P && P.length > 4) {
      for (let i = 0; i < P.length; i += 2) {
        const j = (i + 2) % P.length, k = (i + 4) % P.length;
        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {
          P.splice(j, 2), i -= 2;
        }
      }
      if (!P.length)
        P = null;
    }
    return P;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau = 2 * Math.PI;
var pow2 = Math.pow;
function pointX(p) {
  return p[0];
}
function pointY(p) {
  return p[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i = 0; i < triangles.length; i += 3) {
    const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
    if (cross > 1e-10)
      return false;
  }
  return true;
}
function jitter(x, y, r4) {
  return [x + Math.sin(x + y) * r4, y + Math.cos(x - y) * r4];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r4 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const p = jitter(points[2 * i], points[2 * i + 1], r4);
        points[2 * i] = p[0];
        points[2 * i + 1] = p[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p] === -1)
        inedges[p] = e;
    }
    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l = collinear2.indexOf(i);
      if (l > 0)
        yield collinear2[l - 1];
      if (l < collinear2.length - 1)
        yield collinear2[l + 1];
      return;
    }
    const e0 = inedges[i];
    if (e0 === -1)
      return;
    let e = e0, p0 = -1;
    do {
      yield p0 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        return;
      e = halfedges[e];
      if (e === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p0)
          yield p;
        return;
      }
    } while (e !== e0);
  }
  find(x, y, i = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return -1;
    const i0 = i;
    let c;
    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)
      i = c;
    return c;
  }
  _step(i, x, y) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i] === -1 || !points.length)
      return (i + 1) % (points.length >> 1);
    let c = i;
    let dc = pow2(x - points[i * 2], 2) + pow2(y - points[i * 2 + 1], 2);
    const e0 = inedges[i];
    let e = e0;
    do {
      let t = triangles[e];
      const dt = pow2(x - points[t * 2], 2) + pow2(y - points[t * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        break;
      e = halfedges[e];
      if (e === -1) {
        e = hull[(_hullIndex[i] + 1) % hull.length];
        if (e !== t) {
          if (pow2(x - points[e * 2], 2) + pow2(y - points[e * 2 + 1], 2) < dc)
            return e;
        }
        break;
      }
    } while (e !== e0);
    return c;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r4) {
    if (r4 === void 0 && (!context || typeof context.moveTo !== "function"))
      r4 = context, context = null;
    r4 = r4 == void 0 ? 2 : +r4;
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i = 0, n = points.length; i < n; i += 2) {
      const x = points[i], y = points[i + 1];
      context.moveTo(x + r4, y);
      context.arc(x, y, r4, 0, tau);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i = 1; i < n; ++i) {
      const h2 = 2 * hull[i];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t0 = triangles[i *= 3] * 2;
    const t1 = triangles[i + 1] * 2;
    const t2 = triangles[i + 2] * 2;
    context.moveTo(points[t0], points[t0 + 1]);
    context.lineTo(points[t1], points[t1 + 1]);
    context.lineTo(points[t2], points[t2 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }
  trianglePolygon(i) {
    const polygon = new Polygon();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n = points.length;
  const array = new Float64Array(n * 2);
  for (let i = 0; i < n; ++i) {
    const p = points[i];
    array[i * 2] = fx.call(that, p, i, points);
    array[i * 2 + 1] = fy.call(that, p, i, points);
  }
  return array;
}
function* flatIterable(points, fx, fy, that) {
  let i = 0;
  for (const p of points) {
    yield fx.call(that, p, i, points);
    yield fy.call(that, p, i, points);
    ++i;
  }
}

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.js
var useChartVoronoi = ({
  svgRef,
  params,
  store,
  instance
}) => {
  var _a;
  const {
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick
  } = params;
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = useSelector(store, selectorChartXAxis);
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = useSelector(store, selectorChartYAxis);
  const zoomIsInteracting = useSelector(store, selectorChartZoomIsInteracting);
  const {
    series,
    seriesOrder
  } = ((_a = useSelector(store, selectorChartSeriesProcessed)) == null ? void 0 : _a.scatter) ?? {};
  const voronoiRef = React85.useRef({});
  const delauneyRef = React85.useRef(void 0);
  const lastFind = React85.useRef(void 0);
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  useEnhancedEffect_default(() => {
    store.update((prev) => prev.voronoi.isVoronoiEnabled === !disableVoronoi ? prev : _extends({}, prev, {
      voronoi: {
        isVoronoiEnabled: !disableVoronoi
      }
    }));
  }, [store, disableVoronoi]);
  useEnhancedEffect_default(() => {
    if (zoomIsInteracting || seriesOrder === void 0 || series === void 0 || disableVoronoi) {
      return;
    }
    voronoiRef.current = {};
    let points = [];
    seriesOrder.forEach((seriesId) => {
      const {
        data,
        xAxisId,
        yAxisId
      } = series[seriesId];
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      const getXPosition = getValueToPositionMapper(xScale);
      const getYPosition = getValueToPositionMapper(yScale);
      const seriesPoints = data.flatMap(({
        x,
        y
      }) => {
        const pointX2 = getXPosition(x);
        const pointY2 = getYPosition(y);
        if (!instance.isPointInside(pointX2, pointY2)) {
          return [-drawingArea.width, -drawingArea.height];
        }
        return [pointX2, pointY2];
      });
      voronoiRef.current[seriesId] = {
        seriesId,
        startIndex: points.length,
        endIndex: points.length + seriesPoints.length
      };
      points = points.concat(seriesPoints);
    });
    delauneyRef.current = new Delaunay(points);
    lastFind.current = void 0;
  }, [zoomIsInteracting, defaultXAxisId, defaultYAxisId, series, seriesOrder, xAxis, yAxis, drawingArea, instance, disableVoronoi]);
  React85.useEffect(() => {
    if (svgRef.current === null || disableVoronoi) {
      return void 0;
    }
    const element = svgRef.current;
    function getClosestPoint(event) {
      const svgPoint = getSVGPoint(element, event);
      if (!instance.isPointInside(svgPoint.x, svgPoint.y)) {
        lastFind.current = void 0;
        return "outside-chart";
      }
      if (!delauneyRef.current) {
        return "no-point-found";
      }
      const closestPointIndex = delauneyRef.current.find(svgPoint.x, svgPoint.y, lastFind.current);
      if (closestPointIndex === void 0) {
        return "no-point-found";
      }
      lastFind.current = closestPointIndex;
      const closestSeries = Object.values(voronoiRef.current).find((value) => {
        return 2 * closestPointIndex >= value.startIndex && 2 * closestPointIndex < value.endIndex;
      });
      if (closestSeries === void 0) {
        return "no-point-found";
      }
      const dataIndex = (2 * closestPointIndex - voronoiRef.current[closestSeries.seriesId].startIndex) / 2;
      if (voronoiMaxRadius !== void 0) {
        const pointX2 = delauneyRef.current.points[2 * closestPointIndex];
        const pointY2 = delauneyRef.current.points[2 * closestPointIndex + 1];
        const dist2 = (pointX2 - svgPoint.x) ** 2 + (pointY2 - svgPoint.y) ** 2;
        if (dist2 > voronoiMaxRadius ** 2) {
          return "outside-voronoi-max-radius";
        }
      }
      return {
        seriesId: closestSeries.seriesId,
        dataIndex
      };
    }
    const handleMouseLeave = () => {
      var _a2, _b;
      (_a2 = instance.cleanInteraction) == null ? void 0 : _a2.call(instance);
      (_b = instance.clearHighlight) == null ? void 0 : _b.call(instance);
    };
    const handleMouseMove = (event) => {
      var _a2, _b, _c, _d, _e, _f;
      const closestPoint = getClosestPoint(event);
      if (closestPoint === "outside-chart") {
        (_a2 = instance.cleanInteraction) == null ? void 0 : _a2.call(instance);
        (_b = instance.clearHighlight) == null ? void 0 : _b.call(instance);
        return;
      }
      if (closestPoint === "outside-voronoi-max-radius" || closestPoint === "no-point-found") {
        (_c = instance.removeItemInteraction) == null ? void 0 : _c.call(instance);
        (_d = instance.clearHighlight) == null ? void 0 : _d.call(instance);
        return;
      }
      const {
        seriesId,
        dataIndex
      } = closestPoint;
      (_e = instance.setItemInteraction) == null ? void 0 : _e.call(instance, {
        type: "scatter",
        seriesId,
        dataIndex
      });
      (_f = instance.setHighlight) == null ? void 0 : _f.call(instance, {
        seriesId,
        dataIndex
      });
    };
    const handleMouseClick = (event) => {
      if (!onItemClick) {
        return;
      }
      const closestPoint = getClosestPoint(event);
      if (typeof closestPoint === "string") {
        return;
      }
      const {
        seriesId,
        dataIndex
      } = closestPoint;
      onItemClick(event, {
        type: "scatter",
        seriesId,
        dataIndex
      });
    };
    element.addEventListener("pointerleave", handleMouseLeave);
    element.addEventListener("pointermove", handleMouseMove);
    element.addEventListener("click", handleMouseClick);
    return () => {
      element.removeEventListener("pointerleave", handleMouseLeave);
      element.removeEventListener("pointermove", handleMouseMove);
      element.removeEventListener("click", handleMouseClick);
    };
  }, [svgRef, yAxis, xAxis, voronoiMaxRadius, onItemClick, disableVoronoi, drawingArea, instance]);
  const enableVoronoiCallback = useEventCallback_default(() => {
    store.update((prev) => _extends({}, prev, {
      voronoi: _extends({}, prev.voronoi, {
        isVoronoiEnabled: true
      })
    }));
  });
  const disableVoronoiCallback = useEventCallback_default(() => {
    store.update((prev) => _extends({}, prev, {
      voronoi: _extends({}, prev.voronoi, {
        isVoronoiEnabled: false
      })
    }));
  });
  return {
    instance: {
      enableVoronoi: enableVoronoiCallback,
      disableVoronoi: disableVoronoiCallback
    }
  };
};
useChartVoronoi.getDefaultizedParams = ({
  params
}) => _extends({}, params, {
  disableVoronoi: params.disableVoronoi ?? !params.series.some((item) => item.type === "scatter")
});
useChartVoronoi.getInitialState = (params) => ({
  voronoi: {
    isVoronoiEnabled: !params.disableVoronoi
  }
});
useChartVoronoi.params = {
  disableVoronoi: true,
  voronoiMaxRadius: true,
  onItemClick: true
};

// node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartVoronoi/useChartVoronoi.selectors.js
var selectVoronoi = (state) => state.voronoi;
var selectorChartsVoronoiIsVoronoiEnabled = createSelector2(selectVoronoi, (voronoi) => voronoi == null ? void 0 : voronoi.isVoronoiEnabled);

// node_modules/@mui/x-charts/esm/internals/plugins/allPlugins.js
var DEFAULT_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight, useChartVoronoi];

// node_modules/@mui/x-charts/esm/ChartDataProvider/useChartDataProviderProps.js
var _excluded28 = ["children", "localeText", "plugins", "seriesConfig", "slots", "slotProps"];
var useChartDataProviderProps = (props) => {
  const {
    children,
    localeText,
    plugins = DEFAULT_PLUGINS,
    seriesConfig: seriesConfig5,
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const theme = useTheme();
  const chartProviderProps = {
    plugins,
    seriesConfig: seriesConfig5,
    pluginParams: _extends({
      theme: theme.palette.mode
    }, other)
  };
  return {
    children,
    localeText,
    chartProviderProps,
    slots,
    slotProps
  };
};

// node_modules/@mui/x-charts/esm/ChartDataProvider/ChartDataProvider.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
function ChartDataProvider(props) {
  const {
    children,
    localeText,
    chartProviderProps,
    slots,
    slotProps
  } = useChartDataProviderProps(props);
  return (0, import_jsx_runtime53.jsx)(ChartProvider, _extends({}, chartProviderProps, {
    children: (0, import_jsx_runtime53.jsx)(ChartsLocalizationProvider, {
      localeText,
      children: (0, import_jsx_runtime53.jsx)(ChartsSlotsProvider, {
        slots,
        slotProps,
        defaultSlots: defaultSlotsMaterial,
        children
      })
    })
  }));
}
true ? ChartDataProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types39.default.shape({
    current: import_prop_types39.default.any
  }),
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.string), import_prop_types39.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types39.default.arrayOf(import_prop_types39.default.object),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types39.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types39.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types39.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types39.default.oneOfType([import_prop_types39.default.number, import_prop_types39.default.shape({
    bottom: import_prop_types39.default.number,
    left: import_prop_types39.default.number,
    right: import_prop_types39.default.number,
    top: import_prop_types39.default.number
  })]),
  /**
   * The array of series to display.
   * Each type of series has its own specificity.
   * Please refer to the appropriate docs page to learn more about it.
   */
  series: import_prop_types39.default.arrayOf(import_prop_types39.default.object),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types39.default.bool,
  /**
   * The props for the slots.
   */
  slotProps: import_prop_types39.default.object,
  /**
   * Slots to customize charts' components.
   */
  slots: import_prop_types39.default.object,
  theme: import_prop_types39.default.oneOf(["dark", "light"]),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types39.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsSurface/ChartsSurface.js
var import_prop_types40 = __toESM(require_prop_types(), 1);
var React91 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsAxesGradients.js
var React90 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsPiecewiseGradient.js
var React87 = __toESM(require_react(), 1);
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
function ChartsPiecewiseGradient(props) {
  const {
    isReversed,
    gradientId,
    size,
    direction,
    scale: scale2,
    colorMap
  } = props;
  if (size <= 0) {
    return null;
  }
  return (0, import_jsx_runtime54.jsx)("linearGradient", {
    id: gradientId,
    x1: "0",
    x2: "0",
    y1: "0",
    y2: "0",
    [`${direction}${isReversed ? 1 : 2}`]: `${size}px`,
    gradientUnits: "userSpaceOnUse",
    children: colorMap.thresholds.map((threshold2, index) => {
      const x = scale2(threshold2);
      if (x === void 0) {
        return null;
      }
      const offset2 = isReversed ? 1 - x / size : x / size;
      if (Number.isNaN(offset2)) {
        return null;
      }
      return (0, import_jsx_runtime54.jsxs)(React87.Fragment, {
        children: [(0, import_jsx_runtime54.jsx)("stop", {
          offset: offset2,
          stopColor: colorMap.colors[index],
          stopOpacity: 1
        }), (0, import_jsx_runtime54.jsx)("stop", {
          offset: offset2,
          stopColor: colorMap.colors[index + 1],
          stopOpacity: 1
        })]
      }, threshold2.toString() + index);
    })
  });
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsContinuousGradient.js
var React88 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var PX_PRECISION = 10;
function ChartsContinuousGradient(props) {
  const {
    gradientUnits,
    isReversed,
    gradientId,
    size,
    direction,
    scale: scale2,
    colorScale,
    colorMap
  } = props;
  const extremumValues = [colorMap.min ?? 0, colorMap.max ?? 100];
  const extremumPositions = extremumValues.map(scale2).filter((p) => p !== void 0);
  if (extremumPositions.length !== 2) {
    return null;
  }
  const interpolator = typeof extremumValues[0] === "number" ? number_default(extremumValues[0], extremumValues[1]) : date_default(extremumValues[0], extremumValues[1]);
  const numberOfPoints = Math.round((Math.max(...extremumPositions) - Math.min(...extremumPositions)) / PX_PRECISION);
  const keyPrefix = `${extremumValues[0]}-${extremumValues[1]}-`;
  return (0, import_jsx_runtime55.jsx)("linearGradient", {
    id: gradientId,
    x1: "0",
    x2: "0",
    y1: "0",
    y2: "0",
    [`${direction}${isReversed ? 1 : 2}`]: gradientUnits === "objectBoundingBox" ? 1 : `${size}px`,
    gradientUnits: gradientUnits ?? "userSpaceOnUse",
    children: Array.from({
      length: numberOfPoints + 1
    }, (_, index) => {
      const value = interpolator(index / numberOfPoints);
      if (value === void 0) {
        return null;
      }
      const x = scale2(value);
      if (x === void 0) {
        return null;
      }
      const offset2 = isReversed ? 1 - x / size : x / size;
      const color = colorScale(value);
      if (color === null) {
        return null;
      }
      return (0, import_jsx_runtime55.jsx)("stop", {
        offset: offset2,
        stopColor: color,
        stopOpacity: 1
      }, keyPrefix + index);
    })
  });
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsContinuousGradientObjectBound.js
var React89 = __toESM(require_react(), 1);
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var PX_PRECISION2 = 10;
var getDirection = (isReversed) => {
  if (isReversed) {
    return {
      x1: "1",
      x2: "0",
      y1: "0",
      y2: "0"
    };
  }
  return {
    x1: "0",
    x2: "1",
    y1: "0",
    y2: "0"
  };
};
function ChartsContinuousGradientObjectBound(props) {
  const {
    isReversed,
    gradientId,
    colorScale,
    colorMap
  } = props;
  const extremumValues = [colorMap.min ?? 0, colorMap.max ?? 100];
  const interpolator = typeof extremumValues[0] === "number" ? number_default(extremumValues[0], extremumValues[1]) : date_default(extremumValues[0], extremumValues[1]);
  const numberOfPoints = PX_PRECISION2;
  const keyPrefix = `${extremumValues[0]}-${extremumValues[1]}-`;
  return (0, import_jsx_runtime56.jsx)("linearGradient", _extends({
    id: gradientId
  }, getDirection(isReversed), {
    gradientUnits: "objectBoundingBox",
    children: Array.from({
      length: numberOfPoints + 1
    }, (_, index) => {
      const offset2 = index / numberOfPoints;
      const value = interpolator(offset2);
      if (value === void 0) {
        return null;
      }
      const color = colorScale(value);
      if (color === null) {
        return null;
      }
      return (0, import_jsx_runtime56.jsx)("stop", {
        offset: offset2,
        stopColor: color,
        stopOpacity: 1
      }, keyPrefix + index);
    })
  }));
}

// node_modules/@mui/x-charts/esm/internals/components/ChartsAxesGradients/ChartsAxesGradients.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
function ChartsAxesGradients() {
  const {
    top: top2,
    height,
    bottom: bottom2,
    left: left2,
    width,
    right: right2
  } = useDrawingArea();
  const svgHeight = top2 + height + bottom2;
  const svgWidth = left2 + width + right2;
  const getGradientId = useChartGradientIdBuilder();
  const getObjectBoundGradientId = useChartGradientIdObjectBoundBuilder();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  const filteredYAxisIds = yAxisIds.filter((axisId) => yAxis[axisId].colorMap !== void 0);
  const filteredXAxisIds = xAxisIds.filter((axisId) => xAxis[axisId].colorMap !== void 0);
  const filteredZAxisIds = zAxisIds.filter((axisId) => zAxis[axisId].colorMap !== void 0);
  if (filteredYAxisIds.length === 0 && filteredXAxisIds.length === 0 && filteredZAxisIds.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime57.jsxs)("defs", {
    children: [filteredYAxisIds.map((axisId) => {
      const gradientId = getGradientId(axisId);
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        scale: scale2,
        colorScale,
        reverse
      } = yAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "piecewise") {
        return (0, import_jsx_runtime57.jsx)(ChartsPiecewiseGradient, {
          isReversed: !reverse,
          scale: scale2,
          colorMap,
          size: svgHeight,
          gradientId,
          direction: "y"
        }, gradientId);
      }
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime57.jsxs)(React90.Fragment, {
          children: [(0, import_jsx_runtime57.jsx)(ChartsContinuousGradient, {
            isReversed: !reverse,
            scale: scale2,
            colorScale,
            colorMap,
            size: svgHeight,
            gradientId,
            direction: "y"
          }), (0, import_jsx_runtime57.jsx)(ChartsContinuousGradientObjectBound, {
            isReversed: reverse,
            colorScale,
            colorMap,
            gradientId: objectBoundGradientId
          })]
        }, gradientId);
      }
      return null;
    }), filteredXAxisIds.map((axisId) => {
      const gradientId = getGradientId(axisId);
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        scale: scale2,
        reverse,
        colorScale
      } = xAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "piecewise") {
        return (0, import_jsx_runtime57.jsx)(ChartsPiecewiseGradient, {
          isReversed: reverse,
          scale: scale2,
          colorMap,
          size: svgWidth,
          gradientId,
          direction: "x"
        }, gradientId);
      }
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime57.jsxs)(React90.Fragment, {
          children: [(0, import_jsx_runtime57.jsx)(ChartsContinuousGradient, {
            isReversed: reverse,
            scale: scale2,
            colorScale,
            colorMap,
            size: svgWidth,
            gradientId,
            direction: "x"
          }), (0, import_jsx_runtime57.jsx)(ChartsContinuousGradientObjectBound, {
            isReversed: reverse,
            colorScale,
            colorMap,
            gradientId: objectBoundGradientId
          })]
        }, gradientId);
      }
      return null;
    }), filteredZAxisIds.map((axisId) => {
      const objectBoundGradientId = getObjectBoundGradientId(axisId);
      const {
        colorMap,
        colorScale
      } = zAxis[axisId];
      if ((colorMap == null ? void 0 : colorMap.type) === "continuous") {
        return (0, import_jsx_runtime57.jsx)(ChartsContinuousGradientObjectBound, {
          colorScale,
          colorMap,
          gradientId: objectBoundGradientId
        }, objectBoundGradientId);
      }
      return null;
    })]
  });
}

// node_modules/@mui/x-charts/esm/ChartsSurface/ChartsSurface.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var _excluded29 = ["children", "className", "title", "desc"];
var ChartsSurfaceStyles = styled_default("svg", {
  name: "MuiChartsSurface",
  slot: "Root"
})(({
  ownerState
}) => ({
  width: ownerState.width ?? "100%",
  height: ownerState.height ?? "100%",
  display: "flex",
  position: "relative",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "center",
  overflow: "hidden",
  // This prevents default touch actions when using the svg on mobile devices.
  // For example, prevent page scroll & zoom.
  touchAction: "none"
}));
var ChartsSurface = React91.forwardRef(function ChartsSurface2(inProps, ref) {
  const store = useStore();
  const {
    width: svgWidth,
    height: svgHeight
  } = useSelector(store, selectorChartContainerSize);
  const {
    width: propsWidth,
    height: propsHeight
  } = useSelector(store, selectorChartPropsSize);
  const svgRef = useSvgRef();
  const handleRef = useForkRef(svgRef, ref);
  const themeProps = useThemeProps({
    props: inProps,
    name: "MuiChartsSurface"
  });
  const {
    children,
    className,
    title,
    desc
  } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded29);
  const hasIntrinsicSize = svgHeight > 0 && svgWidth > 0;
  return (0, import_jsx_runtime58.jsxs)(ChartsSurfaceStyles, _extends({
    ownerState: {
      width: propsWidth,
      height: propsHeight
    },
    viewBox: `${0} ${0} ${svgWidth} ${svgHeight}`,
    className
  }, other, {
    ref: handleRef,
    children: [title && (0, import_jsx_runtime58.jsx)("title", {
      children: title
    }), desc && (0, import_jsx_runtime58.jsx)("desc", {
      children: desc
    }), (0, import_jsx_runtime58.jsx)(ChartsAxesGradients, {}), hasIntrinsicSize && children]
  }));
});
if (true)
  ChartsSurface.displayName = "ChartsSurface";
true ? ChartsSurface.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types40.default.node,
  className: import_prop_types40.default.string,
  desc: import_prop_types40.default.string,
  sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
  title: import_prop_types40.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/ChartContainer/useChartContainerProps.js
var _excluded30 = ["width", "height", "margin", "children", "series", "colors", "dataset", "desc", "onAxisClick", "disableVoronoi", "voronoiMaxRadius", "onItemClick", "disableAxisListener", "highlightedItem", "onHighlightChange", "sx", "title", "xAxis", "yAxis", "zAxis", "rotationAxis", "radiusAxis", "skipAnimation", "seriesConfig", "plugins", "localeText", "slots", "slotProps"];
var useChartContainerProps = (props, ref) => {
  const _ref = props, {
    width,
    height,
    margin,
    children,
    series,
    colors,
    dataset,
    desc,
    onAxisClick,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick,
    disableAxisListener,
    highlightedItem,
    onHighlightChange,
    sx,
    title,
    xAxis,
    yAxis,
    zAxis,
    rotationAxis,
    radiusAxis,
    skipAnimation,
    seriesConfig: seriesConfig5,
    plugins,
    localeText,
    slots,
    slotProps
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded30);
  const chartsSurfaceProps = _extends({
    title,
    desc,
    sx,
    ref
  }, other);
  const chartDataProviderProps = {
    margin,
    series,
    colors,
    dataset,
    disableAxisListener,
    highlightedItem,
    onHighlightChange,
    onAxisClick,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick,
    xAxis,
    yAxis,
    zAxis,
    rotationAxis,
    radiusAxis,
    skipAnimation,
    width,
    height,
    localeText,
    seriesConfig: seriesConfig5,
    plugins: plugins ?? DEFAULT_PLUGINS,
    slots,
    slotProps
  };
  return {
    chartDataProviderProps,
    chartsSurfaceProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/internals/components/ChartsWrapper/ChartsWrapper.js
var React92 = __toESM(require_react(), 1);
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var getDirection2 = (direction, position) => {
  if (direction === "vertical") {
    if ((position == null ? void 0 : position.horizontal) === "start") {
      return "row";
    }
    return "row-reverse";
  }
  if ((position == null ? void 0 : position.vertical) === "bottom") {
    return "column-reverse";
  }
  return "column";
};
var getAlign = (direction, position) => {
  if (direction === "vertical") {
    if ((position == null ? void 0 : position.vertical) === "top") {
      return "flex-start";
    }
    if ((position == null ? void 0 : position.vertical) === "bottom") {
      return "flex-end";
    }
  }
  if (direction === "horizontal") {
    if ((position == null ? void 0 : position.horizontal) === "start") {
      return "flex-start";
    }
    if ((position == null ? void 0 : position.horizontal) === "end") {
      return "flex-end";
    }
  }
  return "center";
};
var Root3 = styled_default("div", {
  name: "MuiChartsWrapper",
  slot: "Root"
})(({
  ownerState
}) => ({
  display: "flex",
  flexDirection: getDirection2(ownerState.legendDirection, ownerState.legendPosition),
  flex: 1,
  justifyContent: "center",
  alignItems: getAlign(ownerState.legendDirection, ownerState.legendPosition)
}));
function ChartsWrapper(props) {
  const {
    children,
    sx
  } = props;
  const chartRootRef = useChartRootRef();
  return (0, import_jsx_runtime59.jsx)(Root3, {
    ref: chartRootRef,
    ownerState: props,
    sx,
    children
  });
}

// node_modules/@mui/x-charts/esm/Toolbar/internals/ChartsToolbar.js
function ChartsToolbar() {
  return null;
}

// node_modules/@mui/x-charts/esm/BarChart/BarChart.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var BarChart = React93.forwardRef(function BarChart2(inProps, ref) {
  var _a, _b, _c;
  const props = useThemeProps({
    props: inProps,
    name: "MuiBarChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    barPlotProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    legendProps,
    children
  } = useBarChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const Toolbar2 = ((_b = props.slots) == null ? void 0 : _b.toolbar) ?? ChartsToolbar;
  return (0, import_jsx_runtime60.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime60.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar ? (0, import_jsx_runtime60.jsx)(Toolbar2, {}) : null, !props.hideLegend && (0, import_jsx_runtime60.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime60.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime60.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime60.jsxs)("g", _extends({}, clipPathGroupProps, {
          children: [(0, import_jsx_runtime60.jsx)(BarPlot, _extends({}, barPlotProps)), (0, import_jsx_runtime60.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime60.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps))]
        })), (0, import_jsx_runtime60.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime60.jsx)(ChartsClipPath, _extends({}, clipPathProps)), children]
      })), !props.loading && (0, import_jsx_runtime60.jsx)(Tooltip, _extends({}, (_c = props.slotProps) == null ? void 0 : _c.tooltip))]
    }))
  }));
});
if (true)
  BarChart.displayName = "BarChart";
true ? BarChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types41.default.shape({
    current: import_prop_types41.default.object
  }),
  /**
   * The configuration of axes highlight.
   * Default is set to 'band' in the bar direction.
   * Depends on `layout` prop.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   */
  axisHighlight: import_prop_types41.default.shape({
    x: import_prop_types41.default.oneOf(["band", "line", "none"]),
    y: import_prop_types41.default.oneOf(["band", "line", "none"])
  }),
  /**
   * If provided, the function will be used to format the label of the bar.
   * It can be set to 'value' to display the current value.
   * @param {BarItem} item The item to format.
   * @param {BarLabelContext} context data about the bar.
   * @returns {string} The formatted label.
   */
  barLabel: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["value"]), import_prop_types41.default.func]),
  /**
   * Defines the border radius of the bar element.
   */
  borderRadius: import_prop_types41.default.number,
  children: import_prop_types41.default.node,
  className: import_prop_types41.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string), import_prop_types41.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types41.default.arrayOf(import_prop_types41.default.object),
  desc: import_prop_types41.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types41.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types41.default.shape({
    horizontal: import_prop_types41.default.bool,
    vertical: import_prop_types41.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types41.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types41.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types41.default.shape({
    dataIndex: import_prop_types41.default.number,
    seriesId: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types41.default.string,
  /**
   * The direction of the bar elements.
   * @default 'vertical'
   */
  layout: import_prop_types41.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types41.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types41.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.shape({
    bottom: import_prop_types41.default.number,
    left: import_prop_types41.default.number,
    right: import_prop_types41.default.number,
    top: import_prop_types41.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types41.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types41.default.func,
  /**
   * Callback fired when a bar item is clicked.
   * @param {React.MouseEvent<SVGElement, MouseEvent>} event The event source of the callback.
   * @param {BarItemIdentifier} barItemIdentifier The bar item identifier.
   */
  onItemClick: import_prop_types41.default.func,
  /**
   * The series to display in the bar chart.
   * An array of [[BarSeriesType]] objects.
   */
  series: import_prop_types41.default.arrayOf(import_prop_types41.default.object).isRequired,
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types41.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types41.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types41.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types41.default.object,
  sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
  theme: import_prop_types41.default.oneOf(["dark", "light"]),
  title: import_prop_types41.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types41.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    barGapRatio: import_prop_types41.default.number,
    categoryGapRatio: import_prop_types41.default.number,
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      type: import_prop_types41.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types41.default.string,
      values: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number, import_prop_types41.default.string]).isRequired)
    }), import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["band"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      type: import_prop_types41.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types41.default.string,
      values: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number, import_prop_types41.default.string]).isRequired)
    }), import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["point"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["log"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["pow"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["sqrt"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["time"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["utc"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["x"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    height: import_prop_types41.default.number,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["linear"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelMinGap: import_prop_types41.default.number,
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    barGapRatio: import_prop_types41.default.number,
    categoryGapRatio: import_prop_types41.default.number,
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      type: import_prop_types41.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types41.default.string,
      values: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number, import_prop_types41.default.string]).isRequired)
    }), import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["band"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      type: import_prop_types41.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types41.default.string,
      values: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number, import_prop_types41.default.string]).isRequired)
    }), import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["point"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["log"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["pow"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["sqrt"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["time"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["utc"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  }), import_prop_types41.default.shape({
    axis: import_prop_types41.default.oneOf(["y"]),
    classes: import_prop_types41.default.object,
    colorMap: import_prop_types41.default.oneOfType([import_prop_types41.default.shape({
      color: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.string.isRequired), import_prop_types41.default.func]).isRequired,
      max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
      type: import_prop_types41.default.oneOf(["continuous"]).isRequired
    }), import_prop_types41.default.shape({
      colors: import_prop_types41.default.arrayOf(import_prop_types41.default.string).isRequired,
      thresholds: import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]).isRequired).isRequired,
      type: import_prop_types41.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types41.default.array,
    dataKey: import_prop_types41.default.string,
    disableLine: import_prop_types41.default.bool,
    disableTicks: import_prop_types41.default.bool,
    domainLimit: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["nice", "strict"]), import_prop_types41.default.func]),
    fill: import_prop_types41.default.string,
    hideTooltip: import_prop_types41.default.bool,
    id: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    ignoreTooltip: import_prop_types41.default.bool,
    label: import_prop_types41.default.string,
    labelStyle: import_prop_types41.default.object,
    max: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    min: import_prop_types41.default.oneOfType([import_prop_types41.default.instanceOf(Date), import_prop_types41.default.number]),
    offset: import_prop_types41.default.number,
    position: import_prop_types41.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types41.default.bool,
    scaleType: import_prop_types41.default.oneOf(["linear"]),
    slotProps: import_prop_types41.default.object,
    slots: import_prop_types41.default.object,
    stroke: import_prop_types41.default.string,
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    tickInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.array, import_prop_types41.default.func]),
    tickLabelInterval: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["auto"]), import_prop_types41.default.func]),
    tickLabelPlacement: import_prop_types41.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types41.default.object,
    tickMaxStep: import_prop_types41.default.number,
    tickMinStep: import_prop_types41.default.number,
    tickNumber: import_prop_types41.default.number,
    tickPlacement: import_prop_types41.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types41.default.number,
    valueFormatter: import_prop_types41.default.func,
    width: import_prop_types41.default.number
  })]).isRequired)
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
var React108 = __toESM(require_react(), 1);
var import_prop_types53 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
var React97 = __toESM(require_react(), 1);
var import_prop_types44 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AreaElement.js
var React96 = __toESM(require_react(), 1);
var import_prop_types43 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AnimatedArea.js
var React95 = __toESM(require_react(), 1);
var import_prop_types42 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AppearingMask.js
var React94 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/internals/cleanId.js
function cleanId(id) {
  return id.replace(" ", "_");
}

// node_modules/@mui/x-charts/esm/LineChart/AppearingMask.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var appearingMaskClasses = generateUtilityClasses("MuiAppearingMask", ["animate"]);
var AnimatedRect = styled_default("rect")({
  animationName: "animate-width",
  animationTimingFunction: ANIMATION_TIMING_FUNCTION,
  animationDuration: "0s",
  [`&.${appearingMaskClasses.animate}`]: {
    animationDuration: `${ANIMATION_DURATION_MS}ms`
  },
  "@keyframes animate-width": {
    from: {
      width: 0
    }
  }
});
function AppearingMask(props) {
  const drawingArea = useDrawingArea();
  const chartId = useChartId2();
  const clipId = cleanId(`${chartId}-${props.id}`);
  return (0, import_jsx_runtime61.jsxs)(React94.Fragment, {
    children: [(0, import_jsx_runtime61.jsx)("clipPath", {
      id: clipId,
      children: (0, import_jsx_runtime61.jsx)(AnimatedRect, {
        className: props.skipAnimation ? "" : appearingMaskClasses.animate,
        x: 0,
        y: 0,
        width: drawingArea.left + drawingArea.width + drawingArea.right,
        height: drawingArea.top + drawingArea.height + drawingArea.bottom
      })
    }), (0, import_jsx_runtime61.jsx)("g", {
      clipPath: `url(#${clipId})`,
      children: props.children
    })]
  });
}

// node_modules/@mui/x-charts/esm/LineChart/AnimatedArea.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var _excluded31 = ["skipAnimation", "ownerState"];
function AnimatedArea(props) {
  const {
    skipAnimation,
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const animatedProps = useAnimateArea(props);
  return (0, import_jsx_runtime62.jsx)(AppearingMask, {
    skipAnimation,
    id: `${ownerState.id}-area-clip`,
    children: (0, import_jsx_runtime62.jsx)("path", _extends({
      fill: ownerState.gradientId ? `url(#${ownerState.gradientId})` : ownerState.color,
      filter: (
        // eslint-disable-next-line no-nested-ternary
        ownerState.isHighlighted ? "brightness(140%)" : ownerState.gradientId ? void 0 : "brightness(120%)"
      ),
      opacity: ownerState.isFaded ? 0.3 : 1,
      stroke: "none"
    }, other, animatedProps))
  });
}
true ? AnimatedArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  d: import_prop_types42.default.string.isRequired,
  ownerState: import_prop_types42.default.shape({
    classes: import_prop_types42.default.object,
    color: import_prop_types42.default.string.isRequired,
    gradientId: import_prop_types42.default.string,
    id: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.string]).isRequired,
    isFaded: import_prop_types42.default.bool.isRequired,
    isHighlighted: import_prop_types42.default.bool.isRequired
  }).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types42.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/AreaElement.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var _excluded32 = ["id", "classes", "color", "gradientId", "slots", "slotProps", "onClick"];
function getAreaElementUtilityClass(slot) {
  return generateUtilityClass("MuiAreaElement", slot);
}
var areaElementClasses = generateUtilityClasses("MuiAreaElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses20 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getAreaElementUtilityClass, classes);
};
function AreaElement(props) {
  const {
    id,
    classes: innerClasses,
    color,
    gradientId,
    slots,
    slotProps,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded32);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const ownerState = {
    id,
    classes: innerClasses,
    color,
    gradientId,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses20(ownerState);
  const Area = (slots == null ? void 0 : slots.area) ?? AnimatedArea;
  const areaProps = useSlotProps_default({
    elementType: Area,
    externalSlotProps: slotProps == null ? void 0 : slotProps.area,
    additionalProps: _extends({}, interactionProps, {
      onClick,
      cursor: onClick ? "pointer" : "unset"
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime63.jsx)(Area, _extends({}, other, areaProps));
}
true ? AreaElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types43.default.object,
  color: import_prop_types43.default.string.isRequired,
  d: import_prop_types43.default.string.isRequired,
  gradientId: import_prop_types43.default.string,
  id: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types43.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types43.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types43.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/internals/getCurve.js
function getCurveFactory(curveType) {
  switch (curveType) {
    case "catmullRom":
      return catmullRom_default.alpha(0.5);
    case "linear":
      return linear_default;
    case "monotoneX":
      return monotoneX;
    case "monotoneY":
      return monotoneY;
    case "natural":
      return natural_default;
    case "step":
      return step_default;
    case "stepBefore":
      return stepBefore;
    case "stepAfter":
      return stepAfter;
    case "bumpY":
      return bumpY;
    case "bumpX":
      return bumpX;
    default:
      return monotoneX;
  }
}

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var _excluded33 = ["slots", "slotProps", "onItemClick", "skipAnimation"];
var AreaPlotRoot = styled_default("g", {
  name: "MuiAreaPlot",
  slot: "Root"
})({
  [`& .${areaElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
var useAggregatedData2 = () => {
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const getGradientId = useChartGradientIdBuilder();
  const allData = React97.useMemo(() => {
    if (seriesData === void 0) {
      return [];
    }
    const {
      series,
      stackingGroups
    } = seriesData;
    const defaultXAxisId = xAxisIds[0];
    const defaultYAxisId = yAxisIds[0];
    return stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return [...groupIds].reverse().map((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          connectNulls,
          baseline,
          curve,
          strictStepCurve
        } = series[seriesId];
        const xScale = xAxis[xAxisId].scale;
        const xPosition = getValueToPositionMapper(xScale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        const gradientId = yAxis[yAxisId].colorScale && getGradientId(yAxisId) || xAxis[xAxisId].colorScale && getGradientId(xAxisId) || void 0;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI X Charts: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
          }
          if (xData.length < stackedData.length) {
            throw new Error(`MUI X Charts: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items).`);
          }
        }
        const shouldExpand = (curve == null ? void 0 : curve.includes("step")) && !strictStepCurve && isBandScale(xScale);
        const formattedData = (xData == null ? void 0 : xData.flatMap((x, index) => {
          const nullData = data[index] == null;
          if (shouldExpand) {
            const rep = [{
              x,
              y: stackedData[index],
              nullData,
              isExtension: false
            }];
            if (!nullData && (index === 0 || data[index - 1] == null)) {
              rep.unshift({
                x: (xScale(x) ?? 0) - (xScale.step() - xScale.bandwidth()) / 2,
                y: stackedData[index],
                nullData,
                isExtension: true
              });
            }
            if (!nullData && (index === data.length - 1 || data[index + 1] == null)) {
              rep.push({
                x: (xScale(x) ?? 0) + (xScale.step() + xScale.bandwidth()) / 2,
                y: stackedData[index],
                nullData,
                isExtension: true
              });
            }
            return rep;
          }
          return {
            x,
            y: stackedData[index],
            nullData
          };
        })) ?? [];
        const d3Data = connectNulls ? formattedData.filter((d2) => !d2.nullData) : formattedData;
        const areaPath = area_default().x((d2) => d2.isExtension ? d2.x : xPosition(d2.x)).defined((d2) => connectNulls || !d2.nullData || !!d2.isExtension).y0((d2) => {
          if (typeof baseline === "number") {
            return yScale(baseline);
          }
          if (baseline === "max") {
            return yScale.range()[1];
          }
          if (baseline === "min") {
            return yScale.range()[0];
          }
          const value = d2.y && yScale(d2.y[0]);
          if (Number.isNaN(value)) {
            return yScale.range()[0];
          }
          return value;
        }).y1((d2) => d2.y && yScale(d2.y[1]));
        const d = areaPath.curve(getCurveFactory(curve))(d3Data) || "";
        return _extends({}, series[seriesId], {
          gradientId,
          d,
          seriesId
        });
      });
    });
  }, [seriesData, xAxisIds, yAxisIds, xAxis, yAxis, getGradientId]);
  return allData;
};
function AreaPlot(props) {
  const {
    slots,
    slotProps,
    onItemClick,
    skipAnimation: inSkipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const completedData = useAggregatedData2();
  return (0, import_jsx_runtime64.jsx)(AreaPlotRoot, _extends({}, other, {
    children: completedData.map(({
      d,
      seriesId,
      color,
      area,
      gradientId
    }) => !!area && (0, import_jsx_runtime64.jsx)(AreaElement, {
      id: seriesId,
      d,
      color,
      gradientId,
      slots,
      slotProps,
      onClick: onItemClick && ((event) => onItemClick(event, {
        type: "line",
        seriesId
      })),
      skipAnimation
    }, seriesId))
  }));
}
true ? AreaPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line area item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line item identifier.
   */
  onItemClick: import_prop_types44.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types44.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types44.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types44.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
var React100 = __toESM(require_react(), 1);
var import_prop_types47 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineElement.js
var React99 = __toESM(require_react(), 1);
var import_prop_types46 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/AnimatedLine.js
var React98 = __toESM(require_react(), 1);
var import_prop_types45 = __toESM(require_prop_types(), 1);
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var _excluded34 = ["skipAnimation", "ownerState"];
var AnimatedLine = React98.forwardRef(function AnimatedLine2(props, ref) {
  const {
    skipAnimation,
    ownerState
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const animateProps = useAnimateLine(_extends({}, props, {
    ref
  }));
  return (0, import_jsx_runtime65.jsx)(AppearingMask, {
    skipAnimation,
    id: `${ownerState.id}-line-clip`,
    children: (0, import_jsx_runtime65.jsx)("path", _extends({
      stroke: ownerState.gradientId ? `url(#${ownerState.gradientId})` : ownerState.color,
      strokeWidth: 2,
      strokeLinejoin: "round",
      fill: "none",
      filter: ownerState.isHighlighted ? "brightness(120%)" : void 0,
      opacity: ownerState.isFaded ? 0.3 : 1
    }, other, animateProps))
  });
});
if (true)
  AnimatedLine.displayName = "AnimatedLine";
true ? AnimatedLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  d: import_prop_types45.default.string.isRequired,
  ownerState: import_prop_types45.default.shape({
    classes: import_prop_types45.default.object,
    color: import_prop_types45.default.string.isRequired,
    gradientId: import_prop_types45.default.string,
    id: import_prop_types45.default.oneOfType([import_prop_types45.default.number, import_prop_types45.default.string]).isRequired,
    isFaded: import_prop_types45.default.bool.isRequired,
    isHighlighted: import_prop_types45.default.bool.isRequired
  }).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types45.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineElement.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var _excluded35 = ["id", "classes", "color", "gradientId", "slots", "slotProps", "onClick"];
function getLineElementUtilityClass(slot) {
  return generateUtilityClass("MuiLineElement", slot);
}
var lineElementClasses = generateUtilityClasses("MuiLineElement", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses21 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getLineElementUtilityClass, classes);
};
function LineElement(props) {
  const {
    id,
    classes: innerClasses,
    color,
    gradientId,
    slots,
    slotProps,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id
  });
  const {
    isFaded,
    isHighlighted
  } = useItemHighlighted({
    seriesId: id
  });
  const ownerState = {
    id,
    classes: innerClasses,
    color,
    gradientId,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses21(ownerState);
  const Line = (slots == null ? void 0 : slots.line) ?? AnimatedLine;
  const lineProps = useSlotProps_default({
    elementType: Line,
    externalSlotProps: slotProps == null ? void 0 : slotProps.line,
    additionalProps: _extends({}, interactionProps, {
      onClick,
      cursor: onClick ? "pointer" : "unset"
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime66.jsx)(Line, _extends({}, other, lineProps));
}
true ? LineElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types46.default.object,
  color: import_prop_types46.default.string.isRequired,
  d: import_prop_types46.default.string.isRequired,
  gradientId: import_prop_types46.default.string,
  id: import_prop_types46.default.oneOfType([import_prop_types46.default.number, import_prop_types46.default.string]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types46.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types46.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types46.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var _excluded36 = ["slots", "slotProps", "skipAnimation", "onItemClick"];
var LinePlotRoot = styled_default("g", {
  name: "MuiAreaPlot",
  slot: "Root"
})({
  [`& .${lineElementClasses.root}`]: {
    transition: "opacity 0.2s ease-in, fill 0.2s ease-in"
  }
});
var useAggregatedData3 = () => {
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const getGradientId = useChartGradientIdBuilder();
  const allData = React100.useMemo(() => {
    if (seriesData === void 0) {
      return [];
    }
    const {
      series,
      stackingGroups
    } = seriesData;
    const defaultXAxisId = xAxisIds[0];
    const defaultYAxisId = yAxisIds[0];
    return stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          connectNulls,
          curve,
          strictStepCurve
        } = series[seriesId];
        const xScale = xAxis[xAxisId].scale;
        const xPosition = getValueToPositionMapper(xScale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        const gradientId = yAxis[yAxisId].colorScale && getGradientId(yAxisId) || xAxis[xAxisId].colorScale && getGradientId(xAxisId) || void 0;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI X Charts: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
          }
          if (xData.length < stackedData.length) {
            warnOnce(`MUI X Charts: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items).`, "error");
          }
        }
        const shouldExpand = (curve == null ? void 0 : curve.includes("step")) && !strictStepCurve && isBandScale(xScale);
        const formattedData = (xData == null ? void 0 : xData.flatMap((x, index) => {
          const nullData = data[index] == null;
          if (shouldExpand) {
            const rep = [{
              x,
              y: stackedData[index],
              nullData,
              isExtension: false
            }];
            if (!nullData && (index === 0 || data[index - 1] == null)) {
              rep.unshift({
                x: (xScale(x) ?? 0) - (xScale.step() - xScale.bandwidth()) / 2,
                y: stackedData[index],
                nullData,
                isExtension: true
              });
            }
            if (!nullData && (index === data.length - 1 || data[index + 1] == null)) {
              rep.push({
                x: (xScale(x) ?? 0) + (xScale.step() + xScale.bandwidth()) / 2,
                y: stackedData[index],
                nullData,
                isExtension: true
              });
            }
            return rep;
          }
          return {
            x,
            y: stackedData[index],
            nullData
          };
        })) ?? [];
        const d3Data = connectNulls ? formattedData.filter((d2) => !d2.nullData) : formattedData;
        const linePath = line_default().x((d2) => d2.isExtension ? d2.x : xPosition(d2.x)).defined((d2) => connectNulls || !d2.nullData || !!d2.isExtension).y((d2) => yScale(d2.y[1]));
        const d = linePath.curve(getCurveFactory(curve))(d3Data) || "";
        return _extends({}, series[seriesId], {
          gradientId,
          d,
          seriesId
        });
      });
    });
  }, [seriesData, xAxisIds, yAxisIds, xAxis, yAxis, getGradientId]);
  return allData;
};
function LinePlot(props) {
  const {
    slots,
    slotProps,
    skipAnimation: inSkipAnimation,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const completedData = useAggregatedData3();
  return (0, import_jsx_runtime67.jsx)(LinePlotRoot, _extends({}, other, {
    children: completedData.map(({
      d,
      seriesId,
      color,
      gradientId
    }) => {
      return (0, import_jsx_runtime67.jsx)(LineElement, {
        id: seriesId,
        d,
        color,
        gradientId,
        skipAnimation,
        slots,
        slotProps,
        onClick: onItemClick && ((event) => onItemClick(event, {
          type: "line",
          seriesId
        }))
      }, seriesId);
    })
  }));
}
true ? LinePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line item identifier.
   */
  onItemClick: import_prop_types47.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types47.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types47.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types47.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
var import_prop_types50 = __toESM(require_prop_types(), 1);
var React103 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/LineChart/CircleMarkElement.js
var React101 = __toESM(require_react(), 1);
var import_prop_types48 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/markElementClasses.js
function getMarkElementUtilityClass(slot) {
  return generateUtilityClass("MuiMarkElement", slot);
}
var markElementClasses = generateUtilityClasses("MuiMarkElement", ["root", "highlighted", "faded", "animate", "series"]);
var useUtilityClasses22 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded", skipAnimation ? void 0 : "animate"]
  };
  return composeClasses(slots, getMarkElementUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/LineChart/CircleMarkElement.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var _excluded37 = ["x", "y", "id", "classes", "color", "dataIndex", "onClick", "skipAnimation", "isFaded", "isHighlighted"];
var Circle = styled_default("circle")({
  [`&.${markElementClasses.animate}`]: {
    transitionDuration: `${ANIMATION_DURATION_MS}ms`,
    transitionProperty: "cx, cy",
    transitionTimingFunction: ANIMATION_TIMING_FUNCTION
  }
});
function CircleMarkElement(props) {
  const {
    x,
    y,
    id,
    classes: innerClasses,
    color,
    dataIndex,
    onClick,
    skipAnimation,
    isFaded = false,
    isHighlighted = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const theme = useTheme();
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id,
    dataIndex
  });
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted,
    isFaded,
    color,
    skipAnimation
  };
  const classes = useUtilityClasses22(ownerState);
  return (0, import_jsx_runtime68.jsx)(Circle, _extends({}, other, {
    cx: x,
    cy: y,
    r: 5,
    fill: (theme.vars || theme).palette.background.paper,
    stroke: color,
    strokeWidth: 2,
    className: classes.root,
    onClick,
    cursor: onClick ? "pointer" : "unset"
  }, interactionProps));
}
true ? CircleMarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types48.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: import_prop_types48.default.number.isRequired,
  id: import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: import_prop_types48.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types48.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkElement.js
var React102 = __toESM(require_react(), 1);
var import_prop_types49 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/internals/getSymbol.js
function getSymbol(shape) {
  switch (shape) {
    case "circle":
      return 0;
    case "cross":
      return 1;
    case "diamond":
      return 2;
    case "square":
      return 3;
    case "star":
      return 4;
    case "triangle":
      return 5;
    case "wye":
      return 6;
    default:
      return 0;
  }
}

// node_modules/@mui/x-charts/esm/LineChart/MarkElement.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var _excluded38 = ["x", "y", "id", "classes", "color", "shape", "dataIndex", "onClick", "skipAnimation", "isFaded", "isHighlighted"];
var MarkElementPath = styled_default("path", {
  name: "MuiMarkElement",
  slot: "Root"
})(({
  ownerState,
  theme
}) => ({
  fill: (theme.vars || theme).palette.background.paper,
  stroke: ownerState.color,
  strokeWidth: 2,
  [`&.${markElementClasses.animate}`]: {
    transitionDuration: `${ANIMATION_DURATION_MS}ms`,
    transitionProperty: "transform, transform-origin",
    transitionTimingFunction: ANIMATION_TIMING_FUNCTION
  }
}));
function MarkElement(props) {
  const {
    x,
    y,
    id,
    classes: innerClasses,
    color,
    shape,
    dataIndex,
    onClick,
    skipAnimation,
    isFaded = false,
    isHighlighted = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const interactionProps = useInteractionItemProps({
    type: "line",
    seriesId: id,
    dataIndex
  });
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted,
    isFaded,
    color,
    skipAnimation
  };
  const classes = useUtilityClasses22(ownerState);
  return (0, import_jsx_runtime69.jsx)(MarkElementPath, _extends({}, other, {
    style: {
      transform: `translate(${x}px, ${y}px)`,
      transformOrigin: `${x}px ${y}px`
    },
    ownerState,
    className: classes.root,
    d: Symbol2(symbolsFill[getSymbol(shape)])(),
    onClick,
    cursor: onClick ? "pointer" : "unset"
  }, interactionProps));
}
true ? MarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types49.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: import_prop_types49.default.number.isRequired,
  id: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.string]).isRequired,
  /**
   * If `true`, the marker is faded.
   * @default false
   */
  isFaded: import_prop_types49.default.bool,
  /**
   * If `true`, the marker is highlighted.
   * @default false
   */
  isHighlighted: import_prop_types49.default.bool,
  /**
   * The shape of the marker.
   */
  shape: import_prop_types49.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired,
  /**
   * If `true`, animations are skipped.
   */
  skipAnimation: import_prop_types49.default.bool
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var _excluded39 = ["slots", "slotProps", "skipAnimation", "onItemClick"];
function MarkPlot(props) {
  const {
    slots,
    slotProps,
    skipAnimation: inSkipAnimation,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const isZoomInteracting = useInternalIsZoomInteracting();
  const skipAnimation = useSkipAnimation(isZoomInteracting || inSkipAnimation);
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const chartId = useChartId2();
  const {
    instance,
    store
  } = useChartContext();
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const xAxisInteractionIndex = useSelector(store, selectorChartsInteractionXAxisIndex);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return (0, import_jsx_runtime70.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.map((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          showMark = true,
          shape = "circle"
        } = series[seriesId];
        if (showMark === false) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisId].scale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        if (xData === void 0) {
          throw new Error(`MUI X Charts: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
        }
        const clipId = cleanId(`${chartId}-${seriesId}-line-clip`);
        const colorGetter = getColor_default3(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
        const Mark = (slots == null ? void 0 : slots.mark) ?? (shape === "circle" ? CircleMarkElement : MarkElement);
        const isSeriesHighlighted = isHighlighted({
          seriesId
        });
        const isSeriesFaded = !isSeriesHighlighted && isFaded({
          seriesId
        });
        return (0, import_jsx_runtime70.jsx)("g", {
          clipPath: `url(#${clipId})`,
          children: xData == null ? void 0 : xData.map((x, index) => {
            const value = data[index] == null ? null : stackedData[index][1];
            return {
              x: xScale(x),
              y: value === null ? null : yScale(value),
              position: x,
              value,
              index
            };
          }).filter(({
            x,
            y,
            index,
            position,
            value
          }) => {
            if (value === null || y === null) {
              return false;
            }
            if (!instance.isPointInside(x, y)) {
              return false;
            }
            if (showMark === true) {
              return true;
            }
            return showMark({
              x,
              y,
              index,
              position,
              value
            });
          }).map(({
            x,
            y,
            index
          }) => {
            return (0, import_jsx_runtime70.jsx)(Mark, _extends({
              id: seriesId,
              dataIndex: index,
              shape,
              color: colorGetter(index),
              x,
              y,
              skipAnimation,
              onClick: onItemClick && ((event) => onItemClick(event, {
                type: "line",
                seriesId,
                dataIndex: index
              })),
              isHighlighted: xAxisInteractionIndex === index || isSeriesHighlighted,
              isFaded: isSeriesFaded
            }, slotProps == null ? void 0 : slotProps.mark), `${seriesId}-${index}`);
          })
        }, seriesId);
      });
    })
  }));
}
true ? MarkPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a line mark item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {LineItemIdentifier} lineItemIdentifier The line mark item identifier.
   */
  onItemClick: import_prop_types50.default.func,
  /**
   * If `true`, animations are skipped.
   */
  skipAnimation: import_prop_types50.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types50.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types50.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
var React106 = __toESM(require_react(), 1);
var import_prop_types52 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightElement.js
var React105 = __toESM(require_react(), 1);
var import_prop_types51 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-internals/esm/reactMajor/index.js
var React104 = __toESM(require_react());
var reactMajor_default = parseInt(React104.version, 10);

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightElement.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var _excluded40 = ["x", "y", "id", "classes", "color", "shape"];
function getHighlightElementUtilityClass(slot) {
  return generateUtilityClass("MuiHighlightElement", slot);
}
var lineHighlightElementClasses = generateUtilityClasses("MuiHighlightElement", ["root"]);
var useUtilityClasses23 = (ownerState) => {
  const {
    classes,
    id
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`]
  };
  return composeClasses(slots, getHighlightElementUtilityClass, classes);
};
function LineHighlightElement(props) {
  const {
    x,
    y,
    color,
    shape
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const classes = useUtilityClasses23(props);
  const Element2 = shape === "circle" ? "circle" : "path";
  const additionalProps = shape === "circle" ? {
    cx: 0,
    cy: 0,
    r: other.r === void 0 ? 5 : other.r
  } : {
    d: Symbol2(symbolsFill[getSymbol(shape)])()
  };
  const transformOrigin = reactMajor_default > 18 ? {
    transformOrigin: `${x} ${y}`
  } : {
    "transform-origin": `${x} ${y}`
  };
  return (0, import_jsx_runtime71.jsx)(Element2, _extends({
    pointerEvents: "none",
    className: classes.root,
    transform: `translate(${x} ${y})`,
    fill: color
  }, transformOrigin, additionalProps, other));
}
true ? LineHighlightElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types51.default.object,
  id: import_prop_types51.default.oneOfType([import_prop_types51.default.number, import_prop_types51.default.string]).isRequired,
  shape: import_prop_types51.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var _excluded41 = ["slots", "slotProps"];
function LineHighlightPlot(props) {
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const seriesData = useLineSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const highlightedIndex = useSelector(store, selectorChartsInteractionXAxisIndex);
  if (highlightedIndex === null) {
    return null;
  }
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const Element2 = (slots == null ? void 0 : slots.lineHighlight) ?? LineHighlightElement;
  return (0, import_jsx_runtime72.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisId = defaultXAxisId,
          yAxisId = defaultYAxisId,
          stackedData,
          data,
          disableHighlight,
          shape = "circle"
        } = series[seriesId];
        if (disableHighlight || data[highlightedIndex] == null) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisId].scale);
        const yScale = yAxis[yAxisId].scale;
        const xData = xAxis[xAxisId].data;
        if (xData === void 0) {
          throw new Error(`MUI X Charts: ${xAxisId === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisId}"`} should have data property to be able to display a line plot.`);
        }
        const x = xScale(xData[highlightedIndex]);
        const y = yScale(stackedData[highlightedIndex][1]);
        if (!instance.isPointInside(x, y)) {
          return null;
        }
        const colorGetter = getColor_default3(series[seriesId], xAxis[xAxisId], yAxis[yAxisId]);
        return (0, import_jsx_runtime72.jsx)(Element2, _extends({
          id: seriesId,
          color: colorGetter(highlightedIndex),
          x,
          y,
          shape
        }, slotProps == null ? void 0 : slotProps.lineHighlight), `${seriesId}`);
      });
    })
  }));
}
true ? LineHighlightPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types52.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types52.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/useLineChartProps.js
var React107 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/LineChart/LineChart.plugins.js
var LINE_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/LineChart/useLineChartProps.js
var _excluded42 = ["xAxis", "yAxis", "series", "width", "height", "margin", "colors", "dataset", "sx", "onAreaClick", "onLineClick", "onMarkClick", "axisHighlight", "disableLineItemHighlight", "hideLegend", "grid", "children", "slots", "slotProps", "skipAnimation", "loading", "highlightedItem", "onHighlightChange", "className", "showToolbar"];
var useLineChartProps = (props) => {
  var _a, _b, _c, _d, _e;
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    onAreaClick,
    onLineClick,
    onMarkClick,
    axisHighlight,
    disableLineItemHighlight,
    grid,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    highlightedItem,
    onHighlightChange,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const seriesWithDefault = React107.useMemo(() => series.map((s) => _extends({
    disableHighlight: !!disableLineItemHighlight,
    type: "line"
  }, s)), [disableLineItemHighlight, series]);
  const chartContainerProps = _extends({}, other, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    dataset,
    xAxis: xAxis ?? [{
      id: DEFAULT_X_AXIS_KEY,
      scaleType: "point",
      data: Array.from({
        length: Math.max(...series.map((s) => (s.data ?? dataset ?? []).length))
      }, (_, index) => index)
    }],
    yAxis,
    highlightedItem,
    onHighlightChange,
    disableAxisListener: ((_a = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _a.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    className,
    skipAnimation,
    plugins: LINE_CHART_PLUGINS
  });
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const clipPathGroupProps = {
    clipPath: `url(#${clipPathId})`
  };
  const clipPathProps = {
    id: clipPathId
  };
  const areaPlotProps = {
    slots,
    slotProps,
    onItemClick: onAreaClick
  };
  const linePlotProps = {
    slots,
    slotProps,
    onItemClick: onLineClick
  };
  const markPlotProps = {
    slots,
    slotProps,
    onItemClick: onMarkClick,
    skipAnimation
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({
    x: "line"
  }, axisHighlight);
  const lineHighlightPlotProps = {
    slots,
    slotProps
  };
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx,
    legendPosition: (_c = (_b = props.slotProps) == null ? void 0 : _b.legend) == null ? void 0 : _c.position,
    legendDirection: (_e = (_d = props.slotProps) == null ? void 0 : _d.legend) == null ? void 0 : _e.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    areaPlotProps,
    linePlotProps,
    markPlotProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    lineHighlightPlotProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var LineChart = React108.forwardRef(function LineChart2(inProps, ref) {
  var _a, _b, _c;
  const props = useThemeProps({
    props: inProps,
    name: "MuiLineChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    areaPlotProps,
    linePlotProps,
    markPlotProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    lineHighlightPlotProps,
    legendProps,
    children
  } = useLineChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const Toolbar2 = ((_b = props.slots) == null ? void 0 : _b.toolbar) ?? ChartsToolbar;
  return (0, import_jsx_runtime73.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime73.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar ? (0, import_jsx_runtime73.jsx)(Toolbar2, {}) : null, !props.hideLegend && (0, import_jsx_runtime73.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime73.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime73.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime73.jsxs)("g", _extends({}, clipPathGroupProps, {
          children: [(0, import_jsx_runtime73.jsx)(AreaPlot, _extends({}, areaPlotProps)), (0, import_jsx_runtime73.jsx)(LinePlot, _extends({}, linePlotProps)), (0, import_jsx_runtime73.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime73.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps))]
        })), (0, import_jsx_runtime73.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime73.jsx)("g", {
          "data-drawing-container": true,
          children: (0, import_jsx_runtime73.jsx)(MarkPlot, _extends({}, markPlotProps))
        }), (0, import_jsx_runtime73.jsx)(LineHighlightPlot, _extends({}, lineHighlightPlotProps)), (0, import_jsx_runtime73.jsx)(ChartsClipPath, _extends({}, clipPathProps)), children]
      })), !props.loading && (0, import_jsx_runtime73.jsx)(Tooltip, _extends({}, (_c = props.slotProps) == null ? void 0 : _c.tooltip))]
    }))
  }));
});
if (true)
  LineChart.displayName = "LineChart";
true ? LineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types53.default.shape({
    current: import_prop_types53.default.object
  }),
  /**
   * The configuration of axes highlight.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   * @default { x: 'line' }
   */
  axisHighlight: import_prop_types53.default.shape({
    x: import_prop_types53.default.oneOf(["band", "line", "none"]),
    y: import_prop_types53.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types53.default.node,
  className: import_prop_types53.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string), import_prop_types53.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types53.default.arrayOf(import_prop_types53.default.object),
  desc: import_prop_types53.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types53.default.bool,
  /**
   * If `true`, render the line highlight item.
   */
  disableLineItemHighlight: import_prop_types53.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types53.default.shape({
    horizontal: import_prop_types53.default.bool,
    vertical: import_prop_types53.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types53.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types53.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types53.default.shape({
    dataIndex: import_prop_types53.default.number,
    seriesId: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types53.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types53.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types53.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.shape({
    bottom: import_prop_types53.default.number,
    left: import_prop_types53.default.number,
    right: import_prop_types53.default.number,
    top: import_prop_types53.default.number
  })]),
  /**
   * Callback fired when an area element is clicked.
   */
  onAreaClick: import_prop_types53.default.func,
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types53.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types53.default.func,
  /**
   * Callback fired when a line element is clicked.
   */
  onLineClick: import_prop_types53.default.func,
  /**
   * Callback fired when a mark element is clicked.
   */
  onMarkClick: import_prop_types53.default.func,
  /**
   * The series to display in the line chart.
   * An array of [[LineSeriesType]] objects.
   */
  series: import_prop_types53.default.arrayOf(import_prop_types53.default.object).isRequired,
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types53.default.bool,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types53.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types53.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types53.default.object,
  sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
  theme: import_prop_types53.default.oneOf(["dark", "light"]),
  title: import_prop_types53.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types53.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    barGapRatio: import_prop_types53.default.number,
    categoryGapRatio: import_prop_types53.default.number,
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      type: import_prop_types53.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types53.default.string,
      values: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number, import_prop_types53.default.string]).isRequired)
    }), import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["band"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      type: import_prop_types53.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types53.default.string,
      values: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number, import_prop_types53.default.string]).isRequired)
    }), import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["point"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["log"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["pow"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["sqrt"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["time"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["utc"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["x"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    height: import_prop_types53.default.number,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["linear"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelMinGap: import_prop_types53.default.number,
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    barGapRatio: import_prop_types53.default.number,
    categoryGapRatio: import_prop_types53.default.number,
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      type: import_prop_types53.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types53.default.string,
      values: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number, import_prop_types53.default.string]).isRequired)
    }), import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["band"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      type: import_prop_types53.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types53.default.string,
      values: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number, import_prop_types53.default.string]).isRequired)
    }), import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["point"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["log"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["pow"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["sqrt"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["time"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["utc"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  }), import_prop_types53.default.shape({
    axis: import_prop_types53.default.oneOf(["y"]),
    classes: import_prop_types53.default.object,
    colorMap: import_prop_types53.default.oneOfType([import_prop_types53.default.shape({
      color: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.string.isRequired), import_prop_types53.default.func]).isRequired,
      max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
      type: import_prop_types53.default.oneOf(["continuous"]).isRequired
    }), import_prop_types53.default.shape({
      colors: import_prop_types53.default.arrayOf(import_prop_types53.default.string).isRequired,
      thresholds: import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]).isRequired).isRequired,
      type: import_prop_types53.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types53.default.array,
    dataKey: import_prop_types53.default.string,
    disableLine: import_prop_types53.default.bool,
    disableTicks: import_prop_types53.default.bool,
    domainLimit: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["nice", "strict"]), import_prop_types53.default.func]),
    fill: import_prop_types53.default.string,
    hideTooltip: import_prop_types53.default.bool,
    id: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    ignoreTooltip: import_prop_types53.default.bool,
    label: import_prop_types53.default.string,
    labelStyle: import_prop_types53.default.object,
    max: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    min: import_prop_types53.default.oneOfType([import_prop_types53.default.instanceOf(Date), import_prop_types53.default.number]),
    offset: import_prop_types53.default.number,
    position: import_prop_types53.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types53.default.bool,
    scaleType: import_prop_types53.default.oneOf(["linear"]),
    slotProps: import_prop_types53.default.object,
    slots: import_prop_types53.default.object,
    stroke: import_prop_types53.default.string,
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    tickInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.array, import_prop_types53.default.func]),
    tickLabelInterval: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.func]),
    tickLabelPlacement: import_prop_types53.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types53.default.object,
    tickMaxStep: import_prop_types53.default.number,
    tickMinStep: import_prop_types53.default.number,
    tickNumber: import_prop_types53.default.number,
    tickPlacement: import_prop_types53.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types53.default.number,
    valueFormatter: import_prop_types53.default.func,
    width: import_prop_types53.default.number
  })]).isRequired)
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieChart.js
var React115 = __toESM(require_react(), 1);
var import_prop_types59 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PiePlot.js
var React114 = __toESM(require_react(), 1);
var import_prop_types58 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArcPlot.js
var React111 = __toESM(require_react(), 1);
var import_prop_types55 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArc.js
var React109 = __toESM(require_react(), 1);
var import_prop_types54 = __toESM(require_prop_types(), 1);
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var _excluded43 = ["classes", "color", "dataIndex", "id", "isFaded", "isHighlighted", "onClick", "cornerRadius", "startAngle", "endAngle", "innerRadius", "outerRadius", "paddingAngle", "skipAnimation"];
function getPieArcUtilityClass(slot) {
  return generateUtilityClass("MuiPieArc", slot);
}
var pieArcClasses = generateUtilityClasses("MuiPieArc", ["root", "highlighted", "faded", "series"]);
var useUtilityClasses24 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    dataIndex
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, `data-index-${dataIndex}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getPieArcUtilityClass, classes);
};
var PieArcRoot = styled_default("path", {
  name: "MuiPieArc",
  slot: "Root",
  overridesResolver: (_, styles) => styles.arc
  // FIXME: Inconsistent naming with slot
})(({
  theme
}) => ({
  // Got to move stroke to an element prop instead of style.
  stroke: (theme.vars || theme).palette.background.paper,
  transitionProperty: "opacity, fill, filter",
  transitionDuration: `${ANIMATION_DURATION_MS}ms`,
  transitionTimingFunction: ANIMATION_TIMING_FUNCTION
}));
var PieArc = React109.forwardRef(function PieArc2(props, ref) {
  const {
    classes: innerClasses,
    color,
    dataIndex,
    id,
    isFaded,
    isHighlighted,
    onClick,
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius,
    paddingAngle,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const ownerState = {
    id,
    dataIndex,
    classes: innerClasses,
    color,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses24(ownerState);
  const interactionProps = useInteractionItemProps({
    type: "pie",
    seriesId: id,
    dataIndex
  });
  const animatedProps = useAnimatePieArc({
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius,
    outerRadius,
    paddingAngle,
    skipAnimation,
    ref
  });
  return (0, import_jsx_runtime74.jsx)(PieArcRoot, _extends({
    onClick,
    cursor: onClick ? "pointer" : "unset",
    ownerState,
    className: classes.root,
    fill: ownerState.color,
    opacity: ownerState.isFaded ? 0.3 : 1,
    filter: ownerState.isHighlighted ? "brightness(120%)" : "none",
    strokeWidth: 1,
    strokeLinejoin: "round"
  }, other, interactionProps, animatedProps));
});
if (true)
  PieArc.displayName = "PieArc";
true ? PieArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types54.default.object,
  cornerRadius: import_prop_types54.default.number.isRequired,
  dataIndex: import_prop_types54.default.number.isRequired,
  endAngle: import_prop_types54.default.number.isRequired,
  id: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]).isRequired,
  innerRadius: import_prop_types54.default.number.isRequired,
  isFaded: import_prop_types54.default.bool.isRequired,
  isHighlighted: import_prop_types54.default.bool.isRequired,
  outerRadius: import_prop_types54.default.number.isRequired,
  paddingAngle: import_prop_types54.default.number.isRequired,
  /**
   * @default false
   */
  skipAnimation: import_prop_types54.default.bool.isRequired,
  startAngle: import_prop_types54.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/dataTransform/useTransformData.js
var React110 = __toESM(require_react(), 1);
function useTransformData(series) {
  const {
    id: seriesId,
    data,
    faded,
    highlighted,
    paddingAngle: basePaddingAngle = 0,
    innerRadius: baseInnerRadius = 0,
    arcLabelRadius: baseArcLabelRadius,
    outerRadius: baseOuterRadius,
    cornerRadius: baseCornerRadius = 0
  } = series;
  const {
    isFaded: isItemFaded,
    isHighlighted: isItemHighlighted
  } = useItemHighlightedGetter();
  const dataWithHighlight = React110.useMemo(() => data.map((item, itemIndex) => {
    const currentItem = {
      seriesId,
      dataIndex: itemIndex
    };
    const isHighlighted = isItemHighlighted(currentItem);
    const isFaded = !isHighlighted && isItemFaded(currentItem);
    const attributesOverride = _extends({
      additionalRadius: 0
    }, isFaded && faded || isHighlighted && highlighted || {});
    const paddingAngle = Math.max(0, deg2rad(attributesOverride.paddingAngle ?? basePaddingAngle));
    const innerRadius = Math.max(0, attributesOverride.innerRadius ?? baseInnerRadius);
    const outerRadius = Math.max(0, attributesOverride.outerRadius ?? baseOuterRadius + attributesOverride.additionalRadius);
    const cornerRadius = attributesOverride.cornerRadius ?? baseCornerRadius;
    const arcLabelRadius = attributesOverride.arcLabelRadius ?? baseArcLabelRadius ?? (innerRadius + outerRadius) / 2;
    return _extends({}, item, attributesOverride, {
      dataIndex: itemIndex,
      isFaded,
      isHighlighted,
      paddingAngle,
      innerRadius,
      outerRadius,
      cornerRadius,
      arcLabelRadius
    });
  }), [baseCornerRadius, baseInnerRadius, baseOuterRadius, basePaddingAngle, baseArcLabelRadius, data, faded, highlighted, isItemFaded, isItemHighlighted, seriesId]);
  return dataWithHighlight;
}

// node_modules/@mui/x-charts/esm/PieChart/PieArcPlot.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var _excluded44 = ["slots", "slotProps", "innerRadius", "outerRadius", "cornerRadius", "paddingAngle", "id", "highlighted", "faded", "data", "onItemClick", "skipAnimation"];
function PieArcPlot(props) {
  const {
    slots,
    slotProps,
    innerRadius = 0,
    outerRadius,
    cornerRadius = 0,
    paddingAngle = 0,
    id,
    highlighted,
    faded = {
      additionalRadius: -5
    },
    data,
    onItemClick,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const transformedData = useTransformData({
    innerRadius,
    outerRadius,
    cornerRadius,
    paddingAngle,
    id,
    highlighted,
    faded,
    data
  });
  if (data.length === 0) {
    return null;
  }
  const Arc = (slots == null ? void 0 : slots.pieArc) ?? PieArc;
  return (0, import_jsx_runtime75.jsx)("g", _extends({}, other, {
    children: transformedData.map((item, index) => (0, import_jsx_runtime75.jsx)(Arc, _extends({
      startAngle: item.startAngle,
      endAngle: item.endAngle,
      paddingAngle: item.paddingAngle,
      innerRadius: item.innerRadius,
      outerRadius: item.outerRadius,
      cornerRadius: item.cornerRadius,
      skipAnimation: skipAnimation ?? false,
      id,
      color: item.color,
      dataIndex: index,
      isFaded: item.isFaded,
      isHighlighted: item.isHighlighted,
      onClick: onItemClick && ((event) => {
        onItemClick(event, {
          type: "pie",
          seriesId: id,
          dataIndex: index
        }, item);
      })
    }, slotProps == null ? void 0 : slotProps.pieArc), item.dataIndex))
  }));
}
true ? PieArcPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The radius between circle center and the arc label in px.
   * @default (innerRadius - outerRadius) / 2
   */
  arcLabelRadius: import_prop_types55.default.number,
  /**
   * The radius applied to arc corners (similar to border radius).
   * @default 0
   */
  cornerRadius: import_prop_types55.default.number,
  data: import_prop_types55.default.arrayOf(import_prop_types55.default.shape({
    color: import_prop_types55.default.string.isRequired,
    endAngle: import_prop_types55.default.number.isRequired,
    formattedValue: import_prop_types55.default.string.isRequired,
    id: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
    index: import_prop_types55.default.number.isRequired,
    label: import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.string]),
    labelMarkType: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["circle", "line", "square"]), import_prop_types55.default.func]),
    padAngle: import_prop_types55.default.number.isRequired,
    startAngle: import_prop_types55.default.number.isRequired,
    value: import_prop_types55.default.number.isRequired
  })).isRequired,
  /**
   * Override the arc attributes when it is faded.
   * @default { additionalRadius: -5 }
   */
  faded: import_prop_types55.default.shape({
    additionalRadius: import_prop_types55.default.number,
    arcLabelRadius: import_prop_types55.default.number,
    color: import_prop_types55.default.string,
    cornerRadius: import_prop_types55.default.number,
    innerRadius: import_prop_types55.default.number,
    outerRadius: import_prop_types55.default.number,
    paddingAngle: import_prop_types55.default.number
  }),
  /**
   * Override the arc attributes when it is highlighted.
   */
  highlighted: import_prop_types55.default.shape({
    additionalRadius: import_prop_types55.default.number,
    arcLabelRadius: import_prop_types55.default.number,
    color: import_prop_types55.default.string,
    cornerRadius: import_prop_types55.default.number,
    innerRadius: import_prop_types55.default.number,
    outerRadius: import_prop_types55.default.number,
    paddingAngle: import_prop_types55.default.number
  }),
  id: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]).isRequired,
  /**
   * The radius between circle center and the beginning of the arc.
   * @default 0
   */
  innerRadius: import_prop_types55.default.number,
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onItemClick: import_prop_types55.default.func,
  /**
   * The radius between circle center and the end of the arc.
   */
  outerRadius: import_prop_types55.default.number.isRequired,
  /**
   * The padding angle (deg) between two arcs.
   * @default 0
   */
  paddingAngle: import_prop_types55.default.number,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types55.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types55.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types55.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabelPlot.js
var React113 = __toESM(require_react(), 1);
var import_prop_types57 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabel.js
var React112 = __toESM(require_react(), 1);
var import_prop_types56 = __toESM(require_prop_types(), 1);
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var _excluded45 = ["id", "classes", "color", "startAngle", "endAngle", "paddingAngle", "arcLabelRadius", "innerRadius", "outerRadius", "cornerRadius", "formattedArcLabel", "isHighlighted", "isFaded", "style", "skipAnimation"];
function getPieArcLabelUtilityClass(slot) {
  return generateUtilityClass("MuiPieArcLabel", slot);
}
var pieArcLabelClasses = generateUtilityClasses("MuiPieArcLabel", ["root", "highlighted", "faded", "animate", "series"]);
var useUtilityClasses25 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted,
    skipAnimation
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded", !skipAnimation && "animate"]
  };
  return composeClasses(slots, getPieArcLabelUtilityClass, classes);
};
var PieArcLabelRoot = styled_default("text", {
  name: "MuiPieArcLabel",
  slot: "Root"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.text.primary,
  textAnchor: "middle",
  dominantBaseline: "middle",
  pointerEvents: "none",
  animationName: "animate-opacity",
  animationDuration: "0s",
  animationTimingFunction: ANIMATION_TIMING_FUNCTION,
  [`&.${pieArcLabelClasses.animate}`]: {
    animationDuration: `${ANIMATION_DURATION_MS}ms`
  },
  "@keyframes animate-opacity": {
    from: {
      opacity: 0
    }
  }
}));
var PieArcLabel = React112.forwardRef(function PieArcLabel2(props, ref) {
  const {
    id,
    classes: innerClasses,
    color,
    startAngle,
    endAngle,
    paddingAngle,
    arcLabelRadius,
    cornerRadius,
    formattedArcLabel,
    isHighlighted,
    isFaded,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const ownerState = {
    id,
    classes: innerClasses,
    color,
    isFaded,
    isHighlighted,
    skipAnimation
  };
  const classes = useUtilityClasses25(ownerState);
  const animatedProps = useAnimatePieArcLabel({
    cornerRadius,
    startAngle,
    endAngle,
    innerRadius: arcLabelRadius,
    outerRadius: arcLabelRadius,
    paddingAngle,
    skipAnimation,
    ref
  });
  return (0, import_jsx_runtime76.jsx)(PieArcLabelRoot, _extends({
    className: classes.root
  }, other, animatedProps, {
    children: formattedArcLabel
  }));
});
if (true)
  PieArcLabel.displayName = "PieArcLabel";
true ? PieArcLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  arcLabelRadius: import_prop_types56.default.number.isRequired,
  classes: import_prop_types56.default.object,
  color: import_prop_types56.default.string.isRequired,
  cornerRadius: import_prop_types56.default.number.isRequired,
  endAngle: import_prop_types56.default.number.isRequired,
  formattedArcLabel: import_prop_types56.default.string,
  id: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.string]).isRequired,
  innerRadius: import_prop_types56.default.number.isRequired,
  isFaded: import_prop_types56.default.bool.isRequired,
  isHighlighted: import_prop_types56.default.bool.isRequired,
  outerRadius: import_prop_types56.default.number.isRequired,
  paddingAngle: import_prop_types56.default.number.isRequired,
  skipAnimation: import_prop_types56.default.bool.isRequired,
  startAngle: import_prop_types56.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieArcLabelPlot.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var _excluded46 = ["arcLabel", "arcLabelMinAngle", "arcLabelRadius", "cornerRadius", "data", "faded", "highlighted", "id", "innerRadius", "outerRadius", "paddingAngle", "skipAnimation", "slotProps", "slots"];
var RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  var _a;
  if (!arcLabel) {
    return null;
  }
  const angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  switch (arcLabel) {
    case "label":
      return getLabel(item.label, "arc");
    case "value":
      return (_a = item.value) == null ? void 0 : _a.toString();
    case "formattedValue":
      return item.formattedValue;
    default:
      return arcLabel(_extends({}, item, {
        label: getLabel(item.label, "arc")
      }));
  }
}
function PieArcLabelPlot(props) {
  const {
    arcLabel,
    arcLabelMinAngle = 0,
    arcLabelRadius,
    cornerRadius = 0,
    data,
    faded = {
      additionalRadius: -5
    },
    highlighted,
    id,
    innerRadius,
    outerRadius,
    paddingAngle = 0,
    skipAnimation,
    slotProps,
    slots
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const transformedData = useTransformData({
    innerRadius,
    outerRadius,
    arcLabelRadius,
    cornerRadius,
    paddingAngle,
    id,
    highlighted,
    faded,
    data
  });
  if (data.length === 0) {
    return null;
  }
  const ArcLabel = (slots == null ? void 0 : slots.pieArcLabel) ?? PieArcLabel;
  return (0, import_jsx_runtime77.jsx)("g", _extends({}, other, {
    children: transformedData.map((item) => (0, import_jsx_runtime77.jsx)(ArcLabel, _extends({
      startAngle: item.startAngle,
      endAngle: item.endAngle,
      paddingAngle: item.paddingAngle,
      innerRadius: item.innerRadius,
      outerRadius: item.outerRadius,
      arcLabelRadius: item.arcLabelRadius,
      cornerRadius: item.cornerRadius,
      id,
      color: item.color,
      isFaded: item.isFaded,
      isHighlighted: item.isHighlighted,
      formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item),
      skipAnimation: skipAnimation ?? false
    }, slotProps == null ? void 0 : slotProps.pieArcLabel), item.id ?? item.dataIndex))
  }));
}
true ? PieArcLabelPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The label displayed into the arc.
   */
  arcLabel: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["formattedValue", "label", "value"]), import_prop_types57.default.func]),
  /**
   * The minimal angle required to display the arc label.
   * @default 0
   */
  arcLabelMinAngle: import_prop_types57.default.number,
  /**
   * The radius between circle center and the arc label in px.
   * @default (innerRadius - outerRadius) / 2
   */
  arcLabelRadius: import_prop_types57.default.number,
  /**
   * The radius applied to arc corners (similar to border radius).
   * @default 0
   */
  cornerRadius: import_prop_types57.default.number,
  data: import_prop_types57.default.arrayOf(import_prop_types57.default.shape({
    color: import_prop_types57.default.string.isRequired,
    endAngle: import_prop_types57.default.number.isRequired,
    formattedValue: import_prop_types57.default.string.isRequired,
    id: import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.string]),
    index: import_prop_types57.default.number.isRequired,
    label: import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.string]),
    labelMarkType: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["circle", "line", "square"]), import_prop_types57.default.func]),
    padAngle: import_prop_types57.default.number.isRequired,
    startAngle: import_prop_types57.default.number.isRequired,
    value: import_prop_types57.default.number.isRequired
  })).isRequired,
  /**
   * Override the arc attributes when it is faded.
   * @default { additionalRadius: -5 }
   */
  faded: import_prop_types57.default.shape({
    additionalRadius: import_prop_types57.default.number,
    arcLabelRadius: import_prop_types57.default.number,
    color: import_prop_types57.default.string,
    cornerRadius: import_prop_types57.default.number,
    innerRadius: import_prop_types57.default.number,
    outerRadius: import_prop_types57.default.number,
    paddingAngle: import_prop_types57.default.number
  }),
  /**
   * Override the arc attributes when it is highlighted.
   */
  highlighted: import_prop_types57.default.shape({
    additionalRadius: import_prop_types57.default.number,
    arcLabelRadius: import_prop_types57.default.number,
    color: import_prop_types57.default.string,
    cornerRadius: import_prop_types57.default.number,
    innerRadius: import_prop_types57.default.number,
    outerRadius: import_prop_types57.default.number,
    paddingAngle: import_prop_types57.default.number
  }),
  id: import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.string]).isRequired,
  /**
   * The radius between circle center and the beginning of the arc.
   * @default 0
   */
  innerRadius: import_prop_types57.default.number,
  /**
   * The radius between circle center and the end of the arc.
   */
  outerRadius: import_prop_types57.default.number.isRequired,
  /**
   * The padding angle (deg) between two arcs.
   * @default 0
   */
  paddingAngle: import_prop_types57.default.number,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types57.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types57.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types57.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/internals/getPercentageValue.js
function getPercentageValue(value, refValue) {
  if (typeof value === "number") {
    return value;
  }
  if (value === "100%") {
    return refValue;
  }
  if (value.endsWith("%")) {
    const percentage = Number.parseFloat(value.slice(0, value.length - 1));
    if (!Number.isNaN(percentage)) {
      return percentage * refValue / 100;
    }
  }
  if (value.endsWith("px")) {
    const val = Number.parseFloat(value.slice(0, value.length - 2));
    if (!Number.isNaN(val)) {
      return val;
    }
  }
  throw new Error(`MUI X Charts: Received an unknown value "${value}". It should be a number, or a string with a percentage value.`);
}

// node_modules/@mui/x-charts/esm/PieChart/getPieCoordinates.js
function getPieCoordinates(series, drawing) {
  const {
    height,
    width
  } = drawing;
  const {
    cx: cxParam,
    cy: cyParam
  } = series;
  const availableRadius = Math.min(width, height) / 2;
  const cx = getPercentageValue(cxParam ?? "50%", width);
  const cy = getPercentageValue(cyParam ?? "50%", height);
  return {
    cx,
    cy,
    availableRadius
  };
}

// node_modules/@mui/x-charts/esm/PieChart/PiePlot.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
function PiePlot(props) {
  const {
    skipAnimation: inSkipAnimation,
    slots,
    slotProps,
    onItemClick
  } = props;
  const seriesData = usePieSeriesContext();
  const {
    left: left2,
    top: top2,
    width,
    height
  } = useDrawingArea();
  const skipAnimation = useSkipAnimation(inSkipAnimation);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  return (0, import_jsx_runtime78.jsxs)("g", {
    children: [seriesOrder.map((seriesId) => {
      const {
        innerRadius: innerRadiusParam,
        outerRadius: outerRadiusParam,
        cornerRadius,
        paddingAngle,
        data,
        cx: cxParam,
        cy: cyParam,
        highlighted,
        faded
      } = series[seriesId];
      const {
        cx,
        cy,
        availableRadius
      } = getPieCoordinates({
        cx: cxParam,
        cy: cyParam
      }, {
        width,
        height
      });
      const outerRadius = getPercentageValue(outerRadiusParam ?? availableRadius, availableRadius);
      const innerRadius = getPercentageValue(innerRadiusParam ?? 0, availableRadius);
      return (0, import_jsx_runtime78.jsx)("g", {
        transform: `translate(${left2 + cx}, ${top2 + cy})`,
        children: (0, import_jsx_runtime78.jsx)(PieArcPlot, {
          innerRadius,
          outerRadius,
          cornerRadius,
          paddingAngle,
          id: seriesId,
          data,
          skipAnimation,
          highlighted,
          faded,
          onItemClick,
          slots,
          slotProps
        })
      }, seriesId);
    }), seriesOrder.map((seriesId) => {
      const {
        innerRadius: innerRadiusParam,
        outerRadius: outerRadiusParam,
        arcLabelRadius: arcLabelRadiusParam,
        cornerRadius,
        paddingAngle,
        arcLabel,
        arcLabelMinAngle,
        data,
        cx: cxParam,
        cy: cyParam
      } = series[seriesId];
      const {
        cx,
        cy,
        availableRadius
      } = getPieCoordinates({
        cx: cxParam,
        cy: cyParam
      }, {
        width,
        height
      });
      const outerRadius = getPercentageValue(outerRadiusParam ?? availableRadius, availableRadius);
      const innerRadius = getPercentageValue(innerRadiusParam ?? 0, availableRadius);
      const arcLabelRadius = arcLabelRadiusParam === void 0 ? (outerRadius + innerRadius) / 2 : getPercentageValue(arcLabelRadiusParam, availableRadius);
      return (0, import_jsx_runtime78.jsx)("g", {
        transform: `translate(${left2 + cx}, ${top2 + cy})`,
        children: (0, import_jsx_runtime78.jsx)(PieArcLabelPlot, {
          innerRadius,
          outerRadius: outerRadius ?? availableRadius,
          arcLabelRadius,
          cornerRadius,
          paddingAngle,
          id: seriesId,
          data,
          skipAnimation,
          arcLabel,
          arcLabelMinAngle,
          slots,
          slotProps
        })
      }, seriesId);
    })]
  });
}
true ? PiePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onItemClick: import_prop_types58.default.func,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: import_prop_types58.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types58.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types58.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/PieChart/PieChart.plugins.js
var PIE_CHART_PLUGINS = [useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/PieChart/PieChart.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var _excluded47 = ["series", "width", "height", "margin", "colors", "sx", "skipAnimation", "hideLegend", "children", "slots", "slotProps", "onItemClick", "loading", "highlightedItem", "onHighlightChange", "className", "showToolbar"];
var defaultMargin = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
var PieChart = React115.forwardRef(function PieChart2(inProps, ref) {
  var _a, _b, _c, _d, _e, _f, _g;
  const props = useThemeProps({
    props: inProps,
    name: "MuiPieChart"
  });
  const {
    series,
    width,
    height,
    margin: marginProps,
    colors,
    sx,
    skipAnimation,
    hideLegend,
    children,
    slots,
    slotProps,
    onItemClick,
    loading,
    highlightedItem,
    onHighlightChange,
    className,
    showToolbar
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const margin = defaultizeMargin(marginProps, defaultMargin);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(_extends({}, other, {
    series: series.map((s) => _extends({
      type: "pie"
    }, s)),
    width,
    height,
    margin,
    colors,
    highlightedItem,
    onHighlightChange,
    className,
    skipAnimation,
    plugins: PIE_CHART_PLUGINS
  }), ref);
  const Tooltip = (slots == null ? void 0 : slots.tooltip) ?? ChartsTooltip;
  const Toolbar2 = ((_a = props.slots) == null ? void 0 : _a.toolbar) ?? ChartsToolbar;
  return (0, import_jsx_runtime79.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime79.jsxs)(ChartsWrapper, {
      legendPosition: (_c = (_b = props.slotProps) == null ? void 0 : _b.legend) == null ? void 0 : _c.position,
      legendDirection: ((_e = (_d = props == null ? void 0 : props.slotProps) == null ? void 0 : _d.legend) == null ? void 0 : _e.direction) ?? "vertical",
      sx,
      children: [showToolbar ? (0, import_jsx_runtime79.jsx)(Toolbar2, {}) : null, !hideLegend && (0, import_jsx_runtime79.jsx)(ChartsLegend, {
        direction: ((_g = (_f = props == null ? void 0 : props.slotProps) == null ? void 0 : _f.legend) == null ? void 0 : _g.direction) ?? "vertical",
        slots,
        slotProps
      }), (0, import_jsx_runtime79.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime79.jsx)(PiePlot, {
          slots,
          slotProps,
          onItemClick
        }), (0, import_jsx_runtime79.jsx)(ChartsOverlay, {
          loading,
          slots,
          slotProps
        }), children]
      })), !loading && (0, import_jsx_runtime79.jsx)(Tooltip, _extends({
        trigger: "item"
      }, slotProps == null ? void 0 : slotProps.tooltip))]
    })
  }));
});
if (true)
  PieChart.displayName = "PieChart";
true ? PieChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types59.default.shape({
    current: import_prop_types59.default.object
  }),
  children: import_prop_types59.default.node,
  className: import_prop_types59.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.string), import_prop_types59.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types59.default.arrayOf(import_prop_types59.default.object),
  desc: import_prop_types59.default.string,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types59.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types59.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types59.default.shape({
    dataIndex: import_prop_types59.default.number,
    seriesId: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types59.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types59.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types59.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.shape({
    bottom: import_prop_types59.default.number,
    left: import_prop_types59.default.number,
    right: import_prop_types59.default.number,
    top: import_prop_types59.default.number
  })]),
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types59.default.func,
  /**
   * Callback fired when a pie arc is clicked.
   */
  onItemClick: import_prop_types59.default.func,
  /**
   * The series to display in the pie chart.
   * An array of [[PieSeriesType]] objects.
   */
  series: import_prop_types59.default.arrayOf(import_prop_types59.default.object).isRequired,
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types59.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types59.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types59.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types59.default.object,
  sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
  theme: import_prop_types59.default.oneOf(["dark", "light"]),
  title: import_prop_types59.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types59.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var React120 = __toESM(require_react(), 1);
var import_prop_types63 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var React118 = __toESM(require_react(), 1);
var import_prop_types62 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
var React117 = __toESM(require_react(), 1);
var import_prop_types61 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterMarker.js
var React116 = __toESM(require_react(), 1);
var import_prop_types60 = __toESM(require_prop_types(), 1);
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var _excluded48 = ["seriesId", "isFaded", "isHighlighted", "x", "y", "color", "size", "dataIndex"];
function ScatterMarker(props) {
  const {
    isFaded,
    isHighlighted,
    x,
    y,
    color,
    size
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
  return (0, import_jsx_runtime80.jsx)("circle", _extends({
    cx: 0,
    cy: 0,
    r: (isHighlighted ? 1.2 : 1) * size,
    transform: `translate(${x}, ${y})`,
    fill: color,
    opacity: isFaded ? 0.3 : 1,
    cursor: other.onClick ? "pointer" : "unset"
  }, other));
}
true ? ScatterMarker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The fill color of the marker.
   */
  color: import_prop_types60.default.string.isRequired,
  /**
   * The index of the data point.
   */
  dataIndex: import_prop_types60.default.number.isRequired,
  /**
   * If `true`, the marker is faded.
   */
  isFaded: import_prop_types60.default.bool.isRequired,
  /**
   * If `true`, the marker is highlighted.
   */
  isHighlighted: import_prop_types60.default.bool.isRequired,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   */
  onClick: import_prop_types60.default.func,
  /**
   * The series ID.
   */
  seriesId: import_prop_types60.default.oneOfType([import_prop_types60.default.number, import_prop_types60.default.string]).isRequired,
  /**
   * The size of the marker.
   */
  size: import_prop_types60.default.number.isRequired,
  /**
   * The x coordinate of the data point.
   */
  x: import_prop_types60.default.number.isRequired,
  /**
   * The y coordinate of the data point.
   */
  y: import_prop_types60.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var _excluded49 = ["ownerState"];
function Scatter(props) {
  const {
    series,
    xScale,
    yScale,
    color,
    colorGetter,
    onItemClick,
    slots,
    slotProps
  } = props;
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const isVoronoiEnabled = useSelector(store, selectorChartsVoronoiIsVoronoiEnabled);
  const skipInteractionHandlers = isVoronoiEnabled || series.disableHover;
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const cleanData = React117.useMemo(() => {
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    const temp = [];
    for (let i = 0; i < series.data.length; i += 1) {
      const scatterPoint = series.data[i];
      const x = getXPosition(scatterPoint.x);
      const y = getYPosition(scatterPoint.y);
      const isInRange = instance.isPointInside(x, y);
      if (isInRange) {
        const currentItem = {
          seriesId: series.id,
          dataIndex: i
        };
        const isItemHighlighted = isHighlighted(currentItem);
        temp.push({
          x,
          y,
          isHighlighted: isItemHighlighted,
          isFaded: !isItemHighlighted && isFaded(currentItem),
          id: scatterPoint.id,
          seriesId: series.id,
          type: "scatter",
          dataIndex: i,
          color: colorGetter ? colorGetter(i) : color
        });
      }
    }
    return temp;
  }, [xScale, yScale, series.data, series.id, isHighlighted, isFaded, colorGetter, color, instance]);
  const interactionItemProps = useInteractionAllItemProps(cleanData, skipInteractionHandlers);
  const Marker = (slots == null ? void 0 : slots.marker) ?? ScatterMarker;
  const _useSlotProps = useSlotProps_default({
    elementType: Marker,
    externalSlotProps: slotProps == null ? void 0 : slotProps.marker,
    additionalProps: {
      seriesId: series.id,
      size: series.markerSize
    },
    ownerState: {}
  }), markerProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded49);
  return (0, import_jsx_runtime81.jsx)("g", {
    children: cleanData.map((dataPoint, i) => (0, import_jsx_runtime81.jsx)(Marker, _extends({
      dataIndex: dataPoint.dataIndex,
      color: dataPoint.color,
      isHighlighted: dataPoint.isHighlighted,
      isFaded: dataPoint.isFaded,
      x: dataPoint.x,
      y: dataPoint.y,
      onClick: onItemClick && ((event) => onItemClick(event, {
        type: "scatter",
        seriesId: series.id,
        dataIndex: dataPoint.dataIndex
      }))
    }, interactionItemProps[i], markerProps), dataPoint.id ?? dataPoint.dataIndex))
  });
}
true ? Scatter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  color: import_prop_types61.default.string.isRequired,
  colorGetter: import_prop_types61.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types61.default.func,
  series: import_prop_types61.default.object.isRequired,
  slotProps: import_prop_types61.default.object,
  slots: import_prop_types61.default.object,
  xScale: import_prop_types61.default.func.isRequired,
  yScale: import_prop_types61.default.func.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
function ScatterPlot(props) {
  const {
    slots,
    slotProps,
    onItemClick
  } = props;
  const seriesData = useScatterSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const defaultZAxisId = zAxisIds[0];
  const ScatterItems = (slots == null ? void 0 : slots.scatter) ?? Scatter;
  return (0, import_jsx_runtime82.jsx)(React118.Fragment, {
    children: seriesOrder.map((seriesId) => {
      const {
        id,
        xAxisId,
        yAxisId,
        zAxisId,
        color
      } = series[seriesId];
      const colorGetter = getColor_default2(series[seriesId], xAxis[xAxisId ?? defaultXAxisId], yAxis[yAxisId ?? defaultYAxisId], zAxis[zAxisId ?? defaultZAxisId]);
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      return (0, import_jsx_runtime82.jsx)(ScatterItems, _extends({
        xScale,
        yScale,
        color,
        colorGetter,
        series: series[seriesId],
        onItemClick,
        slots,
        slotProps
      }, slotProps == null ? void 0 : slotProps.scatter), id);
    })
  });
}
true ? ScatterPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types62.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types62.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types62.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
var React119 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.plugins.js
var SCATTER_CHART_PLUGINS = [useChartZAxis, useChartCartesianAxis, useChartInteraction, useChartHighlight, useChartVoronoi];

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
var _excluded50 = ["xAxis", "yAxis", "zAxis", "series", "axisHighlight", "voronoiMaxRadius", "disableVoronoi", "hideLegend", "width", "height", "margin", "colors", "sx", "grid", "onItemClick", "children", "slots", "slotProps", "loading", "highlightedItem", "onHighlightChange", "className", "showToolbar"];
var useScatterChartProps = (props) => {
  var _a, _b, _c, _d;
  const {
    xAxis,
    yAxis,
    zAxis,
    series,
    axisHighlight,
    voronoiMaxRadius,
    disableVoronoi,
    width,
    height,
    margin,
    colors,
    sx,
    grid,
    onItemClick,
    children,
    slots,
    slotProps,
    loading,
    highlightedItem,
    onHighlightChange,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
  const seriesWithDefault = React119.useMemo(() => series.map((s) => _extends({
    type: "scatter"
  }, s)), [series]);
  const chartContainerProps = _extends({}, other, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    xAxis,
    yAxis,
    zAxis,
    highlightedItem,
    onHighlightChange,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick: disableVoronoi ? void 0 : onItemClick,
    className,
    plugins: SCATTER_CHART_PLUGINS,
    slots,
    slotProps
  });
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const scatterPlotProps = {
    onItemClick: disableVoronoi ? onItemClick : void 0,
    slots,
    slotProps
  };
  const overlayProps = {
    loading,
    slots,
    slotProps
  };
  const legendProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({
    y: "none",
    x: "none"
  }, axisHighlight);
  const chartsWrapperProps = {
    sx,
    legendPosition: (_b = (_a = props.slotProps) == null ? void 0 : _a.legend) == null ? void 0 : _b.position,
    legendDirection: (_d = (_c = props.slotProps) == null ? void 0 : _c.legend) == null ? void 0 : _d.direction
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var ScatterChart = React120.forwardRef(function ScatterChart2(inProps, ref) {
  var _a, _b, _c;
  const props = useThemeProps({
    props: inProps,
    name: "MuiScatterChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  } = useScatterChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const Toolbar2 = ((_b = props.slots) == null ? void 0 : _b.toolbar) ?? ChartsToolbar;
  return (0, import_jsx_runtime83.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime83.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar ? (0, import_jsx_runtime83.jsx)(Toolbar2, {}) : null, !props.hideLegend && (0, import_jsx_runtime83.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime83.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime83.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime83.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime83.jsx)("g", {
          "data-drawing-container": true,
          children: (0, import_jsx_runtime83.jsx)(ScatterPlot, _extends({}, scatterPlotProps))
        }), (0, import_jsx_runtime83.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime83.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps)), children]
      })), !props.loading && (0, import_jsx_runtime83.jsx)(Tooltip, _extends({
        trigger: "item"
      }, (_c = props.slotProps) == null ? void 0 : _c.tooltip))]
    }))
  }));
});
if (true)
  ScatterChart.displayName = "ScatterChart";
true ? ScatterChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types63.default.shape({
    current: import_prop_types63.default.object
  }),
  /**
   * The configuration of axes highlight.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   * @default { x: 'none', y: 'none' }
   */
  axisHighlight: import_prop_types63.default.shape({
    x: import_prop_types63.default.oneOf(["band", "line", "none"]),
    y: import_prop_types63.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types63.default.node,
  className: import_prop_types63.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string), import_prop_types63.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types63.default.arrayOf(import_prop_types63.default.object),
  desc: import_prop_types63.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types63.default.bool,
  /**
   * If true, the interaction will not use the Voronoi cell and fall back to hover events.
   * @default false
   */
  disableVoronoi: import_prop_types63.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types63.default.shape({
    horizontal: import_prop_types63.default.bool,
    vertical: import_prop_types63.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types63.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types63.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types63.default.shape({
    dataIndex: import_prop_types63.default.number,
    seriesId: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types63.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types63.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types63.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.shape({
    bottom: import_prop_types63.default.number,
    left: import_prop_types63.default.number,
    right: import_prop_types63.default.number,
    top: import_prop_types63.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types63.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types63.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element if using Voronoi cells. Or the Mouse event from the scatter element, when `disableVoronoi=true`.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types63.default.func,
  /**
   * The series to display in the scatter chart.
   * An array of [[ScatterSeriesType]] objects.
   */
  series: import_prop_types63.default.arrayOf(import_prop_types63.default.object).isRequired,
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types63.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types63.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types63.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types63.default.object,
  sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
  theme: import_prop_types63.default.oneOf(["dark", "light"]),
  title: import_prop_types63.default.string,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types63.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types63.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    barGapRatio: import_prop_types63.default.number,
    categoryGapRatio: import_prop_types63.default.number,
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      type: import_prop_types63.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types63.default.string,
      values: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number, import_prop_types63.default.string]).isRequired)
    }), import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["band"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      type: import_prop_types63.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types63.default.string,
      values: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number, import_prop_types63.default.string]).isRequired)
    }), import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["point"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["log"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["pow"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["sqrt"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["time"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["utc"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["x"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    height: import_prop_types63.default.number,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["linear"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelMinGap: import_prop_types63.default.number,
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    barGapRatio: import_prop_types63.default.number,
    categoryGapRatio: import_prop_types63.default.number,
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      type: import_prop_types63.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types63.default.string,
      values: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number, import_prop_types63.default.string]).isRequired)
    }), import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["band"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      type: import_prop_types63.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types63.default.string,
      values: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number, import_prop_types63.default.string]).isRequired)
    }), import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["point"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["log"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["pow"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["sqrt"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["time"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["utc"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  }), import_prop_types63.default.shape({
    axis: import_prop_types63.default.oneOf(["y"]),
    classes: import_prop_types63.default.object,
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    disableLine: import_prop_types63.default.bool,
    disableTicks: import_prop_types63.default.bool,
    domainLimit: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["nice", "strict"]), import_prop_types63.default.func]),
    fill: import_prop_types63.default.string,
    hideTooltip: import_prop_types63.default.bool,
    id: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
    ignoreTooltip: import_prop_types63.default.bool,
    label: import_prop_types63.default.string,
    labelStyle: import_prop_types63.default.object,
    max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
    offset: import_prop_types63.default.number,
    position: import_prop_types63.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types63.default.bool,
    scaleType: import_prop_types63.default.oneOf(["linear"]),
    slotProps: import_prop_types63.default.object,
    slots: import_prop_types63.default.object,
    stroke: import_prop_types63.default.string,
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    tickInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.array, import_prop_types63.default.func]),
    tickLabelInterval: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["auto"]), import_prop_types63.default.func]),
    tickLabelPlacement: import_prop_types63.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types63.default.object,
    tickMaxStep: import_prop_types63.default.number,
    tickMinStep: import_prop_types63.default.number,
    tickNumber: import_prop_types63.default.number,
    tickPlacement: import_prop_types63.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types63.default.number,
    valueFormatter: import_prop_types63.default.func,
    width: import_prop_types63.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types63.default.arrayOf(import_prop_types63.default.shape({
    colorMap: import_prop_types63.default.oneOfType([import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      type: import_prop_types63.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types63.default.string,
      values: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number, import_prop_types63.default.string]).isRequired)
    }), import_prop_types63.default.shape({
      color: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.string.isRequired), import_prop_types63.default.func]).isRequired,
      max: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      min: import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]),
      type: import_prop_types63.default.oneOf(["continuous"]).isRequired
    }), import_prop_types63.default.shape({
      colors: import_prop_types63.default.arrayOf(import_prop_types63.default.string).isRequired,
      thresholds: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.instanceOf(Date), import_prop_types63.default.number]).isRequired).isRequired,
      type: import_prop_types63.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types63.default.array,
    dataKey: import_prop_types63.default.string,
    id: import_prop_types63.default.string,
    max: import_prop_types63.default.number,
    min: import_prop_types63.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
var React121 = __toESM(require_react(), 1);
var import_prop_types64 = __toESM(require_prop_types(), 1);
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var _excluded51 = ["xAxis", "yAxis", "width", "height", "margin", "color", "sx", "showTooltip", "showHighlight", "axisHighlight", "children", "slots", "slotProps", "data", "plotType", "valueFormatter", "area", "curve", "className", "disableClipping", "clipAreaOffset"];
var SPARK_LINE_DEFAULT_MARGIN = 5;
var SparkLineChart = React121.forwardRef(function SparkLineChart2(props, ref) {
  var _a, _b, _c;
  const {
    xAxis,
    yAxis,
    width,
    height,
    margin = SPARK_LINE_DEFAULT_MARGIN,
    color,
    sx,
    showTooltip,
    showHighlight,
    axisHighlight: inAxisHighlight,
    children,
    slots,
    slotProps,
    data,
    plotType = "line",
    valueFormatter = (value) => value === null ? "" : value.toString(),
    area,
    curve = "linear",
    className,
    disableClipping,
    clipAreaOffset
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const clipPathOffset = {
    top: (clipAreaOffset == null ? void 0 : clipAreaOffset.top) ?? 1,
    right: (clipAreaOffset == null ? void 0 : clipAreaOffset.right) ?? 1,
    bottom: (clipAreaOffset == null ? void 0 : clipAreaOffset.bottom) ?? 1,
    left: (clipAreaOffset == null ? void 0 : clipAreaOffset.left) ?? 1
  };
  const defaultXHighlight = showHighlight && plotType === "bar" ? {
    x: "band"
  } : {
    x: "none"
  };
  const axisHighlight = _extends({}, defaultXHighlight, inAxisHighlight);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const colors = React121.useMemo(() => {
    if (color == null) {
      return void 0;
    }
    return typeof color === "function" ? (mode) => [color(mode)] : [color];
  }, [color]);
  return (0, import_jsx_runtime84.jsxs)(ChartDataProvider, {
    series: [_extends({
      type: plotType,
      data,
      valueFormatter
    }, plotType === "bar" ? {} : {
      area,
      curve,
      disableHighlight: !showHighlight
    })],
    width,
    height,
    margin,
    xAxis: [_extends({
      id: DEFAULT_X_AXIS_KEY,
      scaleType: plotType === "bar" ? "band" : "point",
      data: Array.from({
        length: data.length
      }, (_, index) => index),
      hideTooltip: xAxis === void 0
    }, xAxis, {
      position: "none"
    })],
    yAxis: [_extends({
      id: DEFAULT_Y_AXIS_KEY
    }, yAxis, {
      position: "none"
    })],
    colors,
    disableAxisListener: (!showTooltip || ((_b = slotProps == null ? void 0 : slotProps.tooltip) == null ? void 0 : _b.trigger) !== "axis") && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    children: [(0, import_jsx_runtime84.jsxs)(ChartsSurface, _extends({
      className,
      ref,
      sx
    }, other, {
      children: [(0, import_jsx_runtime84.jsxs)("g", {
        clipPath: `url(#${clipPathId})`,
        children: [plotType === "bar" && (0, import_jsx_runtime84.jsx)(BarPlot, {
          skipAnimation: true,
          slots,
          slotProps
        }), plotType === "line" && (0, import_jsx_runtime84.jsxs)(React121.Fragment, {
          children: [(0, import_jsx_runtime84.jsx)(AreaPlot, {
            skipAnimation: true,
            slots,
            slotProps
          }), (0, import_jsx_runtime84.jsx)(LinePlot, {
            skipAnimation: true,
            slots,
            slotProps
          })]
        })]
      }), plotType === "line" && (0, import_jsx_runtime84.jsx)(LineHighlightPlot, {
        slots,
        slotProps
      }), disableClipping ? null : (0, import_jsx_runtime84.jsx)(ChartsClipPath, {
        id: clipPathId,
        offset: clipPathOffset
      }), (0, import_jsx_runtime84.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), children]
    })), showTooltip && (0, import_jsx_runtime84.jsx)(Tooltip, _extends({}, (_c = props.slotProps) == null ? void 0 : _c.tooltip))]
  });
});
if (true)
  SparkLineChart.displayName = "SparkLineChart";
true ? SparkLineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types64.default.shape({
    current: import_prop_types64.default.object
  }),
  /**
   * Set to `true` to fill spark line area.
   * Has no effect if plotType='bar'.
   * @default false
   */
  area: import_prop_types64.default.bool,
  axisHighlight: import_prop_types64.default.shape({
    x: import_prop_types64.default.oneOf(["band", "line", "none"]),
    y: import_prop_types64.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types64.default.node,
  className: import_prop_types64.default.string,
  /**
   * The clipped area offset in pixels.
   *
   * This prevents partial clipping of lines when they are drawn on the edge of the drawing area.
   *
   * @default { top: 1, right: 1, bottom: 1, left: 1 }
   */
  clipAreaOffset: import_prop_types64.default.shape({
    bottom: import_prop_types64.default.number,
    left: import_prop_types64.default.number,
    right: import_prop_types64.default.number,
    top: import_prop_types64.default.number
  }),
  /**
   * Color used to colorize the sparkline.
   * @default rainbowSurgePalette[0]
   */
  color: import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.string]),
  /**
   * @default 'linear'
   */
  curve: import_prop_types64.default.oneOf(["bumpX", "bumpY", "catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
  /**
   * Data to plot.
   */
  data: import_prop_types64.default.arrayOf(import_prop_types64.default.number).isRequired,
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types64.default.arrayOf(import_prop_types64.default.object),
  desc: import_prop_types64.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types64.default.bool,
  /**
   * When `true`, the chart's drawing area will not be clipped and elements within can visually overflow the chart.
   *
   * @default false
   */
  disableClipping: import_prop_types64.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types64.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types64.default.number,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types64.default.shape({
    dataIndex: import_prop_types64.default.number,
    seriesId: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types64.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types64.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default 5
   */
  margin: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.shape({
    bottom: import_prop_types64.default.number,
    left: import_prop_types64.default.number,
    right: import_prop_types64.default.number,
    top: import_prop_types64.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types64.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types64.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types64.default.func,
  /**
   * Type of plot used.
   * @default 'line'
   */
  plotType: import_prop_types64.default.oneOf(["bar", "line"]),
  /**
   * Set to `true` to highlight the value.
   * With line, it shows a point.
   * With bar, it shows a highlight band.
   * @default false
   */
  showHighlight: import_prop_types64.default.bool,
  /**
   * Set to `true` to enable the tooltip in the sparkline.
   * @default false
   */
  showTooltip: import_prop_types64.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types64.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types64.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types64.default.object,
  sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
  theme: import_prop_types64.default.oneOf(["dark", "light"]),
  title: import_prop_types64.default.string,
  /**
   * Formatter used by the tooltip.
   * @param {number} value The value to format.
   * @returns {string} the formatted value.
   * @default (value: number | null) => (value === null ? '' : value.toString())
   */
  valueFormatter: import_prop_types64.default.func,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types64.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types64.default.number,
  /**
   * The xAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  xAxis: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    barGapRatio: import_prop_types64.default.number,
    categoryGapRatio: import_prop_types64.default.number,
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      type: import_prop_types64.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types64.default.string,
      values: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number, import_prop_types64.default.string]).isRequired)
    }), import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["band"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      type: import_prop_types64.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types64.default.string,
      values: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number, import_prop_types64.default.string]).isRequired)
    }), import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["point"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["log"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["pow"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["sqrt"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["time"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["utc"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["x"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    height: import_prop_types64.default.number,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["linear"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelMinGap: import_prop_types64.default.number,
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func
  })]),
  /**
   * The yAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  yAxis: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    barGapRatio: import_prop_types64.default.number,
    categoryGapRatio: import_prop_types64.default.number,
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      type: import_prop_types64.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types64.default.string,
      values: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number, import_prop_types64.default.string]).isRequired)
    }), import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["band"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      type: import_prop_types64.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types64.default.string,
      values: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number, import_prop_types64.default.string]).isRequired)
    }), import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["point"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["log"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["pow"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["sqrt"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["time"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["utc"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  }), import_prop_types64.default.shape({
    axis: import_prop_types64.default.oneOf(["y"]),
    classes: import_prop_types64.default.object,
    colorMap: import_prop_types64.default.oneOfType([import_prop_types64.default.shape({
      color: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.string.isRequired), import_prop_types64.default.func]).isRequired,
      max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
      type: import_prop_types64.default.oneOf(["continuous"]).isRequired
    }), import_prop_types64.default.shape({
      colors: import_prop_types64.default.arrayOf(import_prop_types64.default.string).isRequired,
      thresholds: import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]).isRequired).isRequired,
      type: import_prop_types64.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types64.default.array,
    dataKey: import_prop_types64.default.string,
    disableLine: import_prop_types64.default.bool,
    disableTicks: import_prop_types64.default.bool,
    domainLimit: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["nice", "strict"]), import_prop_types64.default.func]),
    fill: import_prop_types64.default.string,
    hideTooltip: import_prop_types64.default.bool,
    id: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.string]),
    ignoreTooltip: import_prop_types64.default.bool,
    label: import_prop_types64.default.string,
    labelStyle: import_prop_types64.default.object,
    max: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    min: import_prop_types64.default.oneOfType([import_prop_types64.default.instanceOf(Date), import_prop_types64.default.number]),
    offset: import_prop_types64.default.number,
    position: import_prop_types64.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types64.default.bool,
    scaleType: import_prop_types64.default.oneOf(["linear"]),
    slotProps: import_prop_types64.default.object,
    slots: import_prop_types64.default.object,
    stroke: import_prop_types64.default.string,
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    tickInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.array, import_prop_types64.default.func]),
    tickLabelInterval: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["auto"]), import_prop_types64.default.func]),
    tickLabelPlacement: import_prop_types64.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types64.default.object,
    tickMaxStep: import_prop_types64.default.number,
    tickMinStep: import_prop_types64.default.number,
    tickNumber: import_prop_types64.default.number,
    tickPlacement: import_prop_types64.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types64.default.number,
    valueFormatter: import_prop_types64.default.func,
    width: import_prop_types64.default.number
  })])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
var React127 = __toESM(require_react(), 1);
var import_prop_types68 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
var React123 = __toESM(require_react(), 1);
var import_prop_types65 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var React122 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/Gauge/utils.js
function getPoint(angle) {
  const radAngle = deg2rad(angle);
  return [Math.sin(radAngle), -Math.cos(radAngle)];
}
function getArcRatios(startAngle, endAngle) {
  const points = [[0, 0], getPoint(startAngle), getPoint(endAngle)];
  const minAngle = Math.min(startAngle, endAngle);
  const maxAngle = Math.max(startAngle, endAngle);
  const initialAngle = Math.floor(minAngle / 90) * 90;
  for (let step = 1; step <= 4; step += 1) {
    const cardinalAngle = initialAngle + step * 90;
    if (cardinalAngle < maxAngle) {
      points.push(getPoint(cardinalAngle));
    }
  }
  const minX = Math.min(...points.map(([x]) => x));
  const maxX = Math.max(...points.map(([x]) => x));
  const minY = Math.min(...points.map(([, y]) => y));
  const maxY = Math.max(...points.map(([, y]) => y));
  return {
    cx: -minX / (maxX - minX),
    cy: -minY / (maxY - minY),
    minX,
    maxX,
    minY,
    maxY
  };
}
function getAvailableRadius(cx, cy, width, height, {
  minX,
  maxX,
  minY,
  maxY
}) {
  return Math.min(...[{
    ratio: Math.abs(minX),
    space: cx
  }, {
    ratio: Math.abs(maxX),
    space: width - cx
  }, {
    ratio: Math.abs(minY),
    space: cy
  }, {
    ratio: Math.abs(maxY),
    space: height - cy
  }].map(({
    ratio,
    space
  }) => {
    if (ratio < 1e-5) {
      return Infinity;
    }
    return space / ratio;
  }));
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var GaugeContext = React122.createContext({
  value: null,
  valueMin: 0,
  valueMax: 0,
  startAngle: 0,
  endAngle: 0,
  innerRadius: 0,
  outerRadius: 0,
  cornerRadius: 0,
  cx: 0,
  cy: 0,
  maxRadius: 0,
  valueAngle: null
});
if (true)
  GaugeContext.displayName = "GaugeContext";
function GaugeProvider(props) {
  const {
    value = null,
    valueMin = 0,
    valueMax = 100,
    startAngle = 0,
    endAngle = 360,
    outerRadius: outerRadiusParam,
    innerRadius: innerRadiusParam,
    cornerRadius: cornerRadiusParam,
    cx: cxParam,
    cy: cyParam,
    children
  } = props;
  const {
    left: left2,
    top: top2,
    width,
    height
  } = useDrawingArea();
  const ratios = getArcRatios(startAngle, endAngle);
  const innerCx = cxParam ? getPercentageValue(cxParam, width) : ratios.cx * width;
  const innerCy = cyParam ? getPercentageValue(cyParam, height) : ratios.cy * height;
  let cx = left2 + innerCx;
  let cy = top2 + innerCy;
  const maxRadius = getAvailableRadius(innerCx, innerCy, width, height, ratios);
  if (cxParam === void 0) {
    const usedWidth = maxRadius * (ratios.maxX - ratios.minX);
    cx = left2 + (width - usedWidth) / 2 + ratios.cx * usedWidth;
  }
  if (cyParam === void 0) {
    const usedHeight = maxRadius * (ratios.maxY - ratios.minY);
    cy = top2 + (height - usedHeight) / 2 + ratios.cy * usedHeight;
  }
  const outerRadius = getPercentageValue(outerRadiusParam ?? maxRadius, maxRadius);
  const innerRadius = getPercentageValue(innerRadiusParam ?? "80%", maxRadius);
  const cornerRadius = getPercentageValue(cornerRadiusParam ?? 0, outerRadius - innerRadius);
  const contextValue = React122.useMemo(() => {
    const startAngleRad = deg2rad(startAngle);
    const endAngleRad = deg2rad(endAngle);
    return {
      value,
      valueMin,
      valueMax,
      startAngle: startAngleRad,
      endAngle: endAngleRad,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      maxRadius,
      valueAngle: value === null ? null : startAngleRad + (endAngleRad - startAngleRad) * (value - valueMin) / (valueMax - valueMin)
    };
  }, [value, valueMin, valueMax, startAngle, endAngle, outerRadius, innerRadius, cornerRadius, cx, cy, maxRadius]);
  return (0, import_jsx_runtime85.jsx)(GaugeContext.Provider, {
    value: contextValue,
    children
  });
}
function useGaugeState() {
  return React122.useContext(GaugeContext);
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var _excluded52 = ["width", "height", "margin", "title", "desc", "value", "valueMin", "valueMax", "startAngle", "endAngle", "outerRadius", "innerRadius", "cornerRadius", "cx", "cy", "children"];
var GStyled = styled_default("g")(({
  theme
}) => ({
  "& text": {
    fill: (theme.vars || theme).palette.text.primary
  }
}));
var GaugeContainer = React123.forwardRef(function GaugeContainer2(props, ref) {
  const {
    width: inWidth,
    height: inHeight,
    margin,
    title,
    desc,
    value,
    valueMin = 0,
    valueMax = 100,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
  return (0, import_jsx_runtime86.jsx)(ChartProvider, {
    pluginParams: {
      width: inWidth,
      height: inHeight,
      margin: defaultizeMargin(margin, {
        left: 10,
        right: 10,
        top: 10,
        bottom: 10
      })
    },
    plugins: [],
    children: (0, import_jsx_runtime86.jsx)(GaugeProvider, {
      value,
      valueMin,
      valueMax,
      startAngle,
      endAngle,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      children: (0, import_jsx_runtime86.jsx)(ChartsSurface, _extends({
        title,
        desc,
        role: "meter",
        "aria-valuenow": value === null ? void 0 : value,
        "aria-valuemin": valueMin,
        "aria-valuemax": valueMax
      }, other, {
        ref,
        children: (0, import_jsx_runtime86.jsx)(GStyled, {
          "aria-hidden": "true",
          children
        })
      }))
    })
  });
});
if (true)
  GaugeContainer.displayName = "GaugeContainer";
true ? GaugeContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types65.default.node,
  className: import_prop_types65.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.string]),
  desc: import_prop_types65.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types65.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types65.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types65.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.shape({
    bottom: import_prop_types65.default.number,
    left: import_prop_types65.default.number,
    right: import_prop_types65.default.number,
    top: import_prop_types65.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types65.default.oneOfType([import_prop_types65.default.number, import_prop_types65.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types65.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types65.default.number,
  sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object]),
  title: import_prop_types65.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types65.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types65.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types65.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types65.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
var React124 = __toESM(require_react(), 1);
var import_prop_types66 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateGaugeValueArc.js
function gaugeValueArcPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimateGaugeValueArc(props) {
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: gaugeValueArcPropsInterpolator,
    transformProps: (p) => ({
      d: arc_default().cornerRadius(p.cornerRadius)({
        innerRadius: p.innerRadius,
        outerRadius: p.outerRadius,
        startAngle: p.startAngle,
        endAngle: p.endAngle
      })
    }),
    applyProps(element, p) {
      element.setAttribute("d", p.d);
    },
    initialProps: {
      startAngle: props.startAngle,
      endAngle: props.startAngle,
      innerRadius: props.innerRadius,
      outerRadius: props.outerRadius,
      cornerRadius: props.cornerRadius
    },
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var _excluded53 = ["cx", "cy", "startAngle", "endAngle", "cornerRadius", "innerRadius", "outerRadius", "skipAnimation"];
var StyledPath = styled_default("path", {
  name: "MuiGauge",
  slot: "ReferenceArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.primary.main
}));
function GaugeValueArc(props) {
  const {
    value,
    valueMin,
    valueMax,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  if (value === null) {
    return null;
  }
  const valueAngle = startAngle + (value - valueMin) / (valueMax - valueMin) * (endAngle - startAngle);
  return (0, import_jsx_runtime87.jsx)(AnimatedGaugeValueArc, _extends({}, props, {
    cx,
    cy,
    startAngle,
    endAngle: valueAngle,
    cornerRadius,
    innerRadius,
    outerRadius
  }));
}
true ? GaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  skipAnimation: import_prop_types66.default.bool
} : void 0;
function AnimatedGaugeValueArc(_ref) {
  let {
    cx,
    cy,
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation: inSkipAnimation
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded53);
  const skipAnimation = useSkipAnimation(inSkipAnimation);
  const animatedProps = useAnimateGaugeValueArc({
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation
  });
  return (0, import_jsx_runtime87.jsx)(StyledPath, _extends({}, animatedProps, {
    transform: `translate(${cx}, ${cy})`
  }, other));
}
true ? AnimatedGaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  cornerRadius: import_prop_types66.default.number.isRequired,
  cx: import_prop_types66.default.number.isRequired,
  cy: import_prop_types66.default.number.isRequired,
  endAngle: import_prop_types66.default.number.isRequired,
  innerRadius: import_prop_types66.default.number.isRequired,
  outerRadius: import_prop_types66.default.number.isRequired,
  skipAnimation: import_prop_types66.default.bool,
  startAngle: import_prop_types66.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeReferenceArc.js
var React125 = __toESM(require_react(), 1);
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var StyledPath2 = styled_default("path", {
  name: "MuiGauge",
  slot: "ReferenceArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.divider
}));
function GaugeReferenceArc(props) {
  const {
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  return (0, import_jsx_runtime88.jsx)(StyledPath2, _extends({
    transform: `translate(${cx}, ${cy})`,
    d: arc_default().cornerRadius(cornerRadius)({
      startAngle,
      endAngle,
      innerRadius,
      outerRadius
    })
  }, props));
}

// node_modules/@mui/x-charts/esm/Gauge/gaugeClasses.js
function getGaugeUtilityClass(slot) {
  return generateUtilityClass("MuiGauge", slot);
}
var gaugeClasses = generateUtilityClasses("MuiGauge", ["root", "valueArc", "referenceArc", "valueText"]);

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueText.js
var React126 = __toESM(require_react(), 1);
var import_prop_types67 = __toESM(require_prop_types(), 1);
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var _excluded54 = ["text", "className"];
function defaultFormatter({
  value
}) {
  return value === null ? null : value.toLocaleString();
}
function GaugeValueText(props) {
  const {
    text = defaultFormatter,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const {
    value,
    valueMin,
    valueMax,
    cx,
    cy
  } = useGaugeState();
  const formattedText = typeof text === "function" ? text({
    value,
    valueMin,
    valueMax
  }) : text;
  if (formattedText === null) {
    return null;
  }
  return (0, import_jsx_runtime89.jsx)("g", {
    className,
    children: (0, import_jsx_runtime89.jsx)(ChartsText, _extends({
      x: cx,
      y: cy,
      text: formattedText,
      style: {
        textAnchor: "middle",
        dominantBaseline: "central"
      }
    }, other))
  });
}
true ? GaugeValueText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Height of a text line (in `em`).
   */
  lineHeight: import_prop_types67.default.number,
  /**
   * If `true`, the line width is computed.
   * @default false
   */
  needsComputation: import_prop_types67.default.bool,
  ownerState: import_prop_types67.default.any,
  /**
   * Style applied to text elements.
   */
  style: import_prop_types67.default.object,
  text: import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var _excluded55 = ["text", "children", "classes", "className", "skipAnimation"];
var useUtilityClasses26 = (props) => {
  const {
    classes
  } = props;
  const slots = {
    root: ["root"],
    valueArc: ["valueArc"],
    referenceArc: ["referenceArc"],
    valueText: ["valueText"]
  };
  return composeClasses(slots, getGaugeUtilityClass, classes);
};
var Gauge = React127.forwardRef(function Gauge2(props, ref) {
  const {
    text,
    children,
    className,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
  const classes = useUtilityClasses26(props);
  return (0, import_jsx_runtime90.jsxs)(GaugeContainer, _extends({}, other, {
    className: clsx_default2(classes.root, className),
    ref,
    children: [(0, import_jsx_runtime90.jsx)(GaugeReferenceArc, {
      className: classes.referenceArc
    }), (0, import_jsx_runtime90.jsx)(GaugeValueArc, {
      className: classes.valueArc,
      skipAnimation
    }), (0, import_jsx_runtime90.jsx)(GaugeValueText, {
      className: classes.valueText,
      text
    }), children]
  }));
});
if (true)
  Gauge.displayName = "Gauge";
true ? Gauge.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types68.default.node,
  classes: import_prop_types68.default.object,
  className: import_prop_types68.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  desc: import_prop_types68.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types68.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types68.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types68.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.shape({
    bottom: import_prop_types68.default.number,
    left: import_prop_types68.default.number,
    right: import_prop_types68.default.number,
    top: import_prop_types68.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types68.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types68.default.number,
  sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object]),
  text: import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.string]),
  title: import_prop_types68.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types68.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types68.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types68.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types68.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
var React139 = __toESM(require_react(), 1);
var import_prop_types74 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/useRadarChartProps.js
var _excluded56 = ["apiRef", "series", "radar", "width", "height", "margin", "colors", "sx", "children", "slots", "slotProps", "skipAnimation", "loading", "highlightedItem", "onHighlightChange", "hideLegend", "divisions", "shape", "stripeColor", "highlight", "showToolbar"];
var useRadarChartProps = (props) => {
  const {
    apiRef,
    series,
    radar,
    width,
    height,
    margin,
    colors,
    sx,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    highlightedItem,
    onHighlightChange,
    divisions,
    shape,
    stripeColor,
    highlight = "axis"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
  const radarDataProviderProps = {
    apiRef,
    series,
    radar,
    highlight,
    width,
    height,
    margin,
    colors,
    highlightedItem,
    onHighlightChange,
    skipAnimation
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx
  };
  const radarGrid = {
    divisions,
    shape,
    stripeColor
  };
  const chartsSurfaceProps = other;
  return {
    highlight,
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    overlayProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var React132 = __toESM(require_react(), 1);
var import_prop_types69 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/useRadarGridData.js
function useRadarGridData() {
  const {
    instance
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const drawingArea = useDrawingArea();
  const cx = drawingArea.left + drawingArea.width / 2;
  const cy = drawingArea.top + drawingArea.height / 2;
  if (!rotationScale || rotationScale.domain().length === 0) {
    return null;
  }
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    center: {
      x: cx,
      y: cy
    },
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r4 = radiusScale.range()[1];
      const angle = angles[dataIndex];
      const [x, y] = instance.polar2svg(r4, angle);
      return {
        x,
        y
      };
    }),
    radius: radiusAxis[metrics[0]].scale.range()[1]
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarGrid.js
var React128 = __toESM(require_react(), 1);
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
function SharpRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    strokeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index) => (index + 1) / divisions);
  return (0, import_jsx_runtime91.jsxs)(React128.Fragment, {
    children: [corners.map(({
      x,
      y
    }, i) => (0, import_jsx_runtime91.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x} ${y}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.radial
    }, i)), divisionRatio.map((ratio) => (0, import_jsx_runtime91.jsx)("path", {
      d: `M ${corners.map(({
        x,
        y
      }) => `${center.x * (1 - ratio) + ratio * x} ${center.y * (1 - ratio) + ratio * y}`).join(" L ")} Z`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.divider
    }, ratio))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarGrid.js
var React129 = __toESM(require_react(), 1);
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
function CircularRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    radius,
    strokeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index) => radius * (index + 1) / divisions);
  return (0, import_jsx_runtime92.jsxs)(React129.Fragment, {
    children: [corners.map(({
      x,
      y
    }, i) => (0, import_jsx_runtime92.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x} ${y}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.radial
    }, i)), divisionRadius.map((r4) => (0, import_jsx_runtime92.jsx)("circle", {
      cx: center.x,
      cy: center.y,
      r: r4,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes == null ? void 0 : classes.divider
    }, r4))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarStripes.js
var React130 = __toESM(require_react(), 1);
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var getPath = (corners, center, outerRatio, innerRatio) => ["M", [...corners, corners[0]].map(({
  x,
  y
}) => `${center.x * (1 - outerRatio) + outerRatio * x} ${center.y * (1 - outerRatio) + outerRatio * y}`).join(" L "), "L", [...corners, corners[0]].reverse().map(({
  x,
  y
}) => `${center.x * (1 - innerRatio) + innerRatio * x} ${center.y * (1 - innerRatio) + innerRatio * y}`).join(" L "), "Z"].join(" ");
function SharpRadarStripes(props) {
  const {
    center,
    corners,
    divisions,
    stripeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index) => (index + 1) / divisions);
  return (0, import_jsx_runtime93.jsx)(React130.Fragment, {
    children: divisionRatio.map((ratio, index) => {
      const smallerRatio = divisionRatio[index - 1] ?? 0;
      return (0, import_jsx_runtime93.jsx)("path", {
        d: getPath(corners, center, ratio, smallerRatio),
        stroke: "none",
        fill: (stripeColor == null ? void 0 : stripeColor(index)) ?? "none",
        fillOpacity: 0.1,
        className: classes == null ? void 0 : classes.stripe
      }, ratio);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarStripes.js
var React131 = __toESM(require_react(), 1);
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var getPath2 = (center, outerRadius, innerRadius) => [`M ${center.x - outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x + outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x - outerRadius} ${center.y} Z`, `M ${center.x - innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x + innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x - innerRadius} ${center.y} Z`].join("");
function CircularRadarStripes(props) {
  const {
    center,
    divisions,
    radius,
    stripeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index) => radius * (index + 1) / divisions);
  return (0, import_jsx_runtime94.jsx)(React131.Fragment, {
    children: divisionRadius.map((r4, index) => {
      const smallerRadius = divisionRadius[index - 1] ?? 0;
      return (0, import_jsx_runtime94.jsx)("path", {
        d: getPath2(center, r4, smallerRadius),
        fillRule: "evenodd",
        fill: (stripeColor == null ? void 0 : stripeColor(index)) ?? "none",
        fillOpacity: 0.1,
        className: classes == null ? void 0 : classes.stripe
      }, r4);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/radarGridClasses.js
function getRadarGridUtilityClass(slot) {
  return generateUtilityClass("MuiRadarGrid", slot);
}
var chartsGridClasses2 = generateUtilityClasses("MuiRadarGrid", ["radial", "divider", "stripe"]);
var useUtilityClasses27 = (classes) => {
  const slots = {
    radial: ["radial"],
    divider: ["divider"],
    stripe: ["stripe"]
  };
  return composeClasses(slots, getRadarGridUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
function RadarGrid(props) {
  const theme = useTheme();
  const {
    divisions = 5,
    shape = "sharp",
    stripeColor = (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : "none"
  } = props;
  const gridData = useRadarGridData();
  const classes = useUtilityClasses27(props.classes);
  if (gridData === null) {
    return null;
  }
  const {
    center,
    corners,
    radius
  } = gridData;
  return shape === "sharp" ? (0, import_jsx_runtime95.jsxs)(React132.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime95.jsx)(SharpRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime95.jsx)(SharpRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  }) : (0, import_jsx_runtime95.jsxs)(React132.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime95.jsx)(CircularRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime95.jsx)(CircularRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  });
}
true ? RadarGrid.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types69.default.object,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types69.default.number,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types69.default.oneOf(["circular", "sharp"]),
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types69.default.func
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
var React133 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.plugins.js
var RADAR_PLUGINS = [useChartPolarAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/formatter.js
var formatter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return {
    seriesOrder,
    series: defaultizeValueFormatter(series, (v2) => v2 == null ? "" : v2.toLocaleString())
  };
};
var formatter_default = formatter;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getColor.js
var getColor5 = (series) => {
  return () => series.color;
};
var getColor_default5 = getColor5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/extremums.js
var radiusExtremumGetter = ({
  series,
  axisIndex
}) => {
  return Object.keys(series).filter((seriesId) => series[seriesId].type === "radar").reduce((acc, seriesId) => {
    const {
      data
    } = series[seriesId];
    return [Math.min(data[axisIndex], acc[0]), Math.max(data[axisIndex], acc[1])];
  }, [Infinity, -Infinity]);
};
var rotationExtremumGetter = ({
  axis
}) => {
  const min2 = Math.min(...axis.data ?? []);
  const max2 = Math.max(...axis.data ?? []);
  return [min2, max2];
};

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/legend.js
var legendGetter5 = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel,
      markType: series[seriesId].labelMarkType ?? "square"
    });
    return acc;
  }, []);
};
var legend_default5 = legendGetter5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/tooltip.js
var tooltipGetter5 = (params) => {
  const {
    series,
    axesConfig,
    getColor: getColor6,
    identifier
  } = params;
  const rotationAxis = axesConfig.rotation;
  if (!identifier || !rotationAxis) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const formatter2 = (v2) => {
    var _a;
    return ((_a = rotationAxis.valueFormatter) == null ? void 0 : _a.call(rotationAxis, v2, {
      location: "tooltip",
      scale: rotationAxis.scale
    })) ?? (v2 == null ? "" : v2.toLocaleString());
  };
  return {
    identifier,
    color: getColor6(),
    label,
    markType: series.labelMarkType,
    values: series.data.map((value, dataIndex) => {
      var _a;
      return {
        value,
        formattedValue: series.valueFormatter(value, {
          dataIndex
        }),
        markType: series.labelMarkType,
        label: formatter2((_a = rotationAxis == null ? void 0 : rotationAxis.data) == null ? void 0 : _a[dataIndex])
      };
    })
  };
};
var axisTooltipGetter3 = (series) => {
  return Object.values(series).map(() => ({
    direction: "rotation",
    axisId: void 0
  }));
};
var tooltip_default5 = tooltipGetter5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getSeriesWithDefaultValues.js
var getSeriesWithDefaultValues5 = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default5 = getSeriesWithDefaultValues5;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/index.js
var radarSeriesConfig = {
  colorProcessor: getColor_default5,
  seriesProcessor: formatter_default,
  legendGetter: legend_default5,
  tooltipGetter: tooltip_default5,
  axisTooltipGetter: axisTooltipGetter3,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default5,
  radiusExtremumGetter,
  rotationExtremumGetter
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var _excluded57 = ["series", "children", "width", "height", "colors", "skipAnimation", "margin", "radar", "highlight", "plugins"];
var RADAR_SERIES_CONFIG = {
  radar: radarSeriesConfig
};
var DEFAULT_RADAR_MARGIN = {
  top: 30,
  bottom: 30,
  left: 50,
  right: 50
};
function RadarDataProvider(props) {
  const {
    series,
    children,
    width,
    height,
    colors,
    skipAnimation,
    margin,
    radar,
    highlight,
    plugins
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const rotationAxes = React133.useMemo(() => [{
    id: "radar-rotation-axis",
    scaleType: "point",
    data: radar.metrics.map((metric) => typeof metric === "string" ? metric : metric.name),
    startAngle: radar.startAngle,
    endAngle: radar.startAngle !== void 0 ? radar.startAngle + 360 : void 0,
    labelGap: radar.labelGap,
    valueFormatter: (name, {
      location
    }) => {
      var _a;
      return ((_a = radar.labelFormatter) == null ? void 0 : _a.call(radar, name, {
        location
      })) ?? name;
    }
  }], [radar]);
  const radiusAxis = React133.useMemo(() => radar.metrics.map((m) => {
    const {
      name,
      min: min2 = 0,
      max: max2 = radar.max
    } = typeof m === "string" ? {
      name: m
    } : m;
    return {
      id: name,
      label: name,
      scaleType: "linear",
      min: min2,
      max: max2
    };
  }), [radar]);
  const defaultizedSeries = React133.useMemo(() => series.map((s) => _extends({
    type: "radar",
    highlightScope: s.highlightScope ?? (highlight === "series" ? {
      highlight: "series",
      fade: "global"
    } : void 0)
  }, s)), [series, highlight]);
  const defaultizedMargin = React133.useMemo(() => defaultizeMargin(margin, DEFAULT_RADAR_MARGIN), [margin]);
  return (0, import_jsx_runtime96.jsx)(ChartDataProvider, _extends({}, other, {
    series: defaultizedSeries,
    width,
    height,
    margin: defaultizedMargin,
    colors,
    skipAnimation,
    plugins: plugins ?? RADAR_PLUGINS,
    rotationAxis: rotationAxes,
    radiusAxis,
    seriesConfig: RADAR_SERIES_CONFIG,
    children
  }));
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
var React136 = __toESM(require_react(), 1);
var import_prop_types72 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/useRadarSeriesData.js
function useRadarSeriesData(querySeriesId) {
  const {
    instance
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const radarSeries = useRadarSeries(querySeriesId === void 0 ? void 0 : [querySeriesId]);
  const {
    isFaded: isItemFaded,
    isHighlighted: isItemHighlighted
  } = useItemHighlightedGetter();
  const metrics = (rotationScale == null ? void 0 : rotationScale.domain()) ?? [];
  const angles = metrics.map((key) => rotationScale == null ? void 0 : rotationScale(key));
  return radarSeries.map((series) => {
    const seriesId = series.id;
    const isSeriesHighlighted = isItemHighlighted({
      seriesId
    });
    const isSeriesFaded = !isSeriesHighlighted && isItemFaded({
      seriesId
    });
    return _extends({}, series, {
      seriesId: series.id,
      isSeriesHighlighted,
      isSeriesFaded,
      points: series.data.map((value, dataIndex) => {
        const highlighted = isItemHighlighted({
          seriesId,
          dataIndex
        });
        const faded = !highlighted && isItemFaded({
          seriesId,
          dataIndex
        });
        const r4 = radiusAxis[metrics[dataIndex]].scale(value);
        const angle = angles[dataIndex];
        const [x, y] = instance.polar2svg(r4, angle);
        return {
          x,
          y,
          isItemHighlighted: highlighted,
          isItemFaded: faded,
          dataIndex
        };
      })
    });
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/radarSeriesPlotClasses.js
function getRadarSeriesPlotUtilityClass(slot) {
  return generateUtilityClass("MuiRadarSeriesPlot", slot);
}
var radarSeriesPlotClasses = generateUtilityClasses("MuiRadarSeriesPlot", ["root", "area", "mark", "highlighted", "faded"]);
var useUtilityClasses28 = (classes) => {
  const slots = {
    root: ["root"],
    area: ["area"],
    mark: ["mark"],
    highlighted: ["highlighted"],
    faded: ["faded"]
  };
  return composeClasses(slots, getRadarSeriesPlotUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
var React134 = __toESM(require_react(), 1);
var import_prop_types70 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/getAreaPath.js
function getAreaPath(points) {
  return `M ${points.map((p) => `${p.x} ${p.y}`).join("L")} Z`;
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var _excluded58 = ["seriesId"];
function getPathProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    points,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    d: getAreaPath(points),
    fill: fillArea ? color : "transparent",
    stroke: color,
    className: clsx_default2(classes.area, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded),
    strokeOpacity: isItemFaded ? 0.5 : 1,
    fillOpacity: isItemHighlighted && 0.4 || isItemFaded && 0.1 || 0.2,
    strokeWidth: !fillArea && isItemHighlighted ? 2 : 1
  };
}
function RadarSeriesArea(props) {
  const {
    seriesId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  const seriesCoordinates = useRadarSeriesData(seriesId);
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses28(props.classes);
  return (0, import_jsx_runtime97.jsx)(React134.Fragment, {
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId: id,
      points,
      color,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime97.jsx)("path", _extends({}, getPathProps({
        seriesId: id,
        points,
        color,
        fillArea,
        isFaded,
        isHighlighted,
        classes
      }), interactionProps[seriesIndex], other), id);
    })
  });
}
true ? RadarSeriesArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types70.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types70.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesMarks.js
var React135 = __toESM(require_react(), 1);
var import_prop_types71 = __toESM(require_prop_types(), 1);
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var _excluded59 = ["seriesId"];
function getCircleProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    point: point2,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    cx: point2.x,
    cy: point2.y,
    r: 3,
    fill: color,
    stroke: color,
    opacity: fillArea && isItemFaded ? 0.5 : 1,
    pointerEvents: "none",
    className: clsx2(classes.mark, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded)
  };
}
function RadarSeriesMarks(props) {
  const other = _objectWithoutPropertiesLoose(props, _excluded59);
  const seriesCoordinates = useRadarSeriesData(props.seriesId);
  const classes = useUtilityClasses28(props.classes);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  return (0, import_jsx_runtime98.jsx)(React135.Fragment, {
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId: id,
      points,
      color,
      hideMark,
      fillArea
    }) => {
      if (hideMark) {
        return null;
      }
      return (0, import_jsx_runtime98.jsx)("g", {
        children: points.map((point2, index) => (0, import_jsx_runtime98.jsx)("circle", _extends({}, getCircleProps({
          seriesId: id,
          point: point2,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), other), index))
      }, id);
    })
  });
}
true ? RadarSeriesMarks.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types71.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types71.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
function RadarSeriesPlot(props) {
  const seriesCoordinates = useRadarSeriesData(props.seriesId);
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses28(props.classes);
  return (0, import_jsx_runtime99.jsx)("g", {
    className: classes.root,
    children: seriesCoordinates == null ? void 0 : seriesCoordinates.map(({
      seriesId,
      points,
      color,
      hideMark,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime99.jsxs)("g", {
        children: [(0, import_jsx_runtime99.jsx)("path", _extends({}, getPathProps({
          seriesId,
          points,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), interactionProps[seriesIndex]), seriesId), !hideMark && points.map((point2, index) => (0, import_jsx_runtime99.jsx)("circle", _extends({}, getCircleProps({
          seriesId,
          point: point2,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        })), index))]
      }, seriesId);
    })
  });
}
true ? RadarSeriesPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types72.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types72.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
var React137 = __toESM(require_react(), 1);
var import_prop_types73 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/useRadarAxisHighlight.js
function useRadarAxisHighlight(params) {
  const {
    includesNeighbors = false
  } = params ?? {};
  const radarSeries = useRadarSeries();
  const rotationScale = useRotationScale();
  const {
    radiusAxis,
    radiusAxisIds
  } = useRadiusAxes();
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const rotationAxisIndex = useSelector(store, selectorChartsInteractionRotationAxisIndex);
  const rotationAxisValue = useSelector(store, selectorChartsInteractionRotationAxisValue);
  const center = useSelector(store, selectorChartPolarCenter);
  const highlightedIndex = rotationAxisIndex;
  if (!rotationScale) {
    return null;
  }
  if (highlightedIndex === null || highlightedIndex === -1) {
    return null;
  }
  if (radarSeries === void 0 || radarSeries.length === 0) {
    return null;
  }
  const metric = radiusAxisIds[highlightedIndex];
  const radiusScale = radiusAxis[metric].scale;
  const angle = rotationScale(rotationAxisValue);
  const radius = radiusScale.range()[1];
  return {
    center,
    radius,
    instance,
    highlightedIndex,
    highlightedMetric: metric,
    highlightedAngle: angle,
    series: radarSeries,
    points: radarSeries.map((series) => {
      const value = series.data[highlightedIndex];
      const r4 = radiusScale(value);
      const [x, y] = instance.polar2svg(r4, angle);
      const retrunedValue = {
        highlighted: {
          x,
          y,
          r: r4,
          angle,
          value
        }
      };
      if (!includesNeighbors) {
        return retrunedValue;
      }
      const dataLength = series.data.length;
      const prevIndex = (dataLength + highlightedIndex - 1) % dataLength;
      const nextIndex = (highlightedIndex + 1) % dataLength;
      const prevValue = series.data[prevIndex];
      const nextValue = series.data[nextIndex];
      if (prevValue != null) {
        const prevR = radiusAxis[radiusAxisIds[prevIndex]].scale(prevValue);
        const prevAngle = rotationScale(rotationScale.domain()[prevIndex]);
        const [px, py] = instance.polar2svg(prevR, prevAngle);
        retrunedValue.previous = {
          x: px,
          y: py,
          r: prevR,
          angle: prevAngle,
          value: prevValue
        };
      }
      if (nextValue != null) {
        const nextR = radiusAxis[radiusAxisIds[nextIndex]].scale(nextValue);
        const nextAngle = rotationScale(rotationScale.domain()[nextIndex]);
        const [nx, ny] = instance.polar2svg(nextR, nextAngle);
        retrunedValue.next = {
          x: nx,
          y: ny,
          r: nextR,
          angle: nextAngle,
          value: nextValue
        };
      }
      return retrunedValue;
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/radarAxisHighlightClasses.js
function getRadarAxisHighlightUtilityClass(slot) {
  return generateUtilityClass("MuiRadarAxisHighlight", slot);
}
var chartsAxisHighlightClasses2 = generateUtilityClasses("MuiRadarAxisHighlight", ["root", "line", "dot"]);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses29 = (classes) => {
  const slots = {
    root: ["root"],
    line: ["line"],
    dot: ["dot"]
  };
  return composeClasses(slots, getRadarAxisHighlightUtilityClass, classes);
};
var highlightMarkShadow = {
  r: 7,
  opacity: 0.3
};
var highlightMark = {
  r: 3,
  opacity: 1
};
function RadarAxisHighlight(props) {
  const classes = useUtilityClasses29(props.classes);
  const theme = useTheme();
  const data = useRadarAxisHighlight();
  if (data === null) {
    return null;
  }
  const {
    center,
    series,
    points,
    radius,
    highlightedAngle,
    instance
  } = data;
  const [x, y] = instance.polar2svg(radius, highlightedAngle);
  return (0, import_jsx_runtime100.jsxs)("g", {
    className: classes.root,
    children: [(0, import_jsx_runtime100.jsx)("path", {
      d: `M ${center.cx} ${center.cy} L ${x} ${y}`,
      stroke: (theme.vars || theme).palette.text.primary,
      strokeWidth: 1,
      className: classes.line,
      pointerEvents: "none",
      strokeDasharray: "4 4"
    }), points.map(({
      highlighted
    }, seriesIndex) => {
      return (0, import_jsx_runtime100.jsx)("circle", _extends({
        fill: series[seriesIndex].color,
        cx: highlighted.x,
        cy: highlighted.y,
        className: classes.dot,
        pointerEvents: "none"
      }, series[seriesIndex].hideMark ? highlightMark : highlightMarkShadow), series[seriesIndex].id);
    })]
  });
}
true ? RadarAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types73.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
var React138 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/useRadarMetricData.js
function useRadarMetricData() {
  const rotationAxis = useRotationAxis();
  const {
    scale: rotationScale,
    valueFormatter,
    labelGap = 10
  } = rotationAxis;
  const {
    radiusAxis
  } = useRadiusAxes();
  const drawingArea = useDrawingArea();
  const cx = drawingArea.left + drawingArea.width / 2;
  const cy = drawingArea.top + drawingArea.height / 2;
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r4 = radiusScale.range()[1] + labelGap;
      const angle = angles[dataIndex];
      return {
        x: cx + r4 * Math.sin(angle),
        y: cy - r4 * Math.cos(angle),
        angle: rad2deg(angle),
        label: (valueFormatter == null ? void 0 : valueFormatter(metric, {
          location: "tick",
          scale: rotationScale
        })) ?? metric
      };
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
function RadarMetricLabels() {
  const {
    corners
  } = useRadarMetricData();
  const theme = useTheme();
  return (0, import_jsx_runtime101.jsx)(React138.Fragment, {
    children: corners.map(({
      x,
      y,
      angle,
      label
    }, i) => (0, import_jsx_runtime101.jsx)(ChartsText, {
      x,
      y,
      fontSize: 14,
      fill: (theme.vars || theme).palette.text.primary,
      stroke: "none",
      text: label,
      style: _extends({}, theme.typography.caption, {
        fontSize: 12,
        lineHeight: 1.25,
        textAnchor: getDefaultTextAnchor(180 + angle),
        dominantBaseline: getDefaultBaseline(180 + angle)
      })
    }, i))
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var RadarChart = React139.forwardRef(function RadarChart2(inProps, ref) {
  var _a, _b, _c;
  const props = useThemeProps({
    props: inProps,
    name: "MuiRadarChart"
  });
  const {
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    overlayProps,
    legendProps,
    highlight,
    children
  } = useRadarChartProps(props);
  const Tooltip = ((_a = props.slots) == null ? void 0 : _a.tooltip) ?? ChartsTooltip;
  const Toolbar2 = ((_b = props.slots) == null ? void 0 : _b.toolbar) ?? ChartsToolbar;
  return (0, import_jsx_runtime102.jsx)(RadarDataProvider, _extends({}, radarDataProviderProps, {
    children: (0, import_jsx_runtime102.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar ? (0, import_jsx_runtime102.jsx)(Toolbar2, {}) : null, !props.hideLegend && (0, import_jsx_runtime102.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime102.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        ref,
        children: [(0, import_jsx_runtime102.jsx)(RadarGrid, _extends({}, radarGrid)), (0, import_jsx_runtime102.jsx)(RadarMetricLabels, {}), (0, import_jsx_runtime102.jsx)(RadarSeriesArea, {}), highlight === "axis" && (0, import_jsx_runtime102.jsx)(RadarAxisHighlight, {}), (0, import_jsx_runtime102.jsx)(RadarSeriesMarks, {}), (0, import_jsx_runtime102.jsx)(ChartsOverlay, _extends({}, overlayProps)), children]
      })), !props.loading && (0, import_jsx_runtime102.jsx)(Tooltip, _extends({}, (_c = props.slotProps) == null ? void 0 : _c.tooltip))]
    }))
  }));
});
if (true)
  RadarChart.displayName = "RadarChart";
true ? RadarChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types74.default.shape({
    current: import_prop_types74.default.object
  }),
  className: import_prop_types74.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.string), import_prop_types74.default.func]),
  desc: import_prop_types74.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types74.default.bool,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types74.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types74.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types74.default.bool,
  /**
   * Indicates if the chart should highlight items per axis or per series.
   * @default 'axis'
   */
  highlight: import_prop_types74.default.oneOf(["axis", "none", "series"]),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types74.default.shape({
    dataIndex: import_prop_types74.default.number,
    seriesId: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types74.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types74.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types74.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.shape({
    bottom: import_prop_types74.default.number,
    left: import_prop_types74.default.number,
    right: import_prop_types74.default.number,
    top: import_prop_types74.default.number
  })]),
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types74.default.func,
  /**
   * The configuration of the radar scales.
   */
  radar: import_prop_types74.default.shape({
    labelFormatter: import_prop_types74.default.func,
    labelGap: import_prop_types74.default.number,
    max: import_prop_types74.default.number,
    metrics: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.string), import_prop_types74.default.arrayOf(import_prop_types74.default.shape({
      max: import_prop_types74.default.number,
      min: import_prop_types74.default.number,
      name: import_prop_types74.default.string.isRequired
    }))]).isRequired,
    startAngle: import_prop_types74.default.number
  }).isRequired,
  /**
   * The series to display in the bar chart.
   * An array of [[RadarSeriesType]] objects.
   */
  series: import_prop_types74.default.arrayOf(import_prop_types74.default.object).isRequired,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types74.default.oneOf(["circular", "sharp"]),
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types74.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types74.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types74.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types74.default.object,
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types74.default.func,
  sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object]),
  theme: import_prop_types74.default.oneOf(["dark", "light"]),
  title: import_prop_types74.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types74.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/ChartContainer/ChartContainer.js
var React140 = __toESM(require_react(), 1);
var import_prop_types75 = __toESM(require_prop_types(), 1);
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var ChartContainer = React140.forwardRef(function ChartContainer2(props, ref) {
  const {
    chartDataProviderProps,
    children,
    chartsSurfaceProps
  } = useChartContainerProps(props, ref);
  return (0, import_jsx_runtime103.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime103.jsx)(ChartsSurface, _extends({}, chartsSurfaceProps, {
      children
    }))
  }));
});
if (true)
  ChartContainer.displayName = "ChartContainer";
true ? ChartContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types75.default.shape({
    current: import_prop_types75.default.object
  }),
  children: import_prop_types75.default.node,
  className: import_prop_types75.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string), import_prop_types75.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types75.default.arrayOf(import_prop_types75.default.object),
  desc: import_prop_types75.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types75.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types75.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types75.default.number,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types75.default.shape({
    dataIndex: import_prop_types75.default.number,
    seriesId: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types75.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types75.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.shape({
    bottom: import_prop_types75.default.number,
    left: import_prop_types75.default.number,
    right: import_prop_types75.default.number,
    top: import_prop_types75.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types75.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types75.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types75.default.func,
  /**
   * The configuration of the radial-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  radiusAxis: import_prop_types75.default.arrayOf(import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    maxRadius: import_prop_types75.default.number,
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    minRadius: import_prop_types75.default.number,
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["linear"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  })),
  /**
   * The configuration of the rotation-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  rotationAxis: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
    barGapRatio: import_prop_types75.default.number,
    categoryGapRatio: import_prop_types75.default.number,
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["band"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["point"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["log"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["pow"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["sqrt"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["time"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["utc"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    endAngle: import_prop_types75.default.number,
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]).isRequired,
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelGap: import_prop_types75.default.number,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["linear"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    startAngle: import_prop_types75.default.number,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  })]).isRequired),
  /**
   * The array of series to display.
   * Each type of series has its own specificity.
   * Please refer to the appropriate docs page to learn more about it.
   */
  series: import_prop_types75.default.arrayOf(import_prop_types75.default.object),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types75.default.bool,
  /**
   * The props for the slots.
   */
  slotProps: import_prop_types75.default.object,
  /**
   * Slots to customize charts' components.
   */
  slots: import_prop_types75.default.object,
  sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
  theme: import_prop_types75.default.oneOf(["dark", "light"]),
  title: import_prop_types75.default.string,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types75.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types75.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    barGapRatio: import_prop_types75.default.number,
    categoryGapRatio: import_prop_types75.default.number,
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["band"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["point"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["log"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["pow"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["sqrt"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["time"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["utc"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["x"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    height: import_prop_types75.default.number,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["linear"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelMinGap: import_prop_types75.default.number,
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    barGapRatio: import_prop_types75.default.number,
    categoryGapRatio: import_prop_types75.default.number,
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["band"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["point"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["log"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["pow"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["sqrt"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["time"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["utc"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  }), import_prop_types75.default.shape({
    axis: import_prop_types75.default.oneOf(["y"]),
    classes: import_prop_types75.default.object,
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    disableLine: import_prop_types75.default.bool,
    disableTicks: import_prop_types75.default.bool,
    domainLimit: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["nice", "strict"]), import_prop_types75.default.func]),
    fill: import_prop_types75.default.string,
    hideTooltip: import_prop_types75.default.bool,
    id: import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string]),
    ignoreTooltip: import_prop_types75.default.bool,
    label: import_prop_types75.default.string,
    labelStyle: import_prop_types75.default.object,
    max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
    offset: import_prop_types75.default.number,
    position: import_prop_types75.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types75.default.bool,
    scaleType: import_prop_types75.default.oneOf(["linear"]),
    slotProps: import_prop_types75.default.object,
    slots: import_prop_types75.default.object,
    stroke: import_prop_types75.default.string,
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    tickInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.array, import_prop_types75.default.func]),
    tickLabelInterval: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["auto"]), import_prop_types75.default.func]),
    tickLabelPlacement: import_prop_types75.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types75.default.object,
    tickMaxStep: import_prop_types75.default.number,
    tickMinStep: import_prop_types75.default.number,
    tickNumber: import_prop_types75.default.number,
    tickPlacement: import_prop_types75.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types75.default.number,
    valueFormatter: import_prop_types75.default.func,
    width: import_prop_types75.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types75.default.arrayOf(import_prop_types75.default.shape({
    colorMap: import_prop_types75.default.oneOfType([import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      type: import_prop_types75.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types75.default.string,
      values: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number, import_prop_types75.default.string]).isRequired)
    }), import_prop_types75.default.shape({
      color: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.string.isRequired), import_prop_types75.default.func]).isRequired,
      max: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      min: import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]),
      type: import_prop_types75.default.oneOf(["continuous"]).isRequired
    }), import_prop_types75.default.shape({
      colors: import_prop_types75.default.arrayOf(import_prop_types75.default.string).isRequired,
      thresholds: import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.instanceOf(Date), import_prop_types75.default.number]).isRequired).isRequired,
      type: import_prop_types75.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types75.default.array,
    dataKey: import_prop_types75.default.string,
    id: import_prop_types75.default.string,
    max: import_prop_types75.default.number,
    min: import_prop_types75.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/Toolbar/Toolbar.js
var React141 = __toESM(require_react(), 1);
var import_prop_types76 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Toolbar/chartToolbarClasses.js
var chartsToolbarClasses = generateUtilityClasses("MuiChartsToolbar", ["root"]);

// node_modules/@mui/x-charts/esm/Toolbar/Toolbar.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var _excluded60 = ["className"];
var ToolbarRoot = styled_default("div", {
  name: "MuiChartsToolbar",
  slot: "Root"
})(({
  theme
}) => ({
  flex: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "end",
  gap: theme.spacing(0.25),
  padding: theme.spacing(0.5),
  minHeight: 44,
  boxSizing: "border-box",
  border: `1px solid ${(theme.vars || theme).palette.divider}`,
  borderRadius: 4
}));
function Toolbar(_ref) {
  let {
    className
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded60);
  return (0, import_jsx_runtime104.jsx)(ToolbarRoot, _extends({
    className: clsx_default2(chartsToolbarClasses.root, className)
  }, other));
}
true ? Toolbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types76.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/Toolbar/ToolbarButton.js
var import_prop_types77 = __toESM(require_prop_types(), 1);
var React143 = __toESM(require_react(), 1);

// node_modules/@mui/x-internals/esm/useComponentRenderer/useComponentRenderer.js
var React142 = __toESM(require_react(), 1);
function useComponentRenderer(defaultElement, render, props, state = {}) {
  if (typeof render === "function") {
    return render(props, state);
  }
  if (render) {
    if (render.props.className) {
      props.className = mergeClassNames(render.props.className, props.className);
    }
    if (render.props.style || props.style) {
      props.style = _extends({}, props.style, render.props.style);
    }
    if (render.props.sx || props.sx) {
      props.sx = mergeSx(props.sx, render.props.sx);
    }
    return React142.cloneElement(render, props);
  }
  return React142.createElement(defaultElement, props);
}
function mergeClassNames(className, otherClassName) {
  if (!className || !otherClassName) {
    return className || otherClassName;
  }
  return `${className} ${otherClassName}`;
}
function mergeSx(sx1, sx2) {
  if (!sx1 || !sx2) {
    return sx1 || sx2;
  }
  return (Array.isArray(sx1) ? sx1 : [sx1]).concat(Array.isArray(sx2) ? sx2 : [sx2]);
}

// node_modules/@mui/x-charts/esm/Toolbar/ToolbarButton.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var _excluded61 = ["render"];
var ToolbarButton = React143.forwardRef(function ToolbarButton2(props, ref) {
  const {
    render
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
  const {
    slots,
    slotProps
  } = useChartsSlots();
  const element = useComponentRenderer(slots.baseIconButton, render, _extends({}, slotProps == null ? void 0 : slotProps.baseIconButton, other, {
    ref
  }));
  return (0, import_jsx_runtime105.jsx)(React143.Fragment, {
    children: element
  });
});
if (true)
  ToolbarButton.displayName = "ToolbarButton";
true ? ToolbarButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types77.default.string,
  disabled: import_prop_types77.default.bool,
  /**
   * A function to customize the rendering of the component.
   */
  render: import_prop_types77.default.oneOfType([import_prop_types77.default.element, import_prop_types77.default.func]),
  style: import_prop_types77.default.object
} : void 0;
export {
  AXIS_LABEL_DEFAULT_HEIGHT,
  AnimatedArea,
  AnimatedLine,
  AreaElement,
  AreaPlot,
  BarChart,
  BarElement,
  BarLabel,
  BarPlot,
  ChartContainer,
  ChartDataProvider,
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsAxisTooltipContent,
  ChartsClipPath,
  ChartsGrid,
  ChartsItemTooltipContent,
  ChartsLabelMark,
  ChartsLegend,
  ChartsLocalizationProvider,
  ChartsReferenceLine,
  ChartsSurface,
  ChartsText,
  ChartsTooltip,
  ChartsTooltipCell,
  ChartsTooltipContainer,
  ChartsTooltipPaper,
  ChartsTooltipRow,
  ChartsTooltipTable,
  ChartsXAxis,
  ChartsYAxis,
  ContinuousColorLegend,
  DEFAULT_AXIS_SIZE_HEIGHT,
  DEFAULT_AXIS_SIZE_WIDTH,
  DEFAULT_MARGINS,
  DEFAULT_RADIUS_AXIS_KEY,
  DEFAULT_ROTATION_AXIS_KEY,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  Gauge,
  GaugeContainer,
  GaugeReferenceArc,
  GaugeValueArc,
  GaugeValueText,
  LineChart,
  LineElement,
  LineHighlightElement,
  LineHighlightPlot,
  LinePlot,
  MarkElement,
  MarkPlot,
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  PiecewiseColorLegend,
  RadarAxisHighlight,
  RadarChart,
  RadarDataProvider,
  RadarGrid,
  RadarMetricLabels,
  RadarSeriesArea,
  RadarSeriesMarks,
  RadarSeriesPlot,
  Scatter,
  ScatterChart,
  ScatterMarker,
  ScatterPlot,
  SparkLineChart,
  Toolbar,
  ToolbarButton,
  RadarChart as Unstable_RadarChart,
  RadarDataProvider as Unstable_RadarDataProvider,
  areaElementClasses,
  axisClasses,
  barElementClasses,
  barLabelClasses,
  bluePalette,
  bluePaletteDark,
  bluePaletteLight,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  chartsAxisHighlightClasses,
  chartsGridClasses,
  chartsToolbarClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  continuousColorLegendClasses,
  cyanPalette,
  cyanPaletteDark,
  cyanPaletteLight,
  gaugeClasses,
  getAreaElementUtilityClass,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getBarElementUtilityClass,
  getBarLabelUtilityClass,
  getChartsGridUtilityClass,
  getChartsTooltipUtilityClass,
  getGaugeUtilityClass,
  getHighlightElementUtilityClass,
  getLineElementUtilityClass,
  getMarkElementUtilityClass,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getPieCoordinates,
  getReferenceLineUtilityClass,
  getValueToPositionMapper,
  greenPalette,
  greenPaletteDark,
  greenPaletteLight,
  isBarSeries,
  isDefaultizedBarSeries,
  labelClasses,
  labelGradientClasses,
  labelMarkClasses,
  legendClasses,
  lineElementClasses,
  lineHighlightElementClasses,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  markElementClasses,
  orangePalette,
  orangePaletteDark,
  orangePaletteLight,
  pieArcClasses,
  pieArcLabelClasses,
  piecewiseColorDefaultLabelFormatter,
  piecewiseColorLegendClasses,
  pinkPalette,
  pinkPaletteDark,
  pinkPaletteLight,
  purplePalette,
  purplePaletteDark,
  purplePaletteLight,
  radarSeriesPlotClasses,
  rainbowSurgePalette,
  rainbowSurgePaletteDark,
  rainbowSurgePaletteLight,
  redPalette,
  redPaletteDark,
  redPaletteLight,
  referenceLineClasses,
  strawberrySkyPalette,
  strawberrySkyPaletteDark,
  strawberrySkyPaletteLight,
  useAnimate,
  useAnimateArea,
  useAnimateBar,
  useAnimateBarLabel,
  useAnimateLine,
  useAnimatePieArc,
  useAnimatePieArcLabel,
  useAxesTooltip,
  useAxisTooltip,
  useBarSeries,
  useBarSeriesContext,
  useChartApiContext,
  useChartGradientId,
  useChartGradientIdObjectBound,
  useChartId2 as useChartId,
  useChartRootRef,
  useChartsLocalization,
  useDrawingArea,
  useGaugeState,
  useItemHighlighted,
  useItemHighlightedGetter,
  useItemTooltip,
  useLegend,
  useLineSeries,
  useLineSeriesContext,
  useMouseTracker,
  usePieSeries,
  usePieSeriesContext,
  useRadarItemTooltip,
  useRadarSeries,
  useRadarSeriesContext,
  useRadiusAxes,
  useRadiusAxis,
  useRadiusScale,
  useRotationAxes,
  useRotationAxis,
  useRotationScale,
  useScatterSeries,
  useScatterSeriesContext,
  useSeries,
  useSvgRef,
  useUtilityClasses14 as useUtilityClasses,
  useXAxes,
  useXAxis,
  useXColorScale,
  useXScale,
  useYAxes,
  useYAxis,
  useYColorScale,
  useYScale,
  useZAxes,
  useZAxis,
  useZColorScale,
  yellowPalette,
  yellowPaletteDark,
  yellowPaletteLight
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-charts/esm/index.js:
  (**
   * @mui/x-charts v8.5.0
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-charts.js.map
